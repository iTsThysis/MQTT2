
/Users/darwinwang/Documents/IoT/MQTT2/target/3.3.0/argon/MQTT2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004854  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8870  000b8870  00008870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b8894  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e57c  000b8898  0001e57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000208  2003e5e8  2003e5e8  0002e5e8  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b8904  000b8904  00028904  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b892c  000b892c  0002892c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0013a2ea  00000000  00000000  00028930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001656b  00000000  00000000  00162c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00046b1b  00000000  00000000  00179185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000033f8  00000000  00000000  001bfca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b218  00000000  00000000  001c3098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004003c  00000000  00000000  001ce2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004e9f2  00000000  00000000  0020e2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00137a04  00000000  00000000  0025ccde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000098c8  00000000  00000000  003946e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 fbc5 	bl	b77bc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 fbcd 	bl	b77d8 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e57c 	.word	0x2003e57c
   b4048:	000b8898 	.word	0x000b8898
   b404c:	2003e5e8 	.word	0x2003e5e8
   b4050:	2003e5e8 	.word	0x2003e5e8
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 f96b 	bl	b7338 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b8848 	.word	0x000b8848
   b407c:	000b886c 	.word	0x000b886c

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b858 	b.w	b4134 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f879 	bl	b417c <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 b90b 	b.w	b72a8 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f002 b8ed 	b.w	b6270 <malloc>

000b4096 <_Znaj>:
   b4096:	f002 b8eb 	b.w	b6270 <malloc>

000b409a <_ZdaPv>:
   b409a:	f002 b8f1 	b.w	b6280 <free>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f002 b8ef 	b.w	b6280 <free>
	...

000b40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f002 f834 	bl	b6118 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b5de9 	.word	0x000b5de9
   b40b8:	000b7948 	.word	0x000b7948

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_Z12displaySetupv>:
  displaySetup();
  display.display();
}

void displaySetup()
{
   b40cc:	b508      	push	{r3, lr}
  display.clearDisplay();
   b40ce:	4805      	ldr	r0, [pc, #20]	; (b40e4 <_Z12displaySetupv+0x18>)
   b40d0:	f000 fe34 	bl	b4d3c <_ZN16Adafruit_SSD130612clearDisplayEv>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b40d4:	4803      	ldr	r0, [pc, #12]	; (b40e4 <_Z12displaySetupv+0x18>)
   b40d6:	2300      	movs	r3, #0
   b40d8:	6103      	str	r3, [r0, #16]
  display.setCursor(0, 0);
  display.setTextSize(1);
}
   b40da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  display.setTextSize(1);
   b40de:	2101      	movs	r1, #1
   b40e0:	f000 bc73 	b.w	b49ca <_ZN12Adafruit_GFX11setTextSizeEh>
   b40e4:	2003e648 	.word	0x2003e648

000b40e8 <_Z8callbackPcPhj>:
{
   b40e8:	b598      	push	{r3, r4, r7, lr}
  char p[length + 1];
   b40ea:	f102 0308 	add.w	r3, r2, #8
   b40ee:	f023 0307 	bic.w	r3, r3, #7
{
   b40f2:	af00      	add	r7, sp, #0
  char p[length + 1];
   b40f4:	ebad 0d03 	sub.w	sp, sp, r3
{
   b40f8:	4614      	mov	r4, r2
  memcpy(p, payload, length);
   b40fa:	4668      	mov	r0, sp
   b40fc:	f003 fb5e 	bl	b77bc <memcpy>
  p[length] = NULL;
   b4100:	2300      	movs	r3, #0
   b4102:	f80d 3004 	strb.w	r3, [sp, r4]
  display.println(p);
   b4106:	4c0a      	ldr	r4, [pc, #40]	; (b4130 <_Z8callbackPcPhj+0x48>)
  displaySetup();
   b4108:	f7ff ffe0 	bl	b40cc <_Z12displaySetupv>
  display.println(p);
   b410c:	4669      	mov	r1, sp
   b410e:	4620      	mov	r0, r4
   b4110:	f002 fb09 	bl	b6726 <_ZN5Print7printlnEPKc>
  display.display();
   b4114:	4620      	mov	r0, r4
   b4116:	f001 f87f 	bl	b5218 <_ZN16Adafruit_SSD13067displayEv>
  delay(2000);
   b411a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b411e:	f002 f8df 	bl	b62e0 <delay>
  displaySetup();
   b4122:	f7ff ffd3 	bl	b40cc <_Z12displaySetupv>
  display.display();
   b4126:	4620      	mov	r0, r4
   b4128:	f001 f876 	bl	b5218 <_ZN16Adafruit_SSD13067displayEv>
}
   b412c:	46bd      	mov	sp, r7
   b412e:	bd98      	pop	{r3, r4, r7, pc}
   b4130:	2003e648 	.word	0x2003e648

000b4134 <setup>:

void setup()
{
   b4134:	b510      	push	{r4, lr}
  display.setup();
   b4136:	4c0f      	ldr	r4, [pc, #60]	; (b4174 <setup+0x40>)
   b4138:	4620      	mov	r0, r4
   b413a:	f001 fde3 	bl	b5d04 <_ZN16OledWingAdafruit5setupEv>
  displaySetup();
   b413e:	f7ff ffc5 	bl	b40cc <_Z12displaySetupv>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4142:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  display.setTextColor(WHITE);
  display.println("DISPLAY CONNECTED");
   b4146:	490c      	ldr	r1, [pc, #48]	; (b4178 <setup+0x44>)
   b4148:	6163      	str	r3, [r4, #20]
   b414a:	4620      	mov	r0, r4
   b414c:	f002 faeb 	bl	b6726 <_ZN5Print7printlnEPKc>
  display.display();
   b4150:	4620      	mov	r0, r4
   b4152:	f001 f861 	bl	b5218 <_ZN16Adafruit_SSD13067displayEv>
  delay(2000);
   b4156:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b415a:	f002 f8c1 	bl	b62e0 <delay>
  display.display();
   b415e:	4620      	mov	r0, r4
   b4160:	f001 f85a 	bl	b5218 <_ZN16Adafruit_SSD13067displayEv>
  displaySetup();
   b4164:	f7ff ffb2 	bl	b40cc <_Z12displaySetupv>
  display.display();
   b4168:	4620      	mov	r0, r4
}
   b416a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.display();
   b416e:	f001 b853 	b.w	b5218 <_ZN16Adafruit_SSD13067displayEv>
   b4172:	bf00      	nop
   b4174:	2003e648 	.word	0x2003e648
   b4178:	000b795d 	.word	0x000b795d

000b417c <loop>:

void loop()
{
   b417c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (client.isConnected())
   b417e:	4811      	ldr	r0, [pc, #68]	; (b41c4 <loop+0x48>)
   b4180:	f001 fa56 	bl	b5630 <_ZN4MQTT11isConnectedEv>
   b4184:	b160      	cbz	r0, b41a0 <loop+0x24>
  {
    client.subscribe("newnewtopic");
   b4186:	4910      	ldr	r1, [pc, #64]	; (b41c8 <loop+0x4c>)
   b4188:	480e      	ldr	r0, [pc, #56]	; (b41c4 <loop+0x48>)
   b418a:	f001 fd70 	bl	b5c6e <_ZN4MQTT9subscribeEPKc>
    display.loop(); 
   b418e:	480f      	ldr	r0, [pc, #60]	; (b41cc <loop+0x50>)
   b4190:	f001 fde1 	bl	b5d56 <_ZN16OledWingAdafruit4loopEv>
    client.loop();
   b4194:	480b      	ldr	r0, [pc, #44]	; (b41c4 <loop+0x48>)
  else
  {
    client.connect(System.deviceID());
    client.publish("newnewtopic", "Argon 2 Connected");
  }
   b4196:	b005      	add	sp, #20
   b4198:	f85d eb04 	ldr.w	lr, [sp], #4
    client.loop();
   b419c:	f001 bc1f 	b.w	b59de <_ZN4MQTT4loopEv>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b41a0:	4668      	mov	r0, sp
   b41a2:	f001 fff5 	bl	b6190 <spark_deviceID>
    client.connect(System.deviceID());
   b41a6:	9900      	ldr	r1, [sp, #0]
   b41a8:	4806      	ldr	r0, [pc, #24]	; (b41c4 <loop+0x48>)
   b41aa:	f001 fb31 	bl	b5810 <_ZN4MQTT7connectEPKc>
   b41ae:	4668      	mov	r0, sp
   b41b0:	f002 fbca 	bl	b6948 <_ZN6StringD1Ev>
    client.publish("newnewtopic", "Argon 2 Connected");
   b41b4:	4a06      	ldr	r2, [pc, #24]	; (b41d0 <loop+0x54>)
   b41b6:	4904      	ldr	r1, [pc, #16]	; (b41c8 <loop+0x4c>)
   b41b8:	4802      	ldr	r0, [pc, #8]	; (b41c4 <loop+0x48>)
   b41ba:	b005      	add	sp, #20
   b41bc:	f85d eb04 	ldr.w	lr, [sp], #4
    client.publish("newnewtopic", "Argon 2 Connected");
   b41c0:	f001 bbb1 	b.w	b5926 <_ZN4MQTT7publishEPKcS1_>
   b41c4:	2003e5e8 	.word	0x2003e5e8
   b41c8:	000b796f 	.word	0x000b796f
   b41cc:	2003e648 	.word	0x2003e648
   b41d0:	000b797b 	.word	0x000b797b

000b41d4 <_GLOBAL__sub_I_display>:
   b41d4:	b507      	push	{r0, r1, r2, lr}
SYSTEM_THREAD(ENABLED)
   b41d6:	2100      	movs	r1, #0
   b41d8:	2001      	movs	r0, #1
   b41da:	f001 ffbd 	bl	b6158 <system_thread_set_state>
OledWingAdafruit display;
   b41de:	2107      	movs	r1, #7
   b41e0:	4807      	ldr	r0, [pc, #28]	; (b4200 <_GLOBAL__sub_I_display+0x2c>)
   b41e2:	f001 fd61 	bl	b5ca8 <_ZN16OledWingAdafruitC1Ei>
MQTT client("lab.thewcl.com", 1883, callback);
   b41e6:	2300      	movs	r3, #0
   b41e8:	9300      	str	r3, [sp, #0]
   b41ea:	4906      	ldr	r1, [pc, #24]	; (b4204 <_GLOBAL__sub_I_display+0x30>)
   b41ec:	4b06      	ldr	r3, [pc, #24]	; (b4208 <_GLOBAL__sub_I_display+0x34>)
   b41ee:	4807      	ldr	r0, [pc, #28]	; (b420c <_GLOBAL__sub_I_display+0x38>)
   b41f0:	f240 725b 	movw	r2, #1883	; 0x75b
   b41f4:	f001 f940 	bl	b5478 <_ZN4MQTTC1EPKctPFvPcPhjEb>
   b41f8:	b003      	add	sp, #12
   b41fa:	f85d fb04 	ldr.w	pc, [sp], #4
   b41fe:	bf00      	nop
   b4200:	2003e648 	.word	0x2003e648
   b4204:	000b798d 	.word	0x000b798d
   b4208:	000b40e9 	.word	0x000b40e9
   b420c:	2003e5e8 	.word	0x2003e5e8

000b4210 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4214:	b085      	sub	sp, #20
   b4216:	461f      	mov	r7, r3
   b4218:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b421c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4220:	eba8 0902 	sub.w	r9, r8, r2
   b4224:	eba7 0a01 	sub.w	sl, r7, r1
   b4228:	f1b9 0f00 	cmp.w	r9, #0
   b422c:	bfb8      	it	lt
   b422e:	f1c9 0900 	rsblt	r9, r9, #0
   b4232:	f1ba 0f00 	cmp.w	sl, #0
   b4236:	bfb8      	it	lt
   b4238:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b423c:	45d1      	cmp	r9, sl
        uint16_t color) {
   b423e:	4683      	mov	fp, r0
   b4240:	460c      	mov	r4, r1
   b4242:	4615      	mov	r5, r2
    if (steep) {
   b4244:	dd04      	ble.n	b4250 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b4246:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b4248:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b424a:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b424c:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b424e:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b4250:	42bc      	cmp	r4, r7
   b4252:	dd05      	ble.n	b4260 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b4254:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b4256:	4645      	mov	r5, r8
   b4258:	4690      	mov	r8, r2
    if (x0 > x1) {
   b425a:	4622      	mov	r2, r4
   b425c:	463c      	mov	r4, r7
   b425e:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b4260:	1b3e      	subs	r6, r7, r4
   b4262:	b2b2      	uxth	r2, r6
   b4264:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b4266:	eba8 0205 	sub.w	r2, r8, r5
   b426a:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b426e:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b4272:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b4276:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b427a:	4545      	cmp	r5, r8
   b427c:	bfb4      	ite	lt
   b427e:	2201      	movlt	r2, #1
   b4280:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b4284:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b4286:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b4288:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b428a:	42bc      	cmp	r4, r7
   b428c:	dc1c      	bgt.n	b42c8 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b428e:	f8db 2000 	ldr.w	r2, [fp]
   b4292:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4294:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b4296:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b429a:	bfc7      	ittee	gt
   b429c:	4629      	movgt	r1, r5
   b429e:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b42a0:	462a      	movle	r2, r5
   b42a2:	4621      	movle	r1, r4
   b42a4:	4658      	mov	r0, fp
   b42a6:	47c0      	blx	r8
        }
        err -= dy;
   b42a8:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b42aa:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b42ac:	1ab6      	subs	r6, r6, r2
   b42ae:	b2b1      	uxth	r1, r6
   b42b0:	b236      	sxth	r6, r6
        if (err < 0) {
   b42b2:	2e00      	cmp	r6, #0
   b42b4:	da05      	bge.n	b42c2 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b42b6:	9a02      	ldr	r2, [sp, #8]
   b42b8:	4415      	add	r5, r2
            err += dx;
   b42ba:	9a00      	ldr	r2, [sp, #0]
   b42bc:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b42be:	b22d      	sxth	r5, r5
            err += dx;
   b42c0:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b42c2:	3401      	adds	r4, #1
   b42c4:	b224      	sxth	r4, r4
   b42c6:	e7e0      	b.n	b428a <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b42c8:	b005      	add	sp, #20
   b42ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b42ce <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b42ce:	4770      	bx	lr

000b42d0 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b42d0:	b410      	push	{r4}
    drawPixel(x, y, color);
   b42d2:	6804      	ldr	r4, [r0, #0]
   b42d4:	6924      	ldr	r4, [r4, #16]
   b42d6:	46a4      	mov	ip, r4
}
   b42d8:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b42dc:	4760      	bx	ip

000b42de <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b42de:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b42e0:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b42e2:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b42e6:	9502      	str	r5, [sp, #8]
   b42e8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b42ea:	46a4      	mov	ip, r4
}
   b42ec:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b42ee:	4760      	bx	ip

000b42f0 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b42f0:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b42f2:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b42f4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b42f8:	9502      	str	r5, [sp, #8]
   b42fa:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b42fc:	46a4      	mov	ip, r4
}
   b42fe:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b4300:	4760      	bx	ip

000b4302 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4302:	b470      	push	{r4, r5, r6}
   b4304:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b4308:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b430c:	6804      	ldr	r4, [r0, #0]
   b430e:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b4312:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b4314:	46a4      	mov	ip, r4
}
   b4316:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b4318:	4760      	bx	ip

000b431a <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b431a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b431e:	461c      	mov	r4, r3
    startWrite();
   b4320:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b4322:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4326:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b4328:	4605      	mov	r5, r0
   b432a:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b432c:	3c01      	subs	r4, #1
   b432e:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b4330:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b4332:	b224      	sxth	r4, r4
    startWrite();
   b4334:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b4336:	682b      	ldr	r3, [r5, #0]
   b4338:	f8cd 8004 	str.w	r8, [sp, #4]
   b433c:	9400      	str	r4, [sp, #0]
   b433e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b4340:	4628      	mov	r0, r5
   b4342:	463b      	mov	r3, r7
   b4344:	4632      	mov	r2, r6
   b4346:	4639      	mov	r1, r7
   b4348:	47a0      	blx	r4
    endWrite();
   b434a:	682b      	ldr	r3, [r5, #0]
   b434c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b434e:	4628      	mov	r0, r5
}
   b4350:	b002      	add	sp, #8
   b4352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4356:	4718      	bx	r3

000b4358 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4358:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b435c:	461d      	mov	r5, r3
    startWrite();
   b435e:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b4360:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4364:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b4366:	4604      	mov	r4, r0
   b4368:	4617      	mov	r7, r2
   b436a:	460e      	mov	r6, r1
    startWrite();
   b436c:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b436e:	e9cd 7800 	strd	r7, r8, [sp]
   b4372:	6822      	ldr	r2, [r4, #0]
   b4374:	1e6b      	subs	r3, r5, #1
   b4376:	4433      	add	r3, r6
   b4378:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b437a:	4620      	mov	r0, r4
   b437c:	b21b      	sxth	r3, r3
   b437e:	463a      	mov	r2, r7
   b4380:	4631      	mov	r1, r6
   b4382:	47a8      	blx	r5
    endWrite();
   b4384:	6823      	ldr	r3, [r4, #0]
   b4386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4388:	4620      	mov	r0, r4
}
   b438a:	b002      	add	sp, #8
   b438c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4390:	4718      	bx	r3

000b4392 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4392:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4396:	461e      	mov	r6, r3
    startWrite();
   b4398:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b439a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b439e:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b43a0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b43a4:	460c      	mov	r4, r1
   b43a6:	4605      	mov	r5, r0
   b43a8:	4617      	mov	r7, r2
    startWrite();
   b43aa:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b43ac:	4426      	add	r6, r4
   b43ae:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b43b0:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b43b2:	da0b      	bge.n	b43cc <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b43b4:	f8cd 8000 	str.w	r8, [sp]
   b43b8:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b43bc:	4621      	mov	r1, r4
   b43be:	464b      	mov	r3, r9
   b43c0:	463a      	mov	r2, r7
   b43c2:	4628      	mov	r0, r5
   b43c4:	3401      	adds	r4, #1
   b43c6:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b43c8:	b224      	sxth	r4, r4
   b43ca:	e7f0      	b.n	b43ae <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b43cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b43ce:	4628      	mov	r0, r5
}
   b43d0:	b002      	add	sp, #8
   b43d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b43d6:	4718      	bx	r3

000b43d8 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b43d8:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b43da:	6802      	ldr	r2, [r0, #0]
   b43dc:	9101      	str	r1, [sp, #4]
   b43de:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b43e2:	9100      	str	r1, [sp, #0]
   b43e4:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b43e6:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b43ea:	2200      	movs	r2, #0
   b43ec:	4611      	mov	r1, r2
   b43ee:	47a0      	blx	r4
}
   b43f0:	b002      	add	sp, #8
   b43f2:	bd10      	pop	{r4, pc}

000b43f4 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b43f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b43f8:	4299      	cmp	r1, r3
        uint16_t color) {
   b43fa:	4616      	mov	r6, r2
   b43fc:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b4400:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4404:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b4406:	4680      	mov	r8, r0
   b4408:	460d      	mov	r5, r1
   b440a:	461c      	mov	r4, r3
    if(x0 == x1){
   b440c:	d113      	bne.n	b4436 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b440e:	42be      	cmp	r6, r7
   b4410:	bfc8      	it	gt
   b4412:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4414:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4418:	bfc4      	itt	gt
   b441a:	463e      	movgt	r6, r7
   b441c:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b441e:	1c7b      	adds	r3, r7, #1
   b4420:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b4422:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4424:	b21b      	sxth	r3, r3
   b4426:	4632      	mov	r2, r6
   b4428:	4629      	mov	r1, r5
   b442a:	4640      	mov	r0, r8
   b442c:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b442e:	b003      	add	sp, #12
   b4430:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4434:	4760      	bx	ip
    } else if(y0 == y1){
   b4436:	42be      	cmp	r6, r7
   b4438:	d10a      	bne.n	b4450 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b443a:	4299      	cmp	r1, r3
   b443c:	bfc2      	ittt	gt
   b443e:	460b      	movgt	r3, r1
   b4440:	4625      	movgt	r5, r4
   b4442:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4444:	1c63      	adds	r3, r4, #1
   b4446:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b444a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b444c:	1b5b      	subs	r3, r3, r5
   b444e:	e7e9      	b.n	b4424 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b4450:	6953      	ldr	r3, [r2, #20]
   b4452:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b4454:	e9cd 7900 	strd	r7, r9, [sp]
   b4458:	f8d8 3000 	ldr.w	r3, [r8]
   b445c:	4640      	mov	r0, r8
   b445e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b4460:	4632      	mov	r2, r6
   b4462:	4623      	mov	r3, r4
   b4464:	4629      	mov	r1, r5
   b4466:	47b8      	blx	r7
        endWrite();
   b4468:	f8d8 3000 	ldr.w	r3, [r8]
   b446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b446e:	4640      	mov	r0, r8
}
   b4470:	b003      	add	sp, #12
   b4472:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b4476:	4718      	bx	r3

000b4478 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4478:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b447c:	461d      	mov	r5, r3
    startWrite();
   b447e:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4480:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b4484:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4486:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b448a:	4604      	mov	r4, r0
   b448c:	460f      	mov	r7, r1
   b448e:	4616      	mov	r6, r2
    startWrite();
   b4490:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b4492:	6823      	ldr	r3, [r4, #0]
   b4494:	f8cd 8000 	str.w	r8, [sp]
   b4498:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b449c:	4632      	mov	r2, r6
   b449e:	462b      	mov	r3, r5
   b44a0:	4639      	mov	r1, r7
   b44a2:	4620      	mov	r0, r4
   b44a4:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b44a6:	6823      	ldr	r3, [r4, #0]
   b44a8:	f8cd 8000 	str.w	r8, [sp]
   b44ac:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b44b0:	4432      	add	r2, r6
   b44b2:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b44b6:	4639      	mov	r1, r7
   b44b8:	462b      	mov	r3, r5
   b44ba:	4620      	mov	r0, r4
   b44bc:	b212      	sxth	r2, r2
   b44be:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b44c0:	6823      	ldr	r3, [r4, #0]
   b44c2:	f8cd 8000 	str.w	r8, [sp]
   b44c6:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b44ca:	4632      	mov	r2, r6
   b44cc:	464b      	mov	r3, r9
   b44ce:	4639      	mov	r1, r7
   b44d0:	4620      	mov	r0, r4
   b44d2:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b44d4:	1e6b      	subs	r3, r5, #1
   b44d6:	19d9      	adds	r1, r3, r7
   b44d8:	6823      	ldr	r3, [r4, #0]
   b44da:	f8cd 8000 	str.w	r8, [sp]
   b44de:	6a1d      	ldr	r5, [r3, #32]
   b44e0:	4620      	mov	r0, r4
   b44e2:	464b      	mov	r3, r9
   b44e4:	4632      	mov	r2, r6
   b44e6:	b209      	sxth	r1, r1
   b44e8:	47a8      	blx	r5
    endWrite();
   b44ea:	6823      	ldr	r3, [r4, #0]
   b44ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b44ee:	4620      	mov	r0, r4
}
   b44f0:	b002      	add	sp, #8
   b44f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b44f6:	4718      	bx	r3

000b44f8 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b44f8:	4770      	bx	lr

000b44fa <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b44fa:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b44fe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b4502:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b4504:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b4506:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b450a:	bf59      	ittee	pl
   b450c:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b450e:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b4510:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b4512:	81c3      	strhmi	r3, [r0, #14]
}
   b4514:	4770      	bx	lr
	...

000b4518 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4518:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b451a:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b451c:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b451e:	4a07      	ldr	r2, [pc, #28]	; (b453c <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b4520:	4d07      	ldr	r5, [pc, #28]	; (b4540 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b4522:	8101      	strh	r1, [r0, #8]
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b4524:	2400      	movs	r4, #0
    _width    = WIDTH;
   b4526:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b4528:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b452c:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b4530:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b4532:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b4534:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b4536:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b4538:	6204      	str	r4, [r0, #32]
}
   b453a:	bd30      	pop	{r4, r5, pc}
   b453c:	01000101 	.word	0x01000101
   b4540:	000b7ea4 	.word	0x000b7ea4

000b4544 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4548:	b089      	sub	sp, #36	; 0x24
   b454a:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b454e:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4550:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b4554:	9304      	str	r3, [sp, #16]
   b4556:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b455a:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b455c:	9305      	str	r3, [sp, #20]
   b455e:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b4562:	4604      	mov	r4, r0
    startWrite();
   b4564:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b4566:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b456a:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b456e:	bf48      	it	mi
   b4570:	f108 020e 	addmi.w	r2, r8, #14
   b4574:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b4578:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b457a:	4635      	mov	r5, r6
   b457c:	9b03      	ldr	r3, [sp, #12]
   b457e:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b4580:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b4584:	189a      	adds	r2, r3, r2
   b4586:	9b05      	ldr	r3, [sp, #20]
   b4588:	428b      	cmp	r3, r1
   b458a:	b212      	sxth	r2, r2
   b458c:	dd27      	ble.n	b45de <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b458e:	9b04      	ldr	r3, [sp, #16]
   b4590:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b4592:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4596:	9306      	str	r3, [sp, #24]
   b4598:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b459c:	4580      	cmp	r8, r0
   b459e:	fa1f f189 	uxth.w	r1, r9
   b45a2:	dd17      	ble.n	b45d4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b45a4:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b45a6:	bf05      	ittet	eq
   b45a8:	9b06      	ldreq	r3, [sp, #24]
   b45aa:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b45ac:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b45ae:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b45b0:	bf18      	it	ne
   b45b2:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b45b4:	062b      	lsls	r3, r5, #24
   b45b6:	d50a      	bpl.n	b45ce <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b45b8:	9b02      	ldr	r3, [sp, #8]
   b45ba:	6820      	ldr	r0, [r4, #0]
   b45bc:	9207      	str	r2, [sp, #28]
   b45be:	4419      	add	r1, r3
   b45c0:	6983      	ldr	r3, [r0, #24]
   b45c2:	b209      	sxth	r1, r1
   b45c4:	461f      	mov	r7, r3
   b45c6:	4620      	mov	r0, r4
   b45c8:	4653      	mov	r3, sl
   b45ca:	47b8      	blx	r7
   b45cc:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b45ce:	f109 0901 	add.w	r9, r9, #1
   b45d2:	e7e1      	b.n	b4598 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b45d4:	9b01      	ldr	r3, [sp, #4]
   b45d6:	3301      	adds	r3, #1
   b45d8:	9301      	str	r3, [sp, #4]
   b45da:	445e      	add	r6, fp
   b45dc:	e7ce      	b.n	b457c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b45de:	6823      	ldr	r3, [r4, #0]
   b45e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b45e2:	4620      	mov	r0, r4
}
   b45e4:	b009      	add	sp, #36	; 0x24
   b45e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b45ea:	4718      	bx	r3

000b45ec <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b45ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b45f0:	ed2d 8b02 	vpush	{d8}
   b45f4:	b091      	sub	sp, #68	; 0x44
   b45f6:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b45f8:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b45fa:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b45fe:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b4602:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b4606:	9103      	str	r1, [sp, #12]
   b4608:	461f      	mov	r7, r3
   b460a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b460e:	9304      	str	r3, [sp, #16]
   b4610:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b4612:	2a00      	cmp	r2, #0
   b4614:	f040 80c5 	bne.w	b47a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b4618:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b461c:	428b      	cmp	r3, r1
   b461e:	f340 814c 	ble.w	b48ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b4622:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b4626:	42b3      	cmp	r3, r6
   b4628:	f340 8147 	ble.w	b48ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b462c:	2306      	movs	r3, #6
   b462e:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b4632:	2b00      	cmp	r3, #0
   b4634:	f340 8141 	ble.w	b48ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b4638:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b463c:	2b00      	cmp	r3, #0
   b463e:	f340 813c 	ble.w	b48ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b4642:	7f03      	ldrb	r3, [r0, #28]
   b4644:	b91b      	cbnz	r3, b464e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b4646:	2faf      	cmp	r7, #175	; 0xaf
   b4648:	bf84      	itt	hi
   b464a:	3701      	addhi	r7, #1
   b464c:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b464e:	f8db 3000 	ldr.w	r3, [fp]
   b4652:	4658      	mov	r0, fp
   b4654:	695b      	ldr	r3, [r3, #20]
   b4656:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4658:	2205      	movs	r2, #5
   b465a:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b465c:	2200      	movs	r2, #0
   b465e:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4660:	4a98      	ldr	r2, [pc, #608]	; (b48c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b4662:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b4666:	18d3      	adds	r3, r2, r3
   b4668:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b466a:	b2b3      	uxth	r3, r6
   b466c:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b466e:	9a05      	ldr	r2, [sp, #20]
   b4670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4672:	5c9b      	ldrb	r3, [r3, r2]
   b4674:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4676:	b2ab      	uxth	r3, r5
   b4678:	930b      	str	r3, [sp, #44]	; 0x2c
   b467a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b467e:	9308      	str	r3, [sp, #32]
   b4680:	9b03      	ldr	r3, [sp, #12]
   b4682:	fb02 f905 	mul.w	r9, r2, r5
   b4686:	fa19 f983 	uxtah	r9, r9, r3
   b468a:	fa0f f389 	sxth.w	r3, r9
   b468e:	ee08 3a10 	vmov	s16, r3
   b4692:	2308      	movs	r3, #8
   b4694:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b4696:	9b03      	ldr	r3, [sp, #12]
   b4698:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b469c:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b46a0:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b46a4:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b46a6:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b46aa:	07d2      	lsls	r2, r2, #31
   b46ac:	d552      	bpl.n	b4754 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b46ae:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b46b0:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b46b4:	d13e      	bne.n	b4734 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b46b6:	2c01      	cmp	r4, #1
   b46b8:	d13c      	bne.n	b4734 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b46ba:	699b      	ldr	r3, [r3, #24]
   b46bc:	9906      	ldr	r1, [sp, #24]
   b46be:	461f      	mov	r7, r3
   b46c0:	9b04      	ldr	r3, [sp, #16]
   b46c2:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b46c4:	b212      	sxth	r2, r2
   b46c6:	4651      	mov	r1, sl
   b46c8:	4658      	mov	r0, fp
   b46ca:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b46cc:	f109 0301 	add.w	r3, r9, #1
   b46d0:	fa4f f983 	sxtb.w	r9, r3
   b46d4:	9b07      	ldr	r3, [sp, #28]
   b46d6:	085b      	lsrs	r3, r3, #1
   b46d8:	9307      	str	r3, [sp, #28]
   b46da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b46dc:	3b01      	subs	r3, #1
   b46de:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b46e2:	930a      	str	r3, [sp, #40]	; 0x28
   b46e4:	d1de      	bne.n	b46a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b46e6:	9f05      	ldr	r7, [sp, #20]
   b46e8:	3701      	adds	r7, #1
   b46ea:	b27b      	sxtb	r3, r7
   b46ec:	9305      	str	r3, [sp, #20]
   b46ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b46f0:	3b01      	subs	r3, #1
   b46f2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b46f6:	9309      	str	r3, [sp, #36]	; 0x24
   b46f8:	d1b9      	bne.n	b466e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b46fa:	9b04      	ldr	r3, [sp, #16]
   b46fc:	4543      	cmp	r3, r8
   b46fe:	d00f      	beq.n	b4720 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b4700:	2d01      	cmp	r5, #1
   b4702:	f8db 3000 	ldr.w	r3, [fp]
   b4706:	d13b      	bne.n	b4780 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b4708:	2c01      	cmp	r4, #1
   b470a:	d139      	bne.n	b4780 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b470c:	9908      	ldr	r1, [sp, #32]
   b470e:	f8cd 8000 	str.w	r8, [sp]
   b4712:	3105      	adds	r1, #5
   b4714:	6a1c      	ldr	r4, [r3, #32]
   b4716:	4632      	mov	r2, r6
   b4718:	2308      	movs	r3, #8
   b471a:	b209      	sxth	r1, r1
   b471c:	4658      	mov	r0, fp
   b471e:	47a0      	blx	r4
        endWrite();
   b4720:	f8db 3000 	ldr.w	r3, [fp]
   b4724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4726:	4658      	mov	r0, fp
}
   b4728:	b011      	add	sp, #68	; 0x44
   b472a:	ecbd 8b02 	vpop	{d8}
   b472e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b4732:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b4734:	9906      	ldr	r1, [sp, #24]
   b4736:	fb14 f202 	smulbb	r2, r4, r2
   b473a:	440a      	add	r2, r1
   b473c:	9904      	ldr	r1, [sp, #16]
   b473e:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4740:	9400      	str	r4, [sp, #0]
   b4742:	69db      	ldr	r3, [r3, #28]
   b4744:	ee18 1a10 	vmov	r1, s16
   b4748:	461f      	mov	r7, r3
   b474a:	b212      	sxth	r2, r2
   b474c:	462b      	mov	r3, r5
   b474e:	4658      	mov	r0, fp
   b4750:	47b8      	blx	r7
   b4752:	e7bb      	b.n	b46cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b4754:	9a04      	ldr	r2, [sp, #16]
   b4756:	4542      	cmp	r2, r8
   b4758:	d0b8      	beq.n	b46cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b475a:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b475c:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4760:	d107      	bne.n	b4772 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b4762:	2c01      	cmp	r4, #1
   b4764:	d105      	bne.n	b4772 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b4766:	699b      	ldr	r3, [r3, #24]
   b4768:	9906      	ldr	r1, [sp, #24]
   b476a:	461f      	mov	r7, r3
   b476c:	440a      	add	r2, r1
   b476e:	4643      	mov	r3, r8
   b4770:	e7a8      	b.n	b46c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4772:	9906      	ldr	r1, [sp, #24]
   b4774:	f8cd 8004 	str.w	r8, [sp, #4]
   b4778:	fb14 f202 	smulbb	r2, r4, r2
   b477c:	440a      	add	r2, r1
   b477e:	e7df      	b.n	b4740 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b4780:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4782:	f8cd 8004 	str.w	r8, [sp, #4]
   b4786:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b478a:	9a08      	ldr	r2, [sp, #32]
   b478c:	00e4      	lsls	r4, r4, #3
   b478e:	440a      	add	r2, r1
   b4790:	4611      	mov	r1, r2
   b4792:	9400      	str	r4, [sp, #0]
   b4794:	69dc      	ldr	r4, [r3, #28]
   b4796:	4632      	mov	r2, r6
   b4798:	462b      	mov	r3, r5
   b479a:	b209      	sxth	r1, r1
   b479c:	4658      	mov	r0, fp
   b479e:	47a0      	blx	r4
        endWrite();
   b47a0:	e7be      	b.n	b4720 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b47a2:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b47a4:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b47a6:	6812      	ldr	r2, [r2, #0]
   b47a8:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b47aa:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b47ac:	b2ff      	uxtb	r7, r7
   b47ae:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b47b2:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b47b6:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b47b8:	789a      	ldrb	r2, [r3, #2]
   b47ba:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b47bc:	78da      	ldrb	r2, [r3, #3]
   b47be:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b47c0:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b47c2:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b47c6:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b47ca:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b47cc:	d801      	bhi.n	b47d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b47ce:	2c01      	cmp	r4, #1
   b47d0:	d957      	bls.n	b4882 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b47d2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b47d6:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b47d8:	fa0f f38a 	sxth.w	r3, sl
   b47dc:	9307      	str	r3, [sp, #28]
        startWrite();
   b47de:	f8db 3000 	ldr.w	r3, [fp]
   b47e2:	4658      	mov	r0, fp
   b47e4:	695b      	ldr	r3, [r3, #20]
   b47e6:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b47e8:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b47ea:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b47ee:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b47f0:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b47f4:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b47f6:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b47f8:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b47fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b47fc:	429f      	cmp	r7, r3
   b47fe:	d28f      	bcs.n	b4720 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4800:	9b07      	ldr	r3, [sp, #28]
   b4802:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b4804:	443b      	add	r3, r7
   b4806:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b480a:	2200      	movs	r2, #0
   b480c:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b480e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4810:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4812:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4816:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b481a:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b481e:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b4820:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b4822:	9905      	ldr	r1, [sp, #20]
   b4824:	4291      	cmp	r1, r2
   b4826:	d241      	bcs.n	b48ac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b4828:	1c5a      	adds	r2, r3, #1
   b482a:	b2d2      	uxtb	r2, r2
   b482c:	075b      	lsls	r3, r3, #29
   b482e:	920d      	str	r2, [sp, #52]	; 0x34
   b4830:	d107      	bne.n	b4842 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b4832:	9b06      	ldr	r3, [sp, #24]
   b4834:	9906      	ldr	r1, [sp, #24]
   b4836:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4838:	3301      	adds	r3, #1
   b483a:	b29b      	uxth	r3, r3
   b483c:	f812 9001 	ldrb.w	r9, [r2, r1]
   b4840:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b4842:	f019 0f80 	tst.w	r9, #128	; 0x80
   b4846:	d012      	beq.n	b486e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b4848:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b484a:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b484e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b4852:	d11a      	bne.n	b488a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b4854:	2c01      	cmp	r4, #1
   b4856:	d118      	bne.n	b488a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b485a:	699b      	ldr	r3, [r3, #24]
   b485c:	4411      	add	r1, r2
   b485e:	9a05      	ldr	r2, [sp, #20]
   b4860:	4411      	add	r1, r2
   b4862:	461e      	mov	r6, r3
   b4864:	4652      	mov	r2, sl
   b4866:	9b04      	ldr	r3, [sp, #16]
   b4868:	b209      	sxth	r1, r1
   b486a:	4658      	mov	r0, fp
   b486c:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b486e:	9e05      	ldr	r6, [sp, #20]
   b4870:	3601      	adds	r6, #1
   b4872:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b4874:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b4878:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b487a:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b487e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b4880:	e7ce      	b.n	b4820 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b4882:	2300      	movs	r3, #0
   b4884:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b4888:	e7a9      	b.n	b47de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b488a:	9805      	ldr	r0, [sp, #20]
   b488c:	9a08      	ldr	r2, [sp, #32]
   b488e:	4402      	add	r2, r0
   b4890:	fb02 1105 	mla	r1, r2, r5, r1
   b4894:	9a04      	ldr	r2, [sp, #16]
   b4896:	e9cd 4200 	strd	r4, r2, [sp]
   b489a:	69db      	ldr	r3, [r3, #28]
   b489c:	ee18 2a10 	vmov	r2, s16
   b48a0:	461e      	mov	r6, r3
   b48a2:	b209      	sxth	r1, r1
   b48a4:	462b      	mov	r3, r5
   b48a6:	4658      	mov	r0, fp
   b48a8:	47b0      	blx	r6
   b48aa:	e7e0      	b.n	b486e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b48ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b48ae:	3701      	adds	r7, #1
   b48b0:	4498      	add	r8, r3
   b48b2:	fa5f f888 	uxtb.w	r8, r8
   b48b6:	b2ff      	uxtb	r7, r7
   b48b8:	e79f      	b.n	b47fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b48ba:	b011      	add	sp, #68	; 0x44
   b48bc:	ecbd 8b02 	vpop	{d8}
   b48c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b48c4:	000b799c 	.word	0x000b799c

000b48c8 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b48c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b48ca:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b48cc:	b085      	sub	sp, #20
   b48ce:	4604      	mov	r4, r0
   b48d0:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b48d2:	2a00      	cmp	r2, #0
   b48d4:	d134      	bne.n	b4940 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b48d6:	290a      	cmp	r1, #10
   b48d8:	d108      	bne.n	b48ec <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b48da:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b48dc:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b48de:	7e42      	ldrb	r2, [r0, #25]
   b48e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b48e4:	8263      	strh	r3, [r4, #18]
}
   b48e6:	2001      	movs	r0, #1
   b48e8:	b005      	add	sp, #20
   b48ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b48ec:	290d      	cmp	r1, #13
   b48ee:	d0fa      	beq.n	b48e6 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b48f0:	7ee1      	ldrb	r1, [r4, #27]
   b48f2:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b48f4:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b48f6:	b171      	cbz	r1, b4916 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b48f8:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b48fc:	2106      	movs	r1, #6
   b48fe:	fb11 6100 	smlabb	r1, r1, r0, r6
   b4902:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b4906:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b4908:	bfc1      	itttt	gt
   b490a:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b490e:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b4910:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b4914:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4916:	8ae2      	ldrh	r2, [r4, #22]
   b4918:	9201      	str	r2, [sp, #4]
   b491a:	8aa2      	ldrh	r2, [r4, #20]
   b491c:	9200      	str	r2, [sp, #0]
   b491e:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b4922:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4926:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b492a:	4620      	mov	r0, r4
   b492c:	f7ff fe5e 	bl	b45ec <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b4930:	7e23      	ldrb	r3, [r4, #24]
   b4932:	8a22      	ldrh	r2, [r4, #16]
   b4934:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b4938:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b493c:	8223      	strh	r3, [r4, #16]
   b493e:	e7d2      	b.n	b48e6 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b4940:	290a      	cmp	r1, #10
   b4942:	d107      	bne.n	b4954 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b4944:	2300      	movs	r3, #0
   b4946:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b4948:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b494a:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b494c:	8a43      	ldrh	r3, [r0, #18]
   b494e:	fb01 3302 	mla	r3, r1, r2, r3
   b4952:	e7c7      	b.n	b48e4 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b4954:	290d      	cmp	r1, #13
   b4956:	d0c6      	beq.n	b48e6 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b4958:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b495a:	42a9      	cmp	r1, r5
   b495c:	d3c3      	bcc.n	b48e6 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b495e:	7a51      	ldrb	r1, [r2, #9]
   b4960:	4299      	cmp	r1, r3
   b4962:	d3c0      	bcc.n	b48e6 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b4964:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b4966:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b4968:	b2ed      	uxtb	r5, r5
   b496a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b496e:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b4970:	b328      	cbz	r0, b49be <_ZN12Adafruit_GFX5writeEh+0xf6>
   b4972:	78e9      	ldrb	r1, [r5, #3]
   b4974:	b319      	cbz	r1, b49be <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4976:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4978:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b497a:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b497c:	b191      	cbz	r1, b49a4 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b497e:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b4982:	4408      	add	r0, r1
   b4984:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4988:	fb06 1100 	mla	r1, r6, r0, r1
   b498c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b4990:	4281      	cmp	r1, r0
   b4992:	dd07      	ble.n	b49a4 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b4994:	2000      	movs	r0, #0
   b4996:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4998:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b499c:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b499e:	fb02 1207 	mla	r2, r2, r7, r1
   b49a2:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b49a4:	8ae2      	ldrh	r2, [r4, #22]
   b49a6:	9201      	str	r2, [sp, #4]
   b49a8:	8aa2      	ldrh	r2, [r4, #20]
   b49aa:	9200      	str	r2, [sp, #0]
   b49ac:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b49b0:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b49b4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b49b8:	4620      	mov	r0, r4
   b49ba:	f7ff fe17 	bl	b45ec <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b49be:	7929      	ldrb	r1, [r5, #4]
   b49c0:	7e22      	ldrb	r2, [r4, #24]
   b49c2:	8a23      	ldrh	r3, [r4, #16]
   b49c4:	fb01 3302 	mla	r3, r1, r2, r3
   b49c8:	e7b8      	b.n	b493c <_ZN12Adafruit_GFX5writeEh+0x74>

000b49ca <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b49ca:	2901      	cmp	r1, #1
   b49cc:	bf38      	it	cc
   b49ce:	2101      	movcc	r1, #1
   b49d0:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b49d2:	7641      	strb	r1, [r0, #25]
}
   b49d4:	4770      	bx	lr

000b49d6 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b49d6:	4770      	bx	lr

000b49d8 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b49d8:	b510      	push	{r4, lr}
  }
   b49da:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b49dc:	4604      	mov	r4, r0
  }
   b49de:	f7ff fb5e 	bl	b409e <_ZdlPvj>
   b49e2:	4620      	mov	r0, r4
   b49e4:	bd10      	pop	{r4, pc}

000b49e6 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b49e6:	b40e      	push	{r1, r2, r3}
   b49e8:	b503      	push	{r0, r1, lr}
   b49ea:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b49ec:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b49ee:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b49f2:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b49f4:	f001 febf 	bl	b6776 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b49f8:	b002      	add	sp, #8
   b49fa:	f85d eb04 	ldr.w	lr, [sp], #4
   b49fe:	b003      	add	sp, #12
   b4a00:	4770      	bx	lr
	...

000b4a04 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4a04:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4a06:	4604      	mov	r4, r0
   b4a08:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4a0a:	7922      	ldrb	r2, [r4, #4]
   b4a0c:	68a3      	ldr	r3, [r4, #8]
   b4a0e:	b132      	cbz	r2, b4a1e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4a10:	b9a3      	cbnz	r3, b4a3c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4a12:	490b      	ldr	r1, [pc, #44]	; (b4a40 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4a14:	b002      	add	sp, #8
   b4a16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4a1a:	f001 be71 	b.w	b6700 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4a1e:	4a09      	ldr	r2, [pc, #36]	; (b4a44 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4a20:	7b26      	ldrb	r6, [r4, #12]
   b4a22:	4d09      	ldr	r5, [pc, #36]	; (b4a48 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4a24:	4909      	ldr	r1, [pc, #36]	; (b4a4c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4a26:	7b64      	ldrb	r4, [r4, #13]
   b4a28:	2e01      	cmp	r6, #1
   b4a2a:	bf18      	it	ne
   b4a2c:	4629      	movne	r1, r5
   b4a2e:	e9cd 1400 	strd	r1, r4, [sp]
   b4a32:	4907      	ldr	r1, [pc, #28]	; (b4a50 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4a34:	f7ff ffd7 	bl	b49e6 <_ZN5Print6printfEPKcz>
  }
   b4a38:	b002      	add	sp, #8
   b4a3a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4a3c:	4a05      	ldr	r2, [pc, #20]	; (b4a54 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4a3e:	e7ef      	b.n	b4a20 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4a40:	000b7f05 	.word	0x000b7f05
   b4a44:	000b7efc 	.word	0x000b7efc
   b4a48:	000b7f01 	.word	0x000b7f01
   b4a4c:	000b7efd 	.word	0x000b7efd
   b4a50:	000b7f1b 	.word	0x000b7f1b
   b4a54:	000b7ef4 	.word	0x000b7ef4

000b4a58 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4a58:	b510      	push	{r4, lr}
   b4a5a:	4b04      	ldr	r3, [pc, #16]	; (b4a6c <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b4a5c:	6003      	str	r3, [r0, #0]
   b4a5e:	4604      	mov	r4, r0
  if(buffer) {
   b4a60:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4a62:	b108      	cbz	r0, b4a68 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b4a64:	f001 fc0c 	bl	b6280 <free>
    buffer = NULL;
  }
}
   b4a68:	4620      	mov	r0, r4
   b4a6a:	bd10      	pop	{r4, pc}
   b4a6c:	000b83f4 	.word	0x000b83f4

000b4a70 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4a70:	b510      	push	{r4, lr}
   b4a72:	4604      	mov	r4, r0
}
   b4a74:	f7ff fff0 	bl	b4a58 <_ZN16Adafruit_SSD1306D1Ev>
   b4a78:	4620      	mov	r0, r4
   b4a7a:	2150      	movs	r1, #80	; 0x50
   b4a7c:	f7ff fb0f 	bl	b409e <_ZdlPvj>
   b4a80:	4620      	mov	r0, r4
   b4a82:	bd10      	pop	{r4, pc}

000b4a84 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4a84:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4a86:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4a88:	db4b      	blt.n	b4b22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4a8a:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b4a8e:	428c      	cmp	r4, r1
   b4a90:	dd47      	ble.n	b4b22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4a92:	2a00      	cmp	r2, #0
   b4a94:	db45      	blt.n	b4b22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4a96:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b4a9a:	4294      	cmp	r4, r2
   b4a9c:	dd41      	ble.n	b4b22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b4a9e:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b4aa0:	2c02      	cmp	r4, #2
   b4aa2:	d01f      	beq.n	b4ae4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b4aa4:	2c03      	cmp	r4, #3
   b4aa6:	d026      	beq.n	b4af6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b4aa8:	2c01      	cmp	r4, #1
   b4aaa:	d104      	bne.n	b4ab6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b4aac:	8904      	ldrh	r4, [r0, #8]
   b4aae:	43d2      	mvns	r2, r2
   b4ab0:	4414      	add	r4, r2
      break;
   b4ab2:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b4ab4:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b4ab6:	2b01      	cmp	r3, #1
   b4ab8:	d023      	beq.n	b4b02 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b4aba:	2b02      	cmp	r3, #2
   b4abc:	d032      	beq.n	b4b24 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b4abe:	bb83      	cbnz	r3, b4b22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b4ac0:	2a00      	cmp	r2, #0
   b4ac2:	4613      	mov	r3, r2
   b4ac4:	8904      	ldrh	r4, [r0, #8]
   b4ac6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4ac8:	bfb8      	it	lt
   b4aca:	1dd3      	addlt	r3, r2, #7
   b4acc:	10db      	asrs	r3, r3, #3
   b4ace:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4ad2:	f002 0207 	and.w	r2, r2, #7
   b4ad6:	2301      	movs	r3, #1
   b4ad8:	4093      	lsls	r3, r2
   b4ada:	5c42      	ldrb	r2, [r0, r1]
   b4adc:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4ae0:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b4ae2:	e01e      	b.n	b4b22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b4ae4:	8904      	ldrh	r4, [r0, #8]
   b4ae6:	3c01      	subs	r4, #1
   b4ae8:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b4aea:	8944      	ldrh	r4, [r0, #10]
   b4aec:	43d2      	mvns	r2, r2
   b4aee:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b4af0:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b4af2:	b212      	sxth	r2, r2
      break;
   b4af4:	e7df      	b.n	b4ab6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b4af6:	8944      	ldrh	r4, [r0, #10]
   b4af8:	3c01      	subs	r4, #1
   b4afa:	1a64      	subs	r4, r4, r1
      break;
   b4afc:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b4afe:	b222      	sxth	r2, r4
      break;
   b4b00:	e7d9      	b.n	b4ab6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b4b02:	2a00      	cmp	r2, #0
   b4b04:	8904      	ldrh	r4, [r0, #8]
   b4b06:	4613      	mov	r3, r2
   b4b08:	bfb8      	it	lt
   b4b0a:	1dd3      	addlt	r3, r2, #7
   b4b0c:	10db      	asrs	r3, r3, #3
   b4b0e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4b12:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b4b14:	f002 0007 	and.w	r0, r2, #7
   b4b18:	2201      	movs	r2, #1
   b4b1a:	4082      	lsls	r2, r0
   b4b1c:	5c58      	ldrb	r0, [r3, r1]
   b4b1e:	4302      	orrs	r2, r0
   b4b20:	545a      	strb	r2, [r3, r1]
}
   b4b22:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4b24:	2a00      	cmp	r2, #0
   b4b26:	4613      	mov	r3, r2
   b4b28:	8904      	ldrh	r4, [r0, #8]
   b4b2a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4b2c:	bfb8      	it	lt
   b4b2e:	1dd3      	addlt	r3, r2, #7
   b4b30:	10db      	asrs	r3, r3, #3
   b4b32:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4b36:	f002 0207 	and.w	r2, r2, #7
   b4b3a:	2301      	movs	r3, #1
   b4b3c:	fa03 f202 	lsl.w	r2, r3, r2
   b4b40:	5c43      	ldrb	r3, [r0, r1]
   b4b42:	405a      	eors	r2, r3
   b4b44:	e7cc      	b.n	b4ae0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b4b48 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b4b48:	b570      	push	{r4, r5, r6, lr}
   b4b4a:	4604      	mov	r4, r0
   b4b4c:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4b4e:	2600      	movs	r6, #0
   b4b50:	f7ff fce2 	bl	b4518 <_ZN12Adafruit_GFXC1Ess>
   b4b54:	4b11      	ldr	r3, [pc, #68]	; (b4b9c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b4b56:	6023      	str	r3, [r4, #0]
   b4b58:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b4b5a:	b915      	cbnz	r5, b4b62 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b4b5c:	f002 fcb0 	bl	b74c0 <_Z19__fetch_global_Wirev>
   b4b60:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4b62:	23ff      	movs	r3, #255	; 0xff
   b4b64:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b4b68:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b4b6c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b4b70:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b4b74:	4b0a      	ldr	r3, [pc, #40]	; (b4ba0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b4b76:	63a3      	str	r3, [r4, #56]	; 0x38
   b4b78:	2301      	movs	r3, #1
   b4b7a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b4b7e:	9b05      	ldr	r3, [sp, #20]
   b4b80:	64a3      	str	r3, [r4, #72]	; 0x48
   b4b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b4b86:	9b06      	ldr	r3, [sp, #24]
   b4b88:	86a2      	strh	r2, [r4, #52]	; 0x34
   b4b8a:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b4b8e:	6426      	str	r6, [r4, #64]	; 0x40
   b4b90:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b4b94:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b4b96:	4620      	mov	r0, r4
   b4b98:	bd70      	pop	{r4, r5, r6, pc}
   b4b9a:	bf00      	nop
   b4b9c:	000b83f4 	.word	0x000b83f4
   b4ba0:	000b7f40 	.word	0x000b7f40

000b4ba4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b4ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4ba6:	4604      	mov	r4, r0
  if(wire) { // I2C
   b4ba8:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b4baa:	460d      	mov	r5, r1
  if(wire) { // I2C
   b4bac:	b190      	cbz	r0, b4bd4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b4bae:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4bb2:	f001 fc2b 	bl	b640c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4bb6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4bb8:	6803      	ldr	r3, [r0, #0]
   b4bba:	2100      	movs	r1, #0
   b4bbc:	689b      	ldr	r3, [r3, #8]
   b4bbe:	4798      	blx	r3
    WIRE_WRITE(c);
   b4bc0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4bc2:	6803      	ldr	r3, [r0, #0]
   b4bc4:	4629      	mov	r1, r5
   b4bc6:	689b      	ldr	r3, [r3, #8]
   b4bc8:	4798      	blx	r3
    wire->endTransmission();
   b4bca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b4bcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b4bd0:	f001 bc23 	b.w	b641a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b4bd4:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b4bd8:	4601      	mov	r1, r0
   b4bda:	b298      	uxth	r0, r3
   b4bdc:	f002 fc2d 	bl	b743a <digitalWrite>
  if(spi) {
   b4be0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4be2:	b120      	cbz	r0, b4bee <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b4be4:	4629      	mov	r1, r5
}
   b4be6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b4bea:	f001 bea7 	b.w	b693c <_ZN8SPIClass8transferEh>
   b4bee:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4bf0:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4bf2:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4bf6:	ea05 0107 	and.w	r1, r5, r7
   b4bfa:	b280      	uxth	r0, r0
   b4bfc:	f002 fc1d 	bl	b743a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4c00:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4c04:	2101      	movs	r1, #1
   b4c06:	b280      	uxth	r0, r0
   b4c08:	f002 fc17 	bl	b743a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4c0c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4c10:	2100      	movs	r1, #0
   b4c12:	b280      	uxth	r0, r0
   b4c14:	f002 fc11 	bl	b743a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4c18:	3e01      	subs	r6, #1
   b4c1a:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b4c1e:	d1e8      	bne.n	b4bf2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b4c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4c22 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4c22:	b538      	push	{r3, r4, r5, lr}
   b4c24:	4604      	mov	r4, r0
  TRANSACTION_START
   b4c26:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4c28:	460d      	mov	r5, r1
  TRANSACTION_START
   b4c2a:	b180      	cbz	r0, b4c4e <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b4c2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4c2e:	f001 fbdf 	bl	b63f0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b4c32:	2d00      	cmp	r5, #0
   b4c34:	4620      	mov	r0, r4
   b4c36:	bf14      	ite	ne
   b4c38:	21a7      	movne	r1, #167	; 0xa7
   b4c3a:	21a6      	moveq	r1, #166	; 0xa6
   b4c3c:	f7ff ffb2 	bl	b4ba4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b4c40:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4c42:	b188      	cbz	r0, b4c68 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b4c44:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b4c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4c4a:	f001 bbd1 	b.w	b63f0 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b4c4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4c50:	b118      	cbz	r0, b4c5a <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b4c52:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b4c56:	f001 fe03 	bl	b6860 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b4c5a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4c5e:	2100      	movs	r1, #0
   b4c60:	b280      	uxth	r0, r0
   b4c62:	f002 fbea 	bl	b743a <digitalWrite>
   b4c66:	e7e4      	b.n	b4c32 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b4c68:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4c6c:	2101      	movs	r1, #1
   b4c6e:	b280      	uxth	r0, r0
   b4c70:	f002 fbe3 	bl	b743a <digitalWrite>
   b4c74:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4c76:	b118      	cbz	r0, b4c80 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b4c78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b4c7c:	f001 bdd6 	b.w	b682c <_ZN8SPIClass14endTransactionEv>
}
   b4c80:	bd38      	pop	{r3, r4, r5, pc}

000b4c82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b4c82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4c86:	4604      	mov	r4, r0
  if(wire) { // I2C
   b4c88:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b4c8a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b4c8c:	188f      	adds	r7, r1, r2
   b4c8e:	b340      	cbz	r0, b4ce2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b4c90:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4c94:	f001 fbba 	bl	b640c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4c98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4c9a:	6803      	ldr	r3, [r0, #0]
   b4c9c:	2100      	movs	r1, #0
   b4c9e:	689b      	ldr	r3, [r3, #8]
   b4ca0:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b4ca2:	2601      	movs	r6, #1
    while(n--) {
   b4ca4:	42af      	cmp	r7, r5
        wire->endTransmission();
   b4ca6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b4ca8:	d017      	beq.n	b4cda <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b4caa:	2e1f      	cmp	r6, #31
   b4cac:	d90c      	bls.n	b4cc8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b4cae:	f001 fbb4 	bl	b641a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b4cb2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4cb6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4cb8:	f001 fba8 	bl	b640c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4cbc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4cbe:	6803      	ldr	r3, [r0, #0]
   b4cc0:	2100      	movs	r1, #0
   b4cc2:	689b      	ldr	r3, [r3, #8]
   b4cc4:	4798      	blx	r3
        bytesOut = 1;
   b4cc6:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b4cc8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4cca:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4cce:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b4cd0:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b4cd2:	689b      	ldr	r3, [r3, #8]
   b4cd4:	4798      	blx	r3
      bytesOut++;
   b4cd6:	b2f6      	uxtb	r6, r6
    while(n--) {
   b4cd8:	e7e4      	b.n	b4ca4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b4cda:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b4cde:	f001 bb9c 	b.w	b641a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b4ce2:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b4ce6:	4601      	mov	r1, r0
   b4ce8:	b298      	uxth	r0, r3
   b4cea:	f002 fba6 	bl	b743a <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b4cee:	42bd      	cmp	r5, r7
   b4cf0:	d022      	beq.n	b4d38 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b4cf2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b4cf4:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b4cf8:	b118      	cbz	r0, b4d02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b4cfa:	4649      	mov	r1, r9
   b4cfc:	f001 fe1e 	bl	b693c <_ZN8SPIClass8transferEh>
   b4d00:	e7f5      	b.n	b4cee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b4d02:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4d04:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4d08:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4d0c:	ea09 0108 	and.w	r1, r9, r8
   b4d10:	b280      	uxth	r0, r0
   b4d12:	f002 fb92 	bl	b743a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4d16:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4d1a:	2101      	movs	r1, #1
   b4d1c:	b280      	uxth	r0, r0
   b4d1e:	f002 fb8c 	bl	b743a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4d22:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4d26:	2100      	movs	r1, #0
   b4d28:	b280      	uxth	r0, r0
   b4d2a:	f002 fb86 	bl	b743a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4d2e:	3e01      	subs	r6, #1
   b4d30:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b4d34:	d1e8      	bne.n	b4d08 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b4d36:	e7da      	b.n	b4cee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b4d38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b4d3c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b4d3c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b4d40:	1dda      	adds	r2, r3, #7
   b4d42:	bf48      	it	mi
   b4d44:	f103 020e 	addmi.w	r2, r3, #14
   b4d48:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4d4c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4d4e:	10d2      	asrs	r2, r2, #3
   b4d50:	435a      	muls	r2, r3
   b4d52:	2100      	movs	r1, #0
   b4d54:	f002 bd40 	b.w	b77d8 <memset>

000b4d58 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b4d58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4d5c:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4d5e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b4d60:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b4d64:	4604      	mov	r4, r0
   b4d66:	460f      	mov	r7, r1
   b4d68:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4d6a:	b1c3      	cbz	r3, b4d9e <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b4d6c:	4620      	mov	r0, r4
   b4d6e:	f7ff ffe5 	bl	b4d3c <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b4d72:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b4d76:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b4d7a:	2820      	cmp	r0, #32
   b4d7c:	dc21      	bgt.n	b4dc2 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b4d7e:	2320      	movs	r3, #32
   b4d80:	2201      	movs	r2, #1
   b4d82:	3820      	subs	r0, #32
   b4d84:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b4d88:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b4d8c:	2373      	movs	r3, #115	; 0x73
   b4d8e:	3973      	subs	r1, #115	; 0x73
   b4d90:	9300      	str	r3, [sp, #0]
   b4d92:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b4d96:	4b89      	ldr	r3, [pc, #548]	; (b4fbc <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b4d98:	f340 024f 	sbfx	r2, r0, #1, #16
   b4d9c:	e021      	b.n	b4de2 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4d9e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b4da2:	1dd8      	adds	r0, r3, #7
   b4da4:	bf48      	it	mi
   b4da6:	f103 000e 	addmi.w	r0, r3, #14
   b4daa:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b4dae:	10c0      	asrs	r0, r0, #3
   b4db0:	4358      	muls	r0, r3
   b4db2:	f001 fa5d 	bl	b6270 <malloc>
   b4db6:	62e0      	str	r0, [r4, #44]	; 0x2c
   b4db8:	2800      	cmp	r0, #0
   b4dba:	d1d7      	bne.n	b4d6c <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b4dbc:	b004      	add	sp, #16
   b4dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b4dc2:	3840      	subs	r0, #64	; 0x40
   b4dc4:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b4dc8:	fa02 f280 	sxtah	r2, r2, r0
   b4dcc:	2340      	movs	r3, #64	; 0x40
   b4dce:	2001      	movs	r0, #1
   b4dd0:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b4dd4:	2352      	movs	r3, #82	; 0x52
   b4dd6:	3952      	subs	r1, #82	; 0x52
   b4dd8:	9300      	str	r3, [sp, #0]
   b4dda:	4b79      	ldr	r3, [pc, #484]	; (b4fc0 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b4ddc:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b4de0:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b4de2:	4620      	mov	r0, r4
   b4de4:	f341 014f 	sbfx	r1, r1, #1, #16
   b4de8:	f7ff fbac 	bl	b4544 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b4dec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b4dee:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b4df2:	2800      	cmp	r0, #0
   b4df4:	d078      	beq.n	b4ee8 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b4df6:	2d00      	cmp	r5, #0
   b4df8:	d174      	bne.n	b4ee4 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b4dfa:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b4dfe:	2b20      	cmp	r3, #32
   b4e00:	bf0c      	ite	eq
   b4e02:	253c      	moveq	r5, #60	; 0x3c
   b4e04:	253d      	movne	r5, #61	; 0x3d
   b4e06:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b4e0a:	f1b8 0f00 	cmp.w	r8, #0
   b4e0e:	d001      	beq.n	b4e14 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b4e10:	f001 faf2 	bl	b63f8 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b4e14:	b1fe      	cbz	r6, b4e56 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b4e16:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4e1a:	2800      	cmp	r0, #0
   b4e1c:	db1b      	blt.n	b4e56 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b4e1e:	2101      	movs	r1, #1
   b4e20:	b280      	uxth	r0, r0
   b4e22:	f002 faf9 	bl	b7418 <pinMode>
    digitalWrite(rstPin, HIGH);
   b4e26:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4e2a:	2101      	movs	r1, #1
   b4e2c:	b280      	uxth	r0, r0
   b4e2e:	f002 fb04 	bl	b743a <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b4e32:	2001      	movs	r0, #1
   b4e34:	f001 fa54 	bl	b62e0 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b4e38:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4e3c:	2100      	movs	r1, #0
   b4e3e:	b280      	uxth	r0, r0
   b4e40:	f002 fafb 	bl	b743a <digitalWrite>
    delay(10);                  // Wait 10 ms
   b4e44:	200a      	movs	r0, #10
   b4e46:	f001 fa4b 	bl	b62e0 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b4e4a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4e4e:	2101      	movs	r1, #1
   b4e50:	b280      	uxth	r0, r0
   b4e52:	f002 faf2 	bl	b743a <digitalWrite>
  TRANSACTION_START
   b4e56:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4e58:	2800      	cmp	r0, #0
   b4e5a:	d074      	beq.n	b4f46 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b4e5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4e5e:	f001 fac7 	bl	b63f0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b4e62:	2204      	movs	r2, #4
   b4e64:	4957      	ldr	r1, [pc, #348]	; (b4fc4 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b4e66:	4620      	mov	r0, r4
   b4e68:	f7ff ff0b 	bl	b4c82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b4e6c:	8961      	ldrh	r1, [r4, #10]
   b4e6e:	3901      	subs	r1, #1
   b4e70:	b2c9      	uxtb	r1, r1
   b4e72:	4620      	mov	r0, r4
   b4e74:	f7ff fe96 	bl	b4ba4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b4e78:	4953      	ldr	r1, [pc, #332]	; (b4fc8 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b4e7a:	2204      	movs	r2, #4
   b4e7c:	4620      	mov	r0, r4
   b4e7e:	f7ff ff00 	bl	b4c82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b4e82:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4e86:	2b01      	cmp	r3, #1
   b4e88:	bf0c      	ite	eq
   b4e8a:	2110      	moveq	r1, #16
   b4e8c:	2114      	movne	r1, #20
   b4e8e:	4620      	mov	r0, r4
   b4e90:	f7ff fe88 	bl	b4ba4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b4e94:	2204      	movs	r2, #4
   b4e96:	494d      	ldr	r1, [pc, #308]	; (b4fcc <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b4e98:	4620      	mov	r0, r4
   b4e9a:	f7ff fef2 	bl	b4c82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b4e9e:	68a3      	ldr	r3, [r4, #8]
   b4ea0:	4a4b      	ldr	r2, [pc, #300]	; (b4fd0 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b4ea2:	4293      	cmp	r3, r2
   b4ea4:	d15c      	bne.n	b4f60 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b4ea6:	494b      	ldr	r1, [pc, #300]	; (b4fd4 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b4ea8:	2204      	movs	r2, #4
   b4eaa:	4620      	mov	r0, r4
   b4eac:	f7ff fee9 	bl	b4c82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b4eb0:	21d9      	movs	r1, #217	; 0xd9
   b4eb2:	4620      	mov	r0, r4
   b4eb4:	f7ff fe76 	bl	b4ba4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b4eb8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4ebc:	2b01      	cmp	r3, #1
   b4ebe:	bf0c      	ite	eq
   b4ec0:	2122      	moveq	r1, #34	; 0x22
   b4ec2:	21f1      	movne	r1, #241	; 0xf1
   b4ec4:	4620      	mov	r0, r4
   b4ec6:	f7ff fe6d 	bl	b4ba4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b4eca:	4620      	mov	r0, r4
   b4ecc:	4942      	ldr	r1, [pc, #264]	; (b4fd8 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b4ece:	2206      	movs	r2, #6
   b4ed0:	f7ff fed7 	bl	b4c82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b4ed4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4ed6:	2800      	cmp	r0, #0
   b4ed8:	d063      	beq.n	b4fa2 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b4eda:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b4edc:	f001 fa88 	bl	b63f0 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b4ee0:	2001      	movs	r0, #1
   b4ee2:	e76b      	b.n	b4dbc <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b4ee4:	b26d      	sxtb	r5, r5
   b4ee6:	e78e      	b.n	b4e06 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b4ee8:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b4eec:	2101      	movs	r1, #1
   b4eee:	b280      	uxth	r0, r0
   b4ef0:	f002 fa92 	bl	b7418 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b4ef4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4ef8:	2101      	movs	r1, #1
   b4efa:	b280      	uxth	r0, r0
   b4efc:	f002 fa8c 	bl	b7418 <pinMode>
    SSD1306_DESELECT
   b4f00:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4f04:	2101      	movs	r1, #1
   b4f06:	b280      	uxth	r0, r0
   b4f08:	f002 fa97 	bl	b743a <digitalWrite>
    if(spi) { // Hardware SPI
   b4f0c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b4f0e:	b13d      	cbz	r5, b4f20 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b4f10:	f1b8 0f00 	cmp.w	r8, #0
   b4f14:	f43f af7e 	beq.w	b4e14 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b4f18:	4628      	mov	r0, r5
   b4f1a:	f001 fc73 	bl	b6804 <_ZN8SPIClass5beginEv>
   b4f1e:	e779      	b.n	b4e14 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b4f20:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4f24:	2101      	movs	r1, #1
   b4f26:	b280      	uxth	r0, r0
   b4f28:	f002 fa76 	bl	b7418 <pinMode>
      pinMode(clkPin , OUTPUT);
   b4f2c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4f30:	2101      	movs	r1, #1
   b4f32:	b280      	uxth	r0, r0
   b4f34:	f002 fa70 	bl	b7418 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b4f38:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4f3c:	4629      	mov	r1, r5
   b4f3e:	b280      	uxth	r0, r0
   b4f40:	f002 fa7b 	bl	b743a <digitalWrite>
   b4f44:	e766      	b.n	b4e14 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b4f46:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4f48:	b118      	cbz	r0, b4f52 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b4f4a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b4f4e:	f001 fc87 	bl	b6860 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b4f52:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4f56:	2100      	movs	r1, #0
   b4f58:	b280      	uxth	r0, r0
   b4f5a:	f002 fa6e 	bl	b743a <digitalWrite>
   b4f5e:	e780      	b.n	b4e62 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b4f60:	4a1e      	ldr	r2, [pc, #120]	; (b4fdc <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b4f62:	4293      	cmp	r3, r2
   b4f64:	d10e      	bne.n	b4f84 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b4f66:	491e      	ldr	r1, [pc, #120]	; (b4fe0 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b4f68:	2203      	movs	r2, #3
   b4f6a:	4620      	mov	r0, r4
   b4f6c:	f7ff fe89 	bl	b4c82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b4f70:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4f74:	2b01      	cmp	r3, #1
   b4f76:	bf0c      	ite	eq
   b4f78:	219f      	moveq	r1, #159	; 0x9f
   b4f7a:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b4f7c:	4620      	mov	r0, r4
   b4f7e:	f7ff fe11 	bl	b4ba4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b4f82:	e795      	b.n	b4eb0 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b4f84:	4a17      	ldr	r2, [pc, #92]	; (b4fe4 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b4f86:	4293      	cmp	r3, r2
   b4f88:	d192      	bne.n	b4eb0 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b4f8a:	4917      	ldr	r1, [pc, #92]	; (b4fe8 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b4f8c:	2203      	movs	r2, #3
   b4f8e:	4620      	mov	r0, r4
   b4f90:	f7ff fe77 	bl	b4c82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b4f94:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4f98:	2b01      	cmp	r3, #1
   b4f9a:	bf0c      	ite	eq
   b4f9c:	2110      	moveq	r1, #16
   b4f9e:	21af      	movne	r1, #175	; 0xaf
   b4fa0:	e7ec      	b.n	b4f7c <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b4fa2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4fa6:	2101      	movs	r1, #1
   b4fa8:	b280      	uxth	r0, r0
   b4faa:	f002 fa46 	bl	b743a <digitalWrite>
   b4fae:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4fb0:	2800      	cmp	r0, #0
   b4fb2:	d095      	beq.n	b4ee0 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b4fb4:	f001 fc3a 	bl	b682c <_ZN8SPIClass14endTransactionEv>
   b4fb8:	e792      	b.n	b4ee0 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b4fba:	bf00      	nop
   b4fbc:	000b820c 	.word	0x000b820c
   b4fc0:	000b7f4c 	.word	0x000b7f4c
   b4fc4:	000b8454 	.word	0x000b8454
   b4fc8:	000b8458 	.word	0x000b8458
   b4fcc:	000b845c 	.word	0x000b845c
   b4fd0:	00200080 	.word	0x00200080
   b4fd4:	000b8466 	.word	0x000b8466
   b4fd8:	000b8460 	.word	0x000b8460
   b4fdc:	00400080 	.word	0x00400080
   b4fe0:	000b846a 	.word	0x000b846a
   b4fe4:	00100060 	.word	0x00100060
   b4fe8:	000b846d 	.word	0x000b846d

000b4fec <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4fec:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b4fee:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4ff0:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b4ff4:	db3d      	blt.n	b5072 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b4ff6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b4ffa:	4294      	cmp	r4, r2
   b4ffc:	dd39      	ble.n	b5072 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b4ffe:	2900      	cmp	r1, #0
      w += x;
   b5000:	bfbe      	ittt	lt
   b5002:	185b      	addlt	r3, r3, r1
   b5004:	b21b      	sxthlt	r3, r3
      x  = 0;
   b5006:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b5008:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b500c:	18ce      	adds	r6, r1, r3
   b500e:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b5010:	bfc4      	itt	gt
   b5012:	1a63      	subgt	r3, r4, r1
   b5014:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b5016:	2b00      	cmp	r3, #0
   b5018:	dd2b      	ble.n	b5072 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b501a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b501c:	10d6      	asrs	r6, r2, #3
   b501e:	fb14 1106 	smlabb	r1, r4, r6, r1
   b5022:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b5024:	f002 0007 	and.w	r0, r2, #7
   b5028:	2201      	movs	r2, #1
   b502a:	4082      	lsls	r2, r0
      switch(color) {
   b502c:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b502e:	b2d2      	uxtb	r2, r2
      switch(color) {
   b5030:	d016      	beq.n	b5060 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b5032:	2d02      	cmp	r5, #2
   b5034:	d00b      	beq.n	b504e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b5036:	b9e5      	cbnz	r5, b5072 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b5038:	43d2      	mvns	r2, r2
   b503a:	b2d2      	uxtb	r2, r2
   b503c:	440b      	add	r3, r1
   b503e:	4299      	cmp	r1, r3
   b5040:	d017      	beq.n	b5072 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5042:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5046:	4010      	ands	r0, r2
   b5048:	f801 0c01 	strb.w	r0, [r1, #-1]
   b504c:	e7f7      	b.n	b503e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b504e:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b5050:	4299      	cmp	r1, r3
   b5052:	d00e      	beq.n	b5072 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5054:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5058:	4050      	eors	r0, r2
   b505a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b505e:	e7f7      	b.n	b5050 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b5060:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b5062:	4299      	cmp	r1, r3
   b5064:	d005      	beq.n	b5072 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5066:	f811 0b01 	ldrb.w	r0, [r1], #1
   b506a:	4310      	orrs	r0, r2
   b506c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5070:	e7f7      	b.n	b5062 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b5072:	bd70      	pop	{r4, r5, r6, pc}

000b5074 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5074:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5076:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5078:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b507c:	db76      	blt.n	b516c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b507e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b5082:	42b1      	cmp	r1, r6
   b5084:	da72      	bge.n	b516c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b5086:	2a00      	cmp	r2, #0
      __h += __y;
   b5088:	bfbe      	ittt	lt
   b508a:	189b      	addlt	r3, r3, r2
   b508c:	b21b      	sxthlt	r3, r3
      __y = 0;
   b508e:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b5090:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5094:	18d7      	adds	r7, r2, r3
   b5096:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b5098:	bfc4      	itt	gt
   b509a:	1aa3      	subgt	r3, r4, r2
   b509c:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b509e:	2b00      	cmp	r3, #0
   b50a0:	dd64      	ble.n	b516c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b50a2:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b50a6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b50a8:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b50ac:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b50b0:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b50b2:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b50b6:	d023      	beq.n	b5100 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b50b8:	f1c2 0208 	rsb	r2, r2, #8
   b50bc:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b50be:	492d      	ldr	r1, [pc, #180]	; (b5174 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b50c0:	4293      	cmp	r3, r2
   b50c2:	bf3c      	itt	cc
   b50c4:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b50c8:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b50cc:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b50ce:	bf3c      	itt	cc
   b50d0:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b50d4:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b50d8:	2d01      	cmp	r5, #1
   b50da:	d007      	beq.n	b50ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b50dc:	2d02      	cmp	r5, #2
   b50de:	d02e      	beq.n	b513e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b50e0:	b94d      	cbnz	r5, b50f6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b50e2:	f817 c006 	ldrb.w	ip, [r7, r6]
   b50e6:	ea2c 0101 	bic.w	r1, ip, r1
   b50ea:	e003      	b.n	b50f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b50ec:	f817 c006 	ldrb.w	ip, [r7, r6]
   b50f0:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b50f4:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b50f6:	4293      	cmp	r3, r2
   b50f8:	d338      	bcc.n	b516c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b50fa:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b50fe:	440c      	add	r4, r1
        h -= mod;
   b5100:	1a9a      	subs	r2, r3, r2
   b5102:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b5104:	2a07      	cmp	r2, #7
   b5106:	d90e      	bls.n	b5126 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b5108:	2d02      	cmp	r5, #2
   b510a:	d11d      	bne.n	b5148 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b510c:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b510e:	7821      	ldrb	r1, [r4, #0]
   b5110:	43c9      	mvns	r1, r1
   b5112:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b5114:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5116:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b511a:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b511c:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b511e:	440c      	add	r4, r1
            } while(h >= 8);
   b5120:	d8f5      	bhi.n	b510e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b5122:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b5126:	b30a      	cbz	r2, b516c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5128:	4b13      	ldr	r3, [pc, #76]	; (b5178 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b512a:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b512c:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b512e:	d01a      	beq.n	b5166 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b5130:	2d02      	cmp	r5, #2
   b5132:	d01c      	beq.n	b516e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b5134:	b9d5      	cbnz	r5, b516c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b5136:	7822      	ldrb	r2, [r4, #0]
   b5138:	ea22 0303 	bic.w	r3, r2, r3
   b513c:	e015      	b.n	b516a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b513e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5142:	ea81 010c 	eor.w	r1, r1, ip
   b5146:	e7d5      	b.n	b50f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b5148:	1e29      	subs	r1, r5, #0
   b514a:	bf18      	it	ne
   b514c:	2101      	movne	r1, #1
   b514e:	4249      	negs	r1, r1
   b5150:	b2c9      	uxtb	r1, r1
   b5152:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b5154:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b5156:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5158:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b515c:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b515e:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5160:	4434      	add	r4, r6
            } while(h >= 8);
   b5162:	d8f7      	bhi.n	b5154 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b5164:	e7dd      	b.n	b5122 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b5166:	7822      	ldrb	r2, [r4, #0]
   b5168:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b516a:	7023      	strb	r3, [r4, #0]
}
   b516c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b516e:	7822      	ldrb	r2, [r4, #0]
   b5170:	4053      	eors	r3, r2
   b5172:	e7fa      	b.n	b516a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b5174:	000b8444 	.word	0x000b8444
   b5178:	000b844c 	.word	0x000b844c

000b517c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b517c:	b470      	push	{r4, r5, r6}
   b517e:	4614      	mov	r4, r2
  switch(rotation) {
   b5180:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5182:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b5186:	2a02      	cmp	r2, #2
   b5188:	d00d      	beq.n	b51a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b518a:	2a03      	cmp	r2, #3
   b518c:	d018      	beq.n	b51c0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b518e:	2a01      	cmp	r2, #1
   b5190:	d111      	bne.n	b51b6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b5192:	8902      	ldrh	r2, [r0, #8]
   b5194:	43e4      	mvns	r4, r4
   b5196:	4414      	add	r4, r2
   b5198:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b519a:	9603      	str	r6, [sp, #12]
   b519c:	460a      	mov	r2, r1
   b519e:	4621      	mov	r1, r4
}
   b51a0:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b51a2:	f7ff bf67 	b.w	b5074 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b51a6:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b51a8:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b51aa:	43e4      	mvns	r4, r4
    x -= (w-1);
   b51ac:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b51ae:	4414      	add	r4, r2
    x -= (w-1);
   b51b0:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b51b2:	b224      	sxth	r4, r4
    x -= (w-1);
   b51b4:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b51b6:	9603      	str	r6, [sp, #12]
   b51b8:	4622      	mov	r2, r4
}
   b51ba:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b51bc:	f7ff bf16 	b.w	b4fec <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b51c0:	8945      	ldrh	r5, [r0, #10]
   b51c2:	4419      	add	r1, r3
   b51c4:	1a69      	subs	r1, r5, r1
   b51c6:	b209      	sxth	r1, r1
    break;
   b51c8:	e7e7      	b.n	b519a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b51ca <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b51ca:	b430      	push	{r4, r5}
   b51cc:	4614      	mov	r4, r2
  switch(rotation) {
   b51ce:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b51d0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b51d4:	2a02      	cmp	r2, #2
   b51d6:	d00d      	beq.n	b51f4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b51d8:	2a03      	cmp	r2, #3
   b51da:	d018      	beq.n	b520e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b51dc:	2a01      	cmp	r2, #1
   b51de:	d111      	bne.n	b5204 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b51e0:	18e2      	adds	r2, r4, r3
   b51e2:	8904      	ldrh	r4, [r0, #8]
   b51e4:	1aa4      	subs	r4, r4, r2
   b51e6:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b51e8:	9502      	str	r5, [sp, #8]
   b51ea:	460a      	mov	r2, r1
   b51ec:	4621      	mov	r1, r4
}
   b51ee:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b51f0:	f7ff befc 	b.w	b4fec <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b51f4:	8902      	ldrh	r2, [r0, #8]
   b51f6:	43c9      	mvns	r1, r1
   b51f8:	4411      	add	r1, r2
    y -= (h-1);
   b51fa:	18e2      	adds	r2, r4, r3
   b51fc:	8944      	ldrh	r4, [r0, #10]
   b51fe:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b5200:	b209      	sxth	r1, r1
    y -= (h-1);
   b5202:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b5204:	9502      	str	r5, [sp, #8]
   b5206:	4622      	mov	r2, r4
}
   b5208:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b520a:	f7ff bf33 	b.w	b5074 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b520e:	8942      	ldrh	r2, [r0, #10]
   b5210:	43c9      	mvns	r1, r1
   b5212:	4411      	add	r1, r2
   b5214:	b209      	sxth	r1, r1
    break;
   b5216:	e7e7      	b.n	b51e8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b5218 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b521c:	4604      	mov	r4, r0
  TRANSACTION_START
   b521e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b5220:	2800      	cmp	r0, #0
   b5222:	d042      	beq.n	b52aa <_ZN16Adafruit_SSD13067displayEv+0x92>
   b5224:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5226:	f001 f8e3 	bl	b63f0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b522a:	4947      	ldr	r1, [pc, #284]	; (b5348 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b522c:	2205      	movs	r2, #5
   b522e:	4620      	mov	r0, r4
   b5230:	f7ff fd27 	bl	b4c82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b5234:	8921      	ldrh	r1, [r4, #8]
   b5236:	3901      	subs	r1, #1
   b5238:	4620      	mov	r0, r4
   b523a:	b2c9      	uxtb	r1, r1
   b523c:	f7ff fcb2 	bl	b4ba4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5240:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5244:	1dde      	adds	r6, r3, #7
   b5246:	bf48      	it	mi
   b5248:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b524c:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5250:	8923      	ldrh	r3, [r4, #8]
   b5252:	10f6      	asrs	r6, r6, #3
   b5254:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b5258:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b525c:	2800      	cmp	r0, #0
   b525e:	d03a      	beq.n	b52d6 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b5260:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5264:	f001 f8d2 	bl	b640c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b5268:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b526a:	6803      	ldr	r3, [r0, #0]
   b526c:	2140      	movs	r1, #64	; 0x40
   b526e:	689b      	ldr	r3, [r3, #8]
   b5270:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5272:	2701      	movs	r7, #1
    while(count--) {
   b5274:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b5276:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b5278:	d024      	beq.n	b52c4 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b527a:	2f1f      	cmp	r7, #31
   b527c:	d90c      	bls.n	b5298 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b527e:	f001 f8cc 	bl	b641a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5282:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5286:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5288:	f001 f8c0 	bl	b640c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b528c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b528e:	6803      	ldr	r3, [r0, #0]
   b5290:	2140      	movs	r1, #64	; 0x40
   b5292:	689b      	ldr	r3, [r3, #8]
   b5294:	4798      	blx	r3
        bytesOut = 1;
   b5296:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b5298:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b529a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b529e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b52a0:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b52a2:	689b      	ldr	r3, [r3, #8]
   b52a4:	4798      	blx	r3
      bytesOut++;
   b52a6:	b2ff      	uxtb	r7, r7
    while(count--) {
   b52a8:	e7e4      	b.n	b5274 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b52aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b52ac:	b118      	cbz	r0, b52b6 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b52ae:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b52b2:	f001 fad5 	bl	b6860 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b52b6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b52ba:	2100      	movs	r1, #0
   b52bc:	b280      	uxth	r0, r0
   b52be:	f002 f8bc 	bl	b743a <digitalWrite>
   b52c2:	e7b2      	b.n	b522a <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b52c4:	f001 f8a9 	bl	b641a <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b52c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b52ca:	b378      	cbz	r0, b532c <_ZN16Adafruit_SSD13067displayEv+0x114>
   b52cc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b52ce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b52d2:	f001 b88d 	b.w	b63f0 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b52d6:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b52da:	2101      	movs	r1, #1
   b52dc:	b280      	uxth	r0, r0
   b52de:	f002 f8ac 	bl	b743a <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b52e2:	42ae      	cmp	r6, r5
   b52e4:	d0f0      	beq.n	b52c8 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b52e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b52e8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b52ec:	b118      	cbz	r0, b52f6 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b52ee:	4649      	mov	r1, r9
   b52f0:	f001 fb24 	bl	b693c <_ZN8SPIClass8transferEh>
   b52f4:	e7f5      	b.n	b52e2 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b52f6:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b52f8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b52fc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5300:	ea09 0108 	and.w	r1, r9, r8
   b5304:	b280      	uxth	r0, r0
   b5306:	f002 f898 	bl	b743a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b530a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b530e:	2101      	movs	r1, #1
   b5310:	b280      	uxth	r0, r0
   b5312:	f002 f892 	bl	b743a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5316:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b531a:	2100      	movs	r1, #0
   b531c:	b280      	uxth	r0, r0
   b531e:	f002 f88c 	bl	b743a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5322:	3f01      	subs	r7, #1
   b5324:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5328:	d1e8      	bne.n	b52fc <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b532a:	e7da      	b.n	b52e2 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b532c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5330:	2101      	movs	r1, #1
   b5332:	b280      	uxth	r0, r0
   b5334:	f002 f881 	bl	b743a <digitalWrite>
   b5338:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b533a:	b118      	cbz	r0, b5344 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b533c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b5340:	f001 ba74 	b.w	b682c <_ZN8SPIClass14endTransactionEv>
}
   b5344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5348:	000b8470 	.word	0x000b8470

000b534c <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b534c:	2100      	movs	r1, #0
   b534e:	220a      	movs	r2, #10
   b5350:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b5354:	4770      	bx	lr

000b5356 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b5356:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b5358:	b510      	push	{r4, lr}
   b535a:	4604      	mov	r4, r0
    this->pin = pin;
   b535c:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b535e:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b5360:	b288      	uxth	r0, r1
   b5362:	f002 f883 	bl	b746c <digitalRead>
   b5366:	b108      	cbz	r0, b536c <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b5368:	2303      	movs	r3, #3
   b536a:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b536c:	f000 fd44 	bl	b5df8 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b5370:	6020      	str	r0, [r4, #0]
#endif
}
   b5372:	bd10      	pop	{r4, pc}

000b5374 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b5374:	b538      	push	{r3, r4, r5, lr}
   b5376:	460c      	mov	r4, r1
   b5378:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b537a:	4611      	mov	r1, r2
   b537c:	b2a0      	uxth	r0, r4
   b537e:	f002 f84b 	bl	b7418 <pinMode>
  
  this->attach(pin);
   b5382:	4621      	mov	r1, r4
   b5384:	4628      	mov	r0, r5
}
   b5386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b538a:	f7ff bfe4 	b.w	b5356 <_ZN8Debounce6attachEi>

000b538e <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b538e:	b538      	push	{r3, r4, r5, lr}
   b5390:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b5392:	79c0      	ldrb	r0, [r0, #7]
   b5394:	f002 f86a 	bl	b746c <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b5398:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b539a:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b539c:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b53a0:	bf18      	it	ne
   b53a2:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b53a4:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b53a8:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b53aa:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b53ac:	d00a      	beq.n	b53c4 <_ZN8Debounce6updateEv+0x36>
   b53ae:	f000 fd23 	bl	b5df8 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b53b2:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b53b4:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b53b6:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b53ba:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b53bc:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b53be:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b53c2:	bd38      	pop	{r3, r4, r5, pc}
   b53c4:	f000 fd18 	bl	b5df8 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b53c8:	6823      	ldr	r3, [r4, #0]
   b53ca:	1ac0      	subs	r0, r0, r3
   b53cc:	88a3      	ldrh	r3, [r4, #4]
   b53ce:	4298      	cmp	r0, r3
   b53d0:	d3f4      	bcc.n	b53bc <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b53d2:	79a3      	ldrb	r3, [r4, #6]
   b53d4:	f003 0301 	and.w	r3, r3, #1
   b53d8:	42ab      	cmp	r3, r5
   b53da:	d0ef      	beq.n	b53bc <_ZN8Debounce6updateEv+0x2e>
   b53dc:	f000 fd0c 	bl	b5df8 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b53e0:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b53e2:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b53e4:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b53e8:	f043 0308 	orr.w	r3, r3, #8
   b53ec:	e7e5      	b.n	b53ba <_ZN8Debounce6updateEv+0x2c>

000b53ee <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b53ee:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b53f2:	b510      	push	{r4, lr}
   b53f4:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b53f6:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b53f8:	b113      	cbz	r3, b5400 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b53fa:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b53fc:	f000 fcd4 	bl	b5da8 <os_mutex_lock>
#endif
#endif
#endif
        }
   b5400:	4620      	mov	r0, r4
   b5402:	bd10      	pop	{r4, pc}

000b5404 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b5404:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b5406:	6803      	ldr	r3, [r0, #0]
   b5408:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b540c:	4604      	mov	r4, r0
            if (mqtt->thread)
   b540e:	b112      	cbz	r2, b5416 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b5410:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b5412:	f000 fcd1 	bl	b5db8 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b5416:	4620      	mov	r0, r4
   b5418:	bd10      	pop	{r4, pc}

000b541a <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b541a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b541c:	461f      	mov	r7, r3
   b541e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b5422:	4604      	mov	r4, r0
   b5424:	460d      	mov	r5, r1
   b5426:	4616      	mov	r6, r2
    if (thread) {
   b5428:	b12b      	cbz	r3, b5436 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b542a:	2301      	movs	r3, #1
   b542c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b5430:	3058      	adds	r0, #88	; 0x58
   b5432:	f000 fca9 	bl	b5d88 <os_mutex_create>
    }
    this->callback = callback;
   b5436:	9b08      	ldr	r3, [sp, #32]
   b5438:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b543a:	2300      	movs	r3, #0
   b543c:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b543e:	b106      	cbz	r6, b5442 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b5440:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b5442:	b125      	cbz	r5, b544e <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b5444:	4629      	mov	r1, r5
   b5446:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b544a:	f001 fadc 	bl	b6a06 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b544e:	9b06      	ldr	r3, [sp, #24]
   b5450:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b5452:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b5454:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b5456:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b545a:	2bff      	cmp	r3, #255	; 0xff
   b545c:	bfb8      	it	lt
   b545e:	23ff      	movlt	r3, #255	; 0xff
   b5460:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b5464:	b108      	cbz	r0, b546a <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b5466:	f7fe fe18 	bl	b409a <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b546a:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b546e:	f7fe fe12 	bl	b4096 <_Znaj>
   b5472:	61e0      	str	r0, [r4, #28]
}
   b5474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b5478 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b5478:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b547c:	4604      	mov	r4, r0
            bool thread) {
   b547e:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b5480:	4617      	mov	r7, r2
   b5482:	4698      	mov	r8, r3
   b5484:	460e      	mov	r6, r1
            bool thread) {
   b5486:	f001 fdbf 	bl	b7008 <_ZN9TCPClientC1Ev>
   b548a:	490d      	ldr	r1, [pc, #52]	; (b54c0 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b548c:	61e5      	str	r5, [r4, #28]
   b548e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5492:	f001 faa4 	bl	b69de <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b5496:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b549a:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b549c:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b54a0:	22ff      	movs	r2, #255	; 0xff
   b54a2:	230f      	movs	r3, #15
   b54a4:	e9cd 3200 	strd	r3, r2, [sp]
   b54a8:	4620      	mov	r0, r4
            bool thread) {
   b54aa:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b54ae:	463b      	mov	r3, r7
   b54b0:	462a      	mov	r2, r5
   b54b2:	4631      	mov	r1, r6
   b54b4:	f7ff ffb1 	bl	b541a <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b54b8:	4620      	mov	r0, r4
   b54ba:	b004      	add	sp, #16
   b54bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b54c0:	000b7efc 	.word	0x000b7efc

000b54c4 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b54c4:	b510      	push	{r4, lr}
   b54c6:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b54c8:	4620      	mov	r0, r4
   b54ca:	f001 fcf9 	bl	b6ec0 <_ZN9TCPClient9availableEv>
   b54ce:	2800      	cmp	r0, #0
   b54d0:	d0fa      	beq.n	b54c8 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b54d2:	4620      	mov	r0, r4
   b54d4:	f001 fade 	bl	b6a94 <_ZN9TCPClient4readEv>
}
   b54d8:	b2c0      	uxtb	r0, r0
   b54da:	bd10      	pop	{r4, pc}

000b54dc <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b54dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b54e0:	4605      	mov	r5, r0
   b54e2:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b54e4:	f7ff ffee 	bl	b54c4 <_ZN4MQTT8readByteEv>
   b54e8:	69eb      	ldr	r3, [r5, #28]
   b54ea:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b54ec:	69eb      	ldr	r3, [r5, #28]
   b54ee:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b54f2:	f04f 0901 	mov.w	r9, #1
   b54f6:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b54fa:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b54fc:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b54fe:	4628      	mov	r0, r5
   b5500:	f7ff ffe0 	bl	b54c4 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b5504:	4626      	mov	r6, r4
   b5506:	69eb      	ldr	r3, [r5, #28]
   b5508:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b550a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b550e:	fb13 f309 	smulbb	r3, r3, r9
   b5512:	441f      	add	r7, r3
        buffer[len++] = digit;
   b5514:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b5516:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b5518:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b551a:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b551c:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b5520:	d4ed      	bmi.n	b54fe <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b5522:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b5524:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b5528:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b552c:	d11e      	bne.n	b556c <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b552e:	4628      	mov	r0, r5
   b5530:	f7ff ffc8 	bl	b54c4 <_ZN4MQTT8readByteEv>
   b5534:	69eb      	ldr	r3, [r5, #28]
   b5536:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b5538:	4628      	mov	r0, r5
   b553a:	f7ff ffc3 	bl	b54c4 <_ZN4MQTT8readByteEv>
   b553e:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b5540:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b5542:	b2b6      	uxth	r6, r6
   b5544:	69eb      	ldr	r3, [r5, #28]
   b5546:	b2a4      	uxth	r4, r4
   b5548:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b554a:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b554c:	b2b6      	uxth	r6, r6
   b554e:	42be      	cmp	r6, r7
   b5550:	d20e      	bcs.n	b5570 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b5552:	4628      	mov	r0, r5
   b5554:	f7ff ffb6 	bl	b54c4 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b5558:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b555c:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b555e:	bf84      	itt	hi
   b5560:	69eb      	ldrhi	r3, [r5, #28]
   b5562:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b5564:	3401      	adds	r4, #1
   b5566:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b5568:	3601      	adds	r6, #1
   b556a:	e7ef      	b.n	b554c <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b556c:	2600      	movs	r6, #0
   b556e:	e7ed      	b.n	b554c <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b5570:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b5574:	42a3      	cmp	r3, r4
   b5576:	bf2c      	ite	cs
   b5578:	4620      	movcs	r0, r4
   b557a:	2000      	movcc	r0, #0
   b557c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5580 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b5580:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5584:	4615      	mov	r5, r2
   b5586:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b5588:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b558a:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b558c:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b558e:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b5590:	a802      	add	r0, sp, #8
        digit = len % 128;
   b5592:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b5596:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b559a:	f103 0401 	add.w	r4, r3, #1
   b559e:	4403      	add	r3, r0
            digit |= 0x80;
   b55a0:	bf88      	it	hi
   b55a2:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b55a6:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b55aa:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b55ae:	b2e4      	uxtb	r4, r4
   b55b0:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b55b4:	d81e      	bhi.n	b55f4 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b55b6:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b55ba:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b55be:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b55c0:	4622      	mov	r2, r4
   b55c2:	a901      	add	r1, sp, #4
   b55c4:	4428      	add	r0, r5
    buf[4-llen] = header;
   b55c6:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b55ca:	f002 f8f7 	bl	b77bc <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b55ce:	1c72      	adds	r2, r6, #1
   b55d0:	4422      	add	r2, r4
   b55d2:	4641      	mov	r1, r8
   b55d4:	4638      	mov	r0, r7
   b55d6:	f001 fa48 	bl	b6a6a <_ZN9TCPClient5writeEPKhj>
   b55da:	4605      	mov	r5, r0
   b55dc:	f000 fc0c 	bl	b5df8 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b55e0:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b55e2:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b55e4:	4432      	add	r2, r6
   b55e6:	b2a8      	uxth	r0, r5
}
   b55e8:	1a13      	subs	r3, r2, r0
   b55ea:	4258      	negs	r0, r3
   b55ec:	4158      	adcs	r0, r3
   b55ee:	b002      	add	sp, #8
   b55f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b55f4:	4623      	mov	r3, r4
   b55f6:	e7ca      	b.n	b558e <_ZN4MQTT5writeEhPht+0xe>

000b55f8 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b55f8:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b55fa:	b5f0      	push	{r4, r5, r6, r7, lr}
   b55fc:	4605      	mov	r5, r0
    pos += 2;
   b55fe:	b298      	uxth	r0, r3
   b5600:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b5602:	5cce      	ldrb	r6, [r1, r3]
   b5604:	b29c      	uxth	r4, r3
   b5606:	b156      	cbz	r6, b561e <_ZN4MQTT11writeStringEPKcPht+0x26>
   b5608:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b560c:	4584      	cmp	ip, r0
   b560e:	f103 0701 	add.w	r7, r3, #1
   b5612:	d904      	bls.n	b561e <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b5614:	1c44      	adds	r4, r0, #1
   b5616:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b5618:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b561a:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b561c:	e7f1      	b.n	b5602 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b561e:	b299      	uxth	r1, r3
   b5620:	1a41      	subs	r1, r0, r1
   b5622:	440a      	add	r2, r1
   b5624:	0a21      	lsrs	r1, r4, #8
   b5626:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b562a:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b562e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5630 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b5630:	b538      	push	{r3, r4, r5, lr}
   b5632:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b5634:	f001 fb66 	bl	b6d04 <_ZN9TCPClient9connectedEv>
   b5638:	2800      	cmp	r0, #0
   b563a:	bf14      	ite	ne
   b563c:	2501      	movne	r5, #1
   b563e:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b5640:	d102      	bne.n	b5648 <_ZN4MQTT11isConnectedEv+0x18>
   b5642:	4620      	mov	r0, r4
   b5644:	f001 fc96 	bl	b6f74 <_ZN9TCPClient4stopEv>
    return rc;
}
   b5648:	4628      	mov	r0, r5
   b564a:	bd38      	pop	{r3, r4, r5, pc}

000b564c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b564c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5650:	b088      	sub	sp, #32
   b5652:	4604      	mov	r4, r0
   b5654:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b5658:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b565c:	4689      	mov	r9, r1
   b565e:	4617      	mov	r7, r2
   b5660:	461e      	mov	r6, r3
    if (!isConnected()) {
   b5662:	f7ff ffe5 	bl	b5630 <_ZN4MQTT11isConnectedEv>
   b5666:	4605      	mov	r5, r0
   b5668:	2800      	cmp	r0, #0
   b566a:	f040 80cd 	bne.w	b5808 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b566e:	4621      	mov	r1, r4
   b5670:	a801      	add	r0, sp, #4
   b5672:	f7ff febc 	bl	b53ee <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b5676:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5678:	2900      	cmp	r1, #0
   b567a:	f040 8088 	bne.w	b578e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b567e:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b5682:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b5684:	462b      	mov	r3, r5
   b5686:	4620      	mov	r0, r4
   b5688:	f001 fabe 	bl	b6c08 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b568c:	2800      	cmp	r0, #0
   b568e:	d07a      	beq.n	b5786 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b5690:	2301      	movs	r3, #1
   b5692:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b5694:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b5698:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b569a:	2b04      	cmp	r3, #4
   b569c:	4b5b      	ldr	r3, [pc, #364]	; (b580c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b569e:	f040 8081 	bne.w	b57a4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b56a2:	6818      	ldr	r0, [r3, #0]
   b56a4:	8899      	ldrh	r1, [r3, #4]
   b56a6:	799b      	ldrb	r3, [r3, #6]
   b56a8:	f8ad 100c 	strh.w	r1, [sp, #12]
   b56ac:	f88d 300e 	strb.w	r3, [sp, #14]
   b56b0:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b56b2:	f8c2 0005 	str.w	r0, [r2, #5]
   b56b6:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b56ba:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b56be:	f8a2 1009 	strh.w	r1, [r2, #9]
   b56c2:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b56c4:	230c      	movs	r3, #12
            if (willTopic) {
   b56c6:	f1b8 0f00 	cmp.w	r8, #0
   b56ca:	f000 8081 	beq.w	b57d0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b56ce:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b56d2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b56d6:	0140      	lsls	r0, r0, #5
   b56d8:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b56dc:	f040 0006 	orr.w	r0, r0, #6
   b56e0:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b56e2:	f1ba 0f00 	cmp.w	sl, #0
   b56e6:	d101      	bne.n	b56ec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b56e8:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b56ec:	b11f      	cbz	r7, b56f6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b56ee:	2e00      	cmp	r6, #0
   b56f0:	d170      	bne.n	b57d4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b56f2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b56f6:	69e2      	ldr	r2, [r4, #28]
   b56f8:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b56fa:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b56fc:	69e1      	ldr	r1, [r4, #28]
   b56fe:	1c58      	adds	r0, r3, #1
   b5700:	1212      	asrs	r2, r2, #8
   b5702:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b5704:	1c9a      	adds	r2, r3, #2
   b5706:	69e1      	ldr	r1, [r4, #28]
   b5708:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b570a:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b570c:	3303      	adds	r3, #3
   b570e:	69e2      	ldr	r2, [r4, #28]
   b5710:	4649      	mov	r1, r9
   b5712:	4620      	mov	r0, r4
   b5714:	f7ff ff70 	bl	b55f8 <_ZN4MQTT11writeStringEPKcPht>
   b5718:	4603      	mov	r3, r0
            if (willTopic) {
   b571a:	f1b8 0f00 	cmp.w	r8, #0
   b571e:	d00b      	beq.n	b5738 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b5720:	69e2      	ldr	r2, [r4, #28]
   b5722:	4641      	mov	r1, r8
   b5724:	4620      	mov	r0, r4
   b5726:	f7ff ff67 	bl	b55f8 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b572a:	69e2      	ldr	r2, [r4, #28]
   b572c:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b572e:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b5730:	4620      	mov	r0, r4
   b5732:	f7ff ff61 	bl	b55f8 <_ZN4MQTT11writeStringEPKcPht>
   b5736:	4603      	mov	r3, r0
            if(user != NULL) {
   b5738:	b167      	cbz	r7, b5754 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b573a:	69e2      	ldr	r2, [r4, #28]
   b573c:	4639      	mov	r1, r7
   b573e:	4620      	mov	r0, r4
   b5740:	f7ff ff5a 	bl	b55f8 <_ZN4MQTT11writeStringEPKcPht>
   b5744:	4603      	mov	r3, r0
                if(pass != NULL) {
   b5746:	b12e      	cbz	r6, b5754 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b5748:	69e2      	ldr	r2, [r4, #28]
   b574a:	4631      	mov	r1, r6
   b574c:	4620      	mov	r0, r4
   b574e:	f7ff ff53 	bl	b55f8 <_ZN4MQTT11writeStringEPKcPht>
   b5752:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b5754:	3b05      	subs	r3, #5
   b5756:	69e2      	ldr	r2, [r4, #28]
   b5758:	b29b      	uxth	r3, r3
   b575a:	2110      	movs	r1, #16
   b575c:	4620      	mov	r0, r4
   b575e:	f7ff ff0f 	bl	b5580 <_ZN4MQTT5writeEhPht>
   b5762:	f000 fb49 	bl	b5df8 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b5766:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b576a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b576e:	4620      	mov	r0, r4
   b5770:	f001 fba6 	bl	b6ec0 <_ZN9TCPClient9availableEv>
   b5774:	bb88      	cbnz	r0, b57da <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b5776:	f000 fb3f 	bl	b5df8 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b577a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b577c:	1ac0      	subs	r0, r0, r3
   b577e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5780:	4373      	muls	r3, r6
   b5782:	4298      	cmp	r0, r3
   b5784:	d9f3      	bls.n	b576e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b5786:	4620      	mov	r0, r4
   b5788:	f001 fbf4 	bl	b6f74 <_ZN9TCPClient4stopEv>
   b578c:	e035      	b.n	b57fa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b578e:	a802      	add	r0, sp, #8
   b5790:	f000 fec4 	bl	b651c <_ZN9IPAddressC1EPKh>
   b5794:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b5798:	462b      	mov	r3, r5
   b579a:	a902      	add	r1, sp, #8
   b579c:	4620      	mov	r0, r4
   b579e:	f001 fb13 	bl	b6dc8 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b57a2:	e773      	b.n	b568c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b57a4:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b57a8:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b57ac:	7bdb      	ldrb	r3, [r3, #15]
   b57ae:	f10d 0c08 	add.w	ip, sp, #8
   b57b2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b57b6:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b57ba:	ab02      	add	r3, sp, #8
   b57bc:	cb03      	ldmia	r3!, {r0, r1}
   b57be:	f8c2 0005 	str.w	r0, [r2, #5]
   b57c2:	f8c2 1009 	str.w	r1, [r2, #9]
   b57c6:	f89c 3000 	ldrb.w	r3, [ip]
   b57ca:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b57cc:	230e      	movs	r3, #14
   b57ce:	e77a      	b.n	b56c6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b57d0:	2002      	movs	r0, #2
   b57d2:	e786      	b.n	b56e2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b57d4:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b57d8:	e78d      	b.n	b56f6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b57da:	a902      	add	r1, sp, #8
   b57dc:	4620      	mov	r0, r4
   b57de:	f7ff fe7d 	bl	b54dc <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b57e2:	2804      	cmp	r0, #4
   b57e4:	d1cf      	bne.n	b5786 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b57e6:	69e3      	ldr	r3, [r4, #28]
   b57e8:	78de      	ldrb	r6, [r3, #3]
   b57ea:	2e00      	cmp	r6, #0
   b57ec:	d1cb      	bne.n	b5786 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b57ee:	f000 fb03 	bl	b5df8 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b57f2:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b57f4:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b57f6:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b57fa:	a801      	add	r0, sp, #4
   b57fc:	f7ff fe02 	bl	b5404 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5800:	4628      	mov	r0, r5
   b5802:	b008      	add	sp, #32
   b5804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b5808:	2500      	movs	r5, #0
   b580a:	e7f9      	b.n	b5800 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b580c:	000b8475 	.word	0x000b8475

000b5810 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b5810:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b5812:	2301      	movs	r3, #1
   b5814:	2204      	movs	r2, #4
   b5816:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b581a:	2300      	movs	r3, #0
   b581c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b5820:	e9cd 3300 	strd	r3, r3, [sp]
   b5824:	461a      	mov	r2, r3
   b5826:	f7ff ff11 	bl	b564c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b582a:	b007      	add	sp, #28
   b582c:	f85d fb04 	ldr.w	pc, [sp], #4

000b5830 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b5830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5834:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b5838:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b583c:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b5840:	4604      	mov	r4, r0
   b5842:	468b      	mov	fp, r1
   b5844:	4616      	mov	r6, r2
   b5846:	461f      	mov	r7, r3
    if (isConnected()) {
   b5848:	f7ff fef2 	bl	b5630 <_ZN4MQTT11isConnectedEv>
   b584c:	4682      	mov	sl, r0
   b584e:	2800      	cmp	r0, #0
   b5850:	d051      	beq.n	b58f6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b5852:	4621      	mov	r1, r4
   b5854:	a801      	add	r0, sp, #4
   b5856:	f7ff fdca 	bl	b53ee <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b585a:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b585e:	69e0      	ldr	r0, [r4, #28]
   b5860:	2100      	movs	r1, #0
   b5862:	f001 ffb9 	bl	b77d8 <memset>
        length = writeString(topic, buffer, length);
   b5866:	2305      	movs	r3, #5
   b5868:	69e2      	ldr	r2, [r4, #28]
   b586a:	4659      	mov	r1, fp
   b586c:	4620      	mov	r0, r4
   b586e:	f7ff fec3 	bl	b55f8 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b5872:	1e6b      	subs	r3, r5, #1
   b5874:	2b01      	cmp	r3, #1
   b5876:	d815      	bhi.n	b58a4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b5878:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b587a:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b587c:	3101      	adds	r1, #1
   b587e:	b289      	uxth	r1, r1
   b5880:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5882:	0a09      	lsrs	r1, r1, #8
   b5884:	5419      	strb	r1, [r3, r0]
   b5886:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b5888:	69e3      	ldr	r3, [r4, #28]
   b588a:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b588c:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b588e:	3002      	adds	r0, #2
   b5890:	5499      	strb	r1, [r3, r2]
   b5892:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b5894:	f1b8 0f00 	cmp.w	r8, #0
   b5898:	d004      	beq.n	b58a4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b589a:	8c23      	ldrh	r3, [r4, #32]
   b589c:	1c5a      	adds	r2, r3, #1
   b589e:	8422      	strh	r2, [r4, #32]
   b58a0:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b58a4:	2100      	movs	r1, #0
   b58a6:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b58a8:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b58aa:	69e2      	ldr	r2, [r4, #28]
   b58ac:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b58ae:	d90a      	bls.n	b58c6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b58b0:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b58b4:	459c      	cmp	ip, r3
   b58b6:	d906      	bls.n	b58c6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b58b8:	f816 c001 	ldrb.w	ip, [r6, r1]
   b58bc:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b58c0:	3101      	adds	r1, #1
   b58c2:	b289      	uxth	r1, r1
   b58c4:	e7ef      	b.n	b58a6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b58c6:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b58ca:	2900      	cmp	r1, #0
   b58cc:	bf0c      	ite	eq
   b58ce:	2130      	moveq	r1, #48	; 0x30
   b58d0:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b58d2:	f1b9 0f00 	cmp.w	r9, #0
   b58d6:	d001      	beq.n	b58dc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b58d8:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b58dc:	2d02      	cmp	r5, #2
   b58de:	d10e      	bne.n	b58fe <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b58e0:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b58e4:	3b05      	subs	r3, #5
   b58e6:	b29b      	uxth	r3, r3
   b58e8:	4620      	mov	r0, r4
   b58ea:	f7ff fe49 	bl	b5580 <_ZN4MQTT5writeEhPht>
   b58ee:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b58f0:	a801      	add	r0, sp, #4
   b58f2:	f7ff fd87 	bl	b5404 <_ZN4MQTT11MutexLockerD1Ev>
}
   b58f6:	4650      	mov	r0, sl
   b58f8:	b003      	add	sp, #12
   b58fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b58fe:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b5900:	bf08      	it	eq
   b5902:	f041 0102 	orreq.w	r1, r1, #2
   b5906:	e7ed      	b.n	b58e4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b5908 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b5908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b590a:	9c08      	ldr	r4, [sp, #32]
   b590c:	9403      	str	r4, [sp, #12]
   b590e:	2400      	movs	r4, #0
   b5910:	9402      	str	r4, [sp, #8]
   b5912:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b5916:	9401      	str	r4, [sp, #4]
   b5918:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b591c:	9400      	str	r4, [sp, #0]
   b591e:	f7ff ff87 	bl	b5830 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b5922:	b004      	add	sp, #16
   b5924:	bd10      	pop	{r4, pc}

000b5926 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b5926:	b530      	push	{r4, r5, lr}
   b5928:	b087      	sub	sp, #28
   b592a:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b592c:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b592e:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b5930:	9204      	str	r2, [sp, #16]
   b5932:	f001 ff91 	bl	b7858 <strlen>
   b5936:	2500      	movs	r5, #0
   b5938:	4603      	mov	r3, r0
   b593a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b593e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b5942:	9500      	str	r5, [sp, #0]
   b5944:	4620      	mov	r0, r4
   b5946:	f7ff ffdf 	bl	b5908 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b594a:	b007      	add	sp, #28
   b594c:	bd30      	pop	{r4, r5, pc}

000b594e <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b594e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5950:	4604      	mov	r4, r0
   b5952:	460e      	mov	r6, r1
    if (isConnected()) {
   b5954:	f7ff fe6c 	bl	b5630 <_ZN4MQTT11isConnectedEv>
   b5958:	4605      	mov	r5, r0
   b595a:	b1c8      	cbz	r0, b5990 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b595c:	4621      	mov	r1, r4
   b595e:	a801      	add	r0, sp, #4
   b5960:	f7ff fd45 	bl	b53ee <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b5964:	69e3      	ldr	r3, [r4, #28]
   b5966:	2262      	movs	r2, #98	; 0x62
   b5968:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b596a:	69e3      	ldr	r3, [r4, #28]
   b596c:	2202      	movs	r2, #2
   b596e:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b5970:	69e3      	ldr	r3, [r4, #28]
   b5972:	0a32      	lsrs	r2, r6, #8
   b5974:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b5976:	69e3      	ldr	r3, [r4, #28]
   b5978:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b597a:	69e1      	ldr	r1, [r4, #28]
   b597c:	2204      	movs	r2, #4
   b597e:	4620      	mov	r0, r4
   b5980:	f001 f873 	bl	b6a6a <_ZN9TCPClient5writeEPKhj>
   b5984:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b5986:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b5988:	bf18      	it	ne
   b598a:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b598c:	f7ff fd3a 	bl	b5404 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5990:	4628      	mov	r0, r5
   b5992:	b002      	add	sp, #8
   b5994:	bd70      	pop	{r4, r5, r6, pc}

000b5996 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b5996:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5998:	4604      	mov	r4, r0
   b599a:	460e      	mov	r6, r1
    if (isConnected()) {
   b599c:	f7ff fe48 	bl	b5630 <_ZN4MQTT11isConnectedEv>
   b59a0:	4605      	mov	r5, r0
   b59a2:	b1c8      	cbz	r0, b59d8 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b59a4:	4621      	mov	r1, r4
   b59a6:	a801      	add	r0, sp, #4
   b59a8:	f7ff fd21 	bl	b53ee <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b59ac:	69e3      	ldr	r3, [r4, #28]
   b59ae:	2272      	movs	r2, #114	; 0x72
   b59b0:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b59b2:	69e3      	ldr	r3, [r4, #28]
   b59b4:	2202      	movs	r2, #2
   b59b6:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b59b8:	69e3      	ldr	r3, [r4, #28]
   b59ba:	0a32      	lsrs	r2, r6, #8
   b59bc:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b59be:	69e3      	ldr	r3, [r4, #28]
   b59c0:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b59c2:	69e1      	ldr	r1, [r4, #28]
   b59c4:	2204      	movs	r2, #4
   b59c6:	4620      	mov	r0, r4
   b59c8:	f001 f84f 	bl	b6a6a <_ZN9TCPClient5writeEPKhj>
   b59cc:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b59ce:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b59d0:	bf18      	it	ne
   b59d2:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b59d4:	f7ff fd16 	bl	b5404 <_ZN4MQTT11MutexLockerD1Ev>
}
   b59d8:	4628      	mov	r0, r5
   b59da:	b002      	add	sp, #8
   b59dc:	bd70      	pop	{r4, r5, r6, pc}

000b59de <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b59de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b59e2:	ed2d 8b02 	vpush	{d8}
   b59e6:	b087      	sub	sp, #28
   b59e8:	af00      	add	r7, sp, #0
   b59ea:	4604      	mov	r4, r0
    if (isConnected()) {
   b59ec:	f7ff fe20 	bl	b5630 <_ZN4MQTT11isConnectedEv>
   b59f0:	4681      	mov	r9, r0
   b59f2:	b1f8      	cbz	r0, b5a34 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b59f4:	4621      	mov	r1, r4
   b59f6:	f107 0014 	add.w	r0, r7, #20
   b59fa:	f7ff fcf8 	bl	b53ee <_ZN4MQTT11MutexLockerC1EPS_>
   b59fe:	f000 f9fb 	bl	b5df8 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b5a02:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5a04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5a08:	4353      	muls	r3, r2
   b5a0a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b5a0c:	1a82      	subs	r2, r0, r2
   b5a0e:	429a      	cmp	r2, r3
   b5a10:	4606      	mov	r6, r0
   b5a12:	d803      	bhi.n	b5a1c <_ZN4MQTT4loopEv+0x3e>
   b5a14:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b5a16:	1a82      	subs	r2, r0, r2
   b5a18:	4293      	cmp	r3, r2
   b5a1a:	d221      	bcs.n	b5a60 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b5a1c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b5a20:	b17b      	cbz	r3, b5a42 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b5a22:	4620      	mov	r0, r4
   b5a24:	f001 faa6 	bl	b6f74 <_ZN9TCPClient4stopEv>
                return false;
   b5a28:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b5a2c:	f107 0014 	add.w	r0, r7, #20
   b5a30:	f7ff fce8 	bl	b5404 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5a34:	4648      	mov	r0, r9
   b5a36:	371c      	adds	r7, #28
   b5a38:	46bd      	mov	sp, r7
   b5a3a:	ecbd 8b02 	vpop	{d8}
   b5a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b5a42:	69e2      	ldr	r2, [r4, #28]
   b5a44:	21c0      	movs	r1, #192	; 0xc0
   b5a46:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b5a48:	69e2      	ldr	r2, [r4, #28]
   b5a4a:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b5a4c:	69e1      	ldr	r1, [r4, #28]
   b5a4e:	2202      	movs	r2, #2
   b5a50:	4620      	mov	r0, r4
   b5a52:	f001 f80a 	bl	b6a6a <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b5a56:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b5a5a:	2301      	movs	r3, #1
   b5a5c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b5a60:	4620      	mov	r0, r4
   b5a62:	f001 fa2d 	bl	b6ec0 <_ZN9TCPClient9availableEv>
   b5a66:	2800      	cmp	r0, #0
   b5a68:	d0e0      	beq.n	b5a2c <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b5a6a:	f107 0113 	add.w	r1, r7, #19
   b5a6e:	4620      	mov	r0, r4
   b5a70:	f7ff fd34 	bl	b54dc <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b5a74:	4683      	mov	fp, r0
   b5a76:	2800      	cmp	r0, #0
   b5a78:	d0d8      	beq.n	b5a2c <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b5a7a:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b5a7c:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b5a7e:	7819      	ldrb	r1, [r3, #0]
   b5a80:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b5a84:	2a30      	cmp	r2, #48	; 0x30
   b5a86:	d17f      	bne.n	b5b88 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b5a88:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b5a8c:	f1ba 0f00 	cmp.w	sl, #0
   b5a90:	d0cc      	beq.n	b5a2c <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5a92:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b5a96:	466a      	mov	r2, sp
   b5a98:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5a9c:	eb03 020c 	add.w	r2, r3, ip
   b5aa0:	7851      	ldrb	r1, [r2, #1]
   b5aa2:	7895      	ldrb	r5, [r2, #2]
   b5aa4:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b5aa8:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b5aaa:	f105 0208 	add.w	r2, r5, #8
   b5aae:	4669      	mov	r1, sp
   b5ab0:	08d2      	lsrs	r2, r2, #3
   b5ab2:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b5ab6:	4695      	mov	sp, r2
   b5ab8:	f10c 0203 	add.w	r2, ip, #3
   b5abc:	60fa      	str	r2, [r7, #12]
   b5abe:	eb03 0e02 	add.w	lr, r3, r2
   b5ac2:	eb0d 0205 	add.w	r2, sp, r5
   b5ac6:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b5ac8:	f8c7 d008 	str.w	sp, [r7, #8]
   b5acc:	607a      	str	r2, [r7, #4]
   b5ace:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b5ad2:	428a      	cmp	r2, r1
   b5ad4:	d006      	beq.n	b5ae4 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b5ad6:	460a      	mov	r2, r1
   b5ad8:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b5adc:	f802 8b01 	strb.w	r8, [r2], #1
   b5ae0:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b5ae2:	e7f4      	b.n	b5ace <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b5ae4:	2200      	movs	r2, #0
   b5ae6:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5ae8:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5aec:	68f9      	ldr	r1, [r7, #12]
   b5aee:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b5af2:	ebab 020c 	sub.w	r2, fp, ip
   b5af6:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5af8:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b5afc:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b00:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5b02:	d125      	bne.n	b5b50 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b04:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5b08:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b5b0a:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b0c:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b5b10:	f10c 0105 	add.w	r1, ip, #5
   b5b14:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b5b16:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b18:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b5b1c:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b5b1e:	69e3      	ldr	r3, [r4, #28]
   b5b20:	2240      	movs	r2, #64	; 0x40
   b5b22:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b5b24:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b26:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b5b2a:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b5b2e:	69e3      	ldr	r3, [r4, #28]
   b5b30:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b5b34:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b5b36:	69e3      	ldr	r3, [r4, #28]
   b5b38:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b5b3c:	69e1      	ldr	r1, [r4, #28]
   b5b3e:	2204      	movs	r2, #4
   b5b40:	4620      	mov	r0, r4
   b5b42:	f000 ff92 	bl	b6a6a <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b5b46:	6266      	str	r6, [r4, #36]	; 0x24
   b5b48:	ee18 3a10 	vmov	r3, s16
   b5b4c:	469d      	mov	sp, r3
   b5b4e:	e76d      	b.n	b5a2c <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b5b50:	f1b8 0f04 	cmp.w	r8, #4
   b5b54:	d115      	bne.n	b5b82 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5b56:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5b5a:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5b5c:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5b5e:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b5b62:	f10c 0105 	add.w	r1, ip, #5
   b5b66:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5b68:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5b6a:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5b6e:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b5b70:	69e3      	ldr	r3, [r4, #28]
   b5b72:	2250      	movs	r2, #80	; 0x50
   b5b74:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b5b76:	69e3      	ldr	r3, [r4, #28]
   b5b78:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5b7a:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b5b7e:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b5b80:	e7d5      	b.n	b5b2e <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b5b82:	4419      	add	r1, r3
   b5b84:	47d0      	blx	sl
   b5b86:	e7df      	b.n	b5b48 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b5b88:	2a50      	cmp	r2, #80	; 0x50
   b5b8a:	d108      	bne.n	b5b9e <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b5b8c:	789a      	ldrb	r2, [r3, #2]
   b5b8e:	78d9      	ldrb	r1, [r3, #3]
   b5b90:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b5b94:	b289      	uxth	r1, r1
   b5b96:	4620      	mov	r0, r4
   b5b98:	f7ff fed9 	bl	b594e <_ZN4MQTT14publishReleaseEt>
   b5b9c:	e746      	b.n	b5a2c <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b5b9e:	2a40      	cmp	r2, #64	; 0x40
   b5ba0:	d112      	bne.n	b5bc8 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b5ba2:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b5ba4:	2a00      	cmp	r2, #0
   b5ba6:	f43f af41 	beq.w	b5a2c <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b5baa:	f1bb 0f04 	cmp.w	fp, #4
   b5bae:	f47f af3d 	bne.w	b5a2c <_ZN4MQTT4loopEv+0x4e>
   b5bb2:	f011 0f06 	tst.w	r1, #6
   b5bb6:	f47f af39 	bne.w	b5a2c <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b5bba:	7899      	ldrb	r1, [r3, #2]
   b5bbc:	78d8      	ldrb	r0, [r3, #3]
   b5bbe:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b5bc2:	b280      	uxth	r0, r0
   b5bc4:	4790      	blx	r2
   b5bc6:	e731      	b.n	b5a2c <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b5bc8:	2a60      	cmp	r2, #96	; 0x60
   b5bca:	d108      	bne.n	b5bde <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b5bcc:	789a      	ldrb	r2, [r3, #2]
   b5bce:	78d9      	ldrb	r1, [r3, #3]
   b5bd0:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b5bd4:	b289      	uxth	r1, r1
   b5bd6:	4620      	mov	r0, r4
   b5bd8:	f7ff fedd 	bl	b5996 <_ZN4MQTT15publishCompleteEt>
   b5bdc:	e726      	b.n	b5a2c <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b5bde:	2a70      	cmp	r2, #112	; 0x70
   b5be0:	d0df      	beq.n	b5ba2 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b5be2:	2a90      	cmp	r2, #144	; 0x90
   b5be4:	f43f af22 	beq.w	b5a2c <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b5be8:	2ac0      	cmp	r2, #192	; 0xc0
   b5bea:	d10a      	bne.n	b5c02 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b5bec:	22d0      	movs	r2, #208	; 0xd0
   b5bee:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b5bf0:	69e3      	ldr	r3, [r4, #28]
   b5bf2:	2200      	movs	r2, #0
   b5bf4:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b5bf6:	69e1      	ldr	r1, [r4, #28]
   b5bf8:	2202      	movs	r2, #2
   b5bfa:	4620      	mov	r0, r4
   b5bfc:	f000 ff35 	bl	b6a6a <_ZN9TCPClient5writeEPKhj>
   b5c00:	e714      	b.n	b5a2c <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b5c02:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b5c04:	bf04      	itt	eq
   b5c06:	2300      	moveq	r3, #0
   b5c08:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b5c0c:	e70e      	b.n	b5a2c <_ZN4MQTT4loopEv+0x4e>

000b5c0e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b5c0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5c10:	4604      	mov	r4, r0
   b5c12:	460f      	mov	r7, r1
   b5c14:	4616      	mov	r6, r2
    if (isConnected()) {
   b5c16:	f7ff fd0b 	bl	b5630 <_ZN4MQTT11isConnectedEv>
   b5c1a:	4605      	mov	r5, r0
   b5c1c:	b310      	cbz	r0, b5c64 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b5c1e:	4621      	mov	r1, r4
   b5c20:	a801      	add	r0, sp, #4
   b5c22:	f7ff fbe4 	bl	b53ee <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b5c26:	8c23      	ldrh	r3, [r4, #32]
   b5c28:	3301      	adds	r3, #1
   b5c2a:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b5c2c:	b1eb      	cbz	r3, b5c6a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b5c2e:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b5c30:	8c23      	ldrh	r3, [r4, #32]
   b5c32:	69e2      	ldr	r2, [r4, #28]
   b5c34:	0a1b      	lsrs	r3, r3, #8
   b5c36:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b5c38:	69e3      	ldr	r3, [r4, #28]
   b5c3a:	8c22      	ldrh	r2, [r4, #32]
   b5c3c:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b5c3e:	69e2      	ldr	r2, [r4, #28]
   b5c40:	2307      	movs	r3, #7
   b5c42:	4639      	mov	r1, r7
   b5c44:	4620      	mov	r0, r4
   b5c46:	f7ff fcd7 	bl	b55f8 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b5c4a:	69e3      	ldr	r3, [r4, #28]
   b5c4c:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b5c4e:	3804      	subs	r0, #4
   b5c50:	b283      	uxth	r3, r0
   b5c52:	69e2      	ldr	r2, [r4, #28]
   b5c54:	2182      	movs	r1, #130	; 0x82
   b5c56:	4620      	mov	r0, r4
   b5c58:	f7ff fc92 	bl	b5580 <_ZN4MQTT5writeEhPht>
   b5c5c:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b5c5e:	a801      	add	r0, sp, #4
   b5c60:	f7ff fbd0 	bl	b5404 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5c64:	4628      	mov	r0, r5
   b5c66:	b003      	add	sp, #12
   b5c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b5c6a:	2301      	movs	r3, #1
   b5c6c:	e7df      	b.n	b5c2e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b5c6e <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b5c6e:	2200      	movs	r2, #0
   b5c70:	f7ff bfcd 	b.w	b5c0e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b5c74 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b5c74:	b510      	push	{r4, lr}
   b5c76:	4b06      	ldr	r3, [pc, #24]	; (b5c90 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b5c78:	6003      	str	r3, [r0, #0]
   b5c7a:	4604      	mov	r4, r0
	if (mutex) {
   b5c7c:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b5c7e:	b108      	cbz	r0, b5c84 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b5c80:	f000 f88a 	bl	b5d98 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b5c84:	4620      	mov	r0, r4
   b5c86:	f7fe fee7 	bl	b4a58 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b5c8a:	4620      	mov	r0, r4
   b5c8c:	bd10      	pop	{r4, pc}
   b5c8e:	bf00      	nop
   b5c90:	000b8490 	.word	0x000b8490

000b5c94 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b5c94:	b510      	push	{r4, lr}
   b5c96:	4604      	mov	r4, r0
}
   b5c98:	f7ff ffec 	bl	b5c74 <_ZN16OledWingAdafruitD1Ev>
   b5c9c:	4620      	mov	r0, r4
   b5c9e:	2170      	movs	r1, #112	; 0x70
   b5ca0:	f7fe f9fd 	bl	b409e <_ZdlPvj>
   b5ca4:	4620      	mov	r0, r4
   b5ca6:	bd10      	pop	{r4, pc}

000b5ca8 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b5ca8:	b530      	push	{r4, r5, lr}
   b5caa:	b085      	sub	sp, #20
   b5cac:	4604      	mov	r4, r0
   b5cae:	460d      	mov	r5, r1
   b5cb0:	f001 fc06 	bl	b74c0 <_Z19__fetch_global_Wirev>
   b5cb4:	4a10      	ldr	r2, [pc, #64]	; (b5cf8 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b5cb6:	4911      	ldr	r1, [pc, #68]	; (b5cfc <_ZN16OledWingAdafruitC1Ei+0x54>)
   b5cb8:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b5cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5cc0:	2180      	movs	r1, #128	; 0x80
   b5cc2:	4603      	mov	r3, r0
   b5cc4:	9200      	str	r2, [sp, #0]
   b5cc6:	4620      	mov	r0, r4
   b5cc8:	2220      	movs	r2, #32
   b5cca:	f7fe ff3d 	bl	b4b48 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b5cce:	4b0c      	ldr	r3, [pc, #48]	; (b5d00 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b5cd0:	6023      	str	r3, [r4, #0]
   b5cd2:	2300      	movs	r3, #0
   b5cd4:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b5cd8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5cdc:	f7ff fb36 	bl	b534c <_ZN8DebounceC1Ev>
   b5ce0:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5ce4:	f7ff fb32 	bl	b534c <_ZN8DebounceC1Ev>
   b5ce8:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5cec:	f7ff fb2e 	bl	b534c <_ZN8DebounceC1Ev>
}
   b5cf0:	4620      	mov	r0, r4
   b5cf2:	b005      	add	sp, #20
   b5cf4:	bd30      	pop	{r4, r5, pc}
   b5cf6:	bf00      	nop
   b5cf8:	00061a80 	.word	0x00061a80
   b5cfc:	000186a0 	.word	0x000186a0
   b5d00:	000b8490 	.word	0x000b8490

000b5d04 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b5d04:	b513      	push	{r0, r1, r4, lr}
   b5d06:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b5d08:	3050      	adds	r0, #80	; 0x50
   b5d0a:	f000 f83d 	bl	b5d88 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b5d0e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5d10:	07d9      	lsls	r1, r3, #31
   b5d12:	d505      	bpl.n	b5d20 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b5d14:	2202      	movs	r2, #2
   b5d16:	2104      	movs	r1, #4
   b5d18:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5d1c:	f7ff fb2a 	bl	b5374 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b5d20:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5d22:	079a      	lsls	r2, r3, #30
   b5d24:	d505      	bpl.n	b5d32 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b5d26:	2200      	movs	r2, #0
   b5d28:	2103      	movs	r1, #3
   b5d2a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5d2e:	f7ff fb21 	bl	b5374 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b5d32:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5d34:	075b      	lsls	r3, r3, #29
   b5d36:	d505      	bpl.n	b5d44 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b5d38:	2202      	movs	r2, #2
   b5d3a:	4611      	mov	r1, r2
   b5d3c:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5d40:	f7ff fb18 	bl	b5374 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b5d44:	2301      	movs	r3, #1
   b5d46:	9300      	str	r3, [sp, #0]
   b5d48:	223c      	movs	r2, #60	; 0x3c
   b5d4a:	2102      	movs	r1, #2
   b5d4c:	4620      	mov	r0, r4
   b5d4e:	f7ff f803 	bl	b4d58 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b5d52:	b002      	add	sp, #8
   b5d54:	bd10      	pop	{r4, pc}

000b5d56 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b5d56:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b5d58:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b5d5a:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b5d5c:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b5d5e:	d502      	bpl.n	b5d66 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b5d60:	3058      	adds	r0, #88	; 0x58
   b5d62:	f7ff fb14 	bl	b538e <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b5d66:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5d68:	079a      	lsls	r2, r3, #30
   b5d6a:	d503      	bpl.n	b5d74 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b5d6c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5d70:	f7ff fb0d 	bl	b538e <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b5d74:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5d76:	075b      	lsls	r3, r3, #29
   b5d78:	d505      	bpl.n	b5d86 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b5d7a:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b5d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b5d82:	f7ff bb04 	b.w	b538e <_ZN8Debounce6updateEv>
}
   b5d86:	bd10      	pop	{r4, pc}

000b5d88 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5d88:	b508      	push	{r3, lr}
   b5d8a:	4b02      	ldr	r3, [pc, #8]	; (b5d94 <os_mutex_create+0xc>)
   b5d8c:	681b      	ldr	r3, [r3, #0]
   b5d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5d90:	9301      	str	r3, [sp, #4]
   b5d92:	bd08      	pop	{r3, pc}
   b5d94:	00030248 	.word	0x00030248

000b5d98 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b5d98:	b508      	push	{r3, lr}
   b5d9a:	4b02      	ldr	r3, [pc, #8]	; (b5da4 <os_mutex_destroy+0xc>)
   b5d9c:	681b      	ldr	r3, [r3, #0]
   b5d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5da0:	9301      	str	r3, [sp, #4]
   b5da2:	bd08      	pop	{r3, pc}
   b5da4:	00030248 	.word	0x00030248

000b5da8 <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b5da8:	b508      	push	{r3, lr}
   b5daa:	4b02      	ldr	r3, [pc, #8]	; (b5db4 <os_mutex_lock+0xc>)
   b5dac:	681b      	ldr	r3, [r3, #0]
   b5dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5db0:	9301      	str	r3, [sp, #4]
   b5db2:	bd08      	pop	{r3, pc}
   b5db4:	00030248 	.word	0x00030248

000b5db8 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b5db8:	b508      	push	{r3, lr}
   b5dba:	4b02      	ldr	r3, [pc, #8]	; (b5dc4 <os_mutex_unlock+0xc>)
   b5dbc:	681b      	ldr	r3, [r3, #0]
   b5dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5dc0:	9301      	str	r3, [sp, #4]
   b5dc2:	bd08      	pop	{r3, pc}
   b5dc4:	00030248 	.word	0x00030248

000b5dc8 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5dc8:	b508      	push	{r3, lr}
   b5dca:	4b02      	ldr	r3, [pc, #8]	; (b5dd4 <os_mutex_recursive_create+0xc>)
   b5dcc:	681b      	ldr	r3, [r3, #0]
   b5dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5dd0:	9301      	str	r3, [sp, #4]
   b5dd2:	bd08      	pop	{r3, pc}
   b5dd4:	00030248 	.word	0x00030248

000b5dd8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5dd8:	b508      	push	{r3, lr}
   b5dda:	4b02      	ldr	r3, [pc, #8]	; (b5de4 <HAL_RNG_GetRandomNumber+0xc>)
   b5ddc:	681b      	ldr	r3, [r3, #0]
   b5dde:	685b      	ldr	r3, [r3, #4]
   b5de0:	9301      	str	r3, [sp, #4]
   b5de2:	bd08      	pop	{r3, pc}
   b5de4:	00030218 	.word	0x00030218

000b5de8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5de8:	b508      	push	{r3, lr}
   b5dea:	4b02      	ldr	r3, [pc, #8]	; (b5df4 <HAL_Delay_Microseconds+0xc>)
   b5dec:	681b      	ldr	r3, [r3, #0]
   b5dee:	68db      	ldr	r3, [r3, #12]
   b5df0:	9301      	str	r3, [sp, #4]
   b5df2:	bd08      	pop	{r3, pc}
   b5df4:	00030218 	.word	0x00030218

000b5df8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5df8:	b508      	push	{r3, lr}
   b5dfa:	4b02      	ldr	r3, [pc, #8]	; (b5e04 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5dfc:	681b      	ldr	r3, [r3, #0]
   b5dfe:	695b      	ldr	r3, [r3, #20]
   b5e00:	9301      	str	r3, [sp, #4]
   b5e02:	bd08      	pop	{r3, pc}
   b5e04:	00030218 	.word	0x00030218

000b5e08 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5e08:	b508      	push	{r3, lr}
   b5e0a:	4b02      	ldr	r3, [pc, #8]	; (b5e14 <HAL_Pin_Mode+0xc>)
   b5e0c:	681b      	ldr	r3, [r3, #0]
   b5e0e:	689b      	ldr	r3, [r3, #8]
   b5e10:	9301      	str	r3, [sp, #4]
   b5e12:	bd08      	pop	{r3, pc}
   b5e14:	0003022c 	.word	0x0003022c

000b5e18 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5e18:	b508      	push	{r3, lr}
   b5e1a:	4b02      	ldr	r3, [pc, #8]	; (b5e24 <HAL_Get_Pin_Mode+0xc>)
   b5e1c:	681b      	ldr	r3, [r3, #0]
   b5e1e:	68db      	ldr	r3, [r3, #12]
   b5e20:	9301      	str	r3, [sp, #4]
   b5e22:	bd08      	pop	{r3, pc}
   b5e24:	0003022c 	.word	0x0003022c

000b5e28 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5e28:	b508      	push	{r3, lr}
   b5e2a:	4b02      	ldr	r3, [pc, #8]	; (b5e34 <HAL_GPIO_Write+0xc>)
   b5e2c:	681b      	ldr	r3, [r3, #0]
   b5e2e:	691b      	ldr	r3, [r3, #16]
   b5e30:	9301      	str	r3, [sp, #4]
   b5e32:	bd08      	pop	{r3, pc}
   b5e34:	0003022c 	.word	0x0003022c

000b5e38 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5e38:	b508      	push	{r3, lr}
   b5e3a:	4b02      	ldr	r3, [pc, #8]	; (b5e44 <HAL_GPIO_Read+0xc>)
   b5e3c:	681b      	ldr	r3, [r3, #0]
   b5e3e:	695b      	ldr	r3, [r3, #20]
   b5e40:	9301      	str	r3, [sp, #4]
   b5e42:	bd08      	pop	{r3, pc}
   b5e44:	0003022c 	.word	0x0003022c

000b5e48 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b5e48:	b508      	push	{r3, lr}
   b5e4a:	4b02      	ldr	r3, [pc, #8]	; (b5e54 <hal_i2c_set_speed+0xc>)
   b5e4c:	681b      	ldr	r3, [r3, #0]
   b5e4e:	681b      	ldr	r3, [r3, #0]
   b5e50:	9301      	str	r3, [sp, #4]
   b5e52:	bd08      	pop	{r3, pc}
   b5e54:	00030228 	.word	0x00030228

000b5e58 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5e58:	b508      	push	{r3, lr}
   b5e5a:	4b02      	ldr	r3, [pc, #8]	; (b5e64 <hal_i2c_begin+0xc>)
   b5e5c:	681b      	ldr	r3, [r3, #0]
   b5e5e:	68db      	ldr	r3, [r3, #12]
   b5e60:	9301      	str	r3, [sp, #4]
   b5e62:	bd08      	pop	{r3, pc}
   b5e64:	00030228 	.word	0x00030228

000b5e68 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5e68:	b508      	push	{r3, lr}
   b5e6a:	4b02      	ldr	r3, [pc, #8]	; (b5e74 <hal_i2c_begin_transmission+0xc>)
   b5e6c:	681b      	ldr	r3, [r3, #0]
   b5e6e:	699b      	ldr	r3, [r3, #24]
   b5e70:	9301      	str	r3, [sp, #4]
   b5e72:	bd08      	pop	{r3, pc}
   b5e74:	00030228 	.word	0x00030228

000b5e78 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5e78:	b508      	push	{r3, lr}
   b5e7a:	4b02      	ldr	r3, [pc, #8]	; (b5e84 <hal_i2c_end_transmission+0xc>)
   b5e7c:	681b      	ldr	r3, [r3, #0]
   b5e7e:	69db      	ldr	r3, [r3, #28]
   b5e80:	9301      	str	r3, [sp, #4]
   b5e82:	bd08      	pop	{r3, pc}
   b5e84:	00030228 	.word	0x00030228

000b5e88 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5e88:	b508      	push	{r3, lr}
   b5e8a:	4b02      	ldr	r3, [pc, #8]	; (b5e94 <hal_i2c_write+0xc>)
   b5e8c:	681b      	ldr	r3, [r3, #0]
   b5e8e:	6a1b      	ldr	r3, [r3, #32]
   b5e90:	9301      	str	r3, [sp, #4]
   b5e92:	bd08      	pop	{r3, pc}
   b5e94:	00030228 	.word	0x00030228

000b5e98 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5e98:	b508      	push	{r3, lr}
   b5e9a:	4b02      	ldr	r3, [pc, #8]	; (b5ea4 <hal_i2c_available+0xc>)
   b5e9c:	681b      	ldr	r3, [r3, #0]
   b5e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5ea0:	9301      	str	r3, [sp, #4]
   b5ea2:	bd08      	pop	{r3, pc}
   b5ea4:	00030228 	.word	0x00030228

000b5ea8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5ea8:	b508      	push	{r3, lr}
   b5eaa:	4b02      	ldr	r3, [pc, #8]	; (b5eb4 <hal_i2c_read+0xc>)
   b5eac:	681b      	ldr	r3, [r3, #0]
   b5eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5eb0:	9301      	str	r3, [sp, #4]
   b5eb2:	bd08      	pop	{r3, pc}
   b5eb4:	00030228 	.word	0x00030228

000b5eb8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5eb8:	b508      	push	{r3, lr}
   b5eba:	4b02      	ldr	r3, [pc, #8]	; (b5ec4 <hal_i2c_peek+0xc>)
   b5ebc:	681b      	ldr	r3, [r3, #0]
   b5ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5ec0:	9301      	str	r3, [sp, #4]
   b5ec2:	bd08      	pop	{r3, pc}
   b5ec4:	00030228 	.word	0x00030228

000b5ec8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5ec8:	b508      	push	{r3, lr}
   b5eca:	4b02      	ldr	r3, [pc, #8]	; (b5ed4 <hal_i2c_flush+0xc>)
   b5ecc:	681b      	ldr	r3, [r3, #0]
   b5ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5ed0:	9301      	str	r3, [sp, #4]
   b5ed2:	bd08      	pop	{r3, pc}
   b5ed4:	00030228 	.word	0x00030228

000b5ed8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5ed8:	b508      	push	{r3, lr}
   b5eda:	4b02      	ldr	r3, [pc, #8]	; (b5ee4 <hal_i2c_is_enabled+0xc>)
   b5edc:	681b      	ldr	r3, [r3, #0]
   b5ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5ee0:	9301      	str	r3, [sp, #4]
   b5ee2:	bd08      	pop	{r3, pc}
   b5ee4:	00030228 	.word	0x00030228

000b5ee8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5ee8:	b508      	push	{r3, lr}
   b5eea:	4b02      	ldr	r3, [pc, #8]	; (b5ef4 <hal_i2c_init+0xc>)
   b5eec:	681b      	ldr	r3, [r3, #0]
   b5eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5ef0:	9301      	str	r3, [sp, #4]
   b5ef2:	bd08      	pop	{r3, pc}
   b5ef4:	00030228 	.word	0x00030228

000b5ef8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5ef8:	b508      	push	{r3, lr}
   b5efa:	4b02      	ldr	r3, [pc, #8]	; (b5f04 <if_index_to_name+0xc>)
   b5efc:	681b      	ldr	r3, [r3, #0]
   b5efe:	695b      	ldr	r3, [r3, #20]
   b5f00:	9301      	str	r3, [sp, #4]
   b5f02:	bd08      	pop	{r3, pc}
   b5f04:	0003026c 	.word	0x0003026c

000b5f08 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5f08:	b508      	push	{r3, lr}
   b5f0a:	4b02      	ldr	r3, [pc, #8]	; (b5f14 <inet_inet_ntop+0xc>)
   b5f0c:	681b      	ldr	r3, [r3, #0]
   b5f0e:	695b      	ldr	r3, [r3, #20]
   b5f10:	9301      	str	r3, [sp, #4]
   b5f12:	bd08      	pop	{r3, pc}
   b5f14:	00030264 	.word	0x00030264

000b5f18 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5f18:	b508      	push	{r3, lr}
   b5f1a:	4b02      	ldr	r3, [pc, #8]	; (b5f24 <inet_htonl+0xc>)
   b5f1c:	681b      	ldr	r3, [r3, #0]
   b5f1e:	6a1b      	ldr	r3, [r3, #32]
   b5f20:	9301      	str	r3, [sp, #4]
   b5f22:	bd08      	pop	{r3, pc}
   b5f24:	00030264 	.word	0x00030264

000b5f28 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5f28:	b508      	push	{r3, lr}
   b5f2a:	4b02      	ldr	r3, [pc, #8]	; (b5f34 <inet_htons+0xc>)
   b5f2c:	681b      	ldr	r3, [r3, #0]
   b5f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f30:	9301      	str	r3, [sp, #4]
   b5f32:	bd08      	pop	{r3, pc}
   b5f34:	00030264 	.word	0x00030264

000b5f38 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5f38:	b508      	push	{r3, lr}
   b5f3a:	4b02      	ldr	r3, [pc, #8]	; (b5f44 <netdb_freeaddrinfo+0xc>)
   b5f3c:	681b      	ldr	r3, [r3, #0]
   b5f3e:	689b      	ldr	r3, [r3, #8]
   b5f40:	9301      	str	r3, [sp, #4]
   b5f42:	bd08      	pop	{r3, pc}
   b5f44:	00030268 	.word	0x00030268

000b5f48 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5f48:	b508      	push	{r3, lr}
   b5f4a:	4b02      	ldr	r3, [pc, #8]	; (b5f54 <netdb_getaddrinfo+0xc>)
   b5f4c:	681b      	ldr	r3, [r3, #0]
   b5f4e:	68db      	ldr	r3, [r3, #12]
   b5f50:	9301      	str	r3, [sp, #4]
   b5f52:	bd08      	pop	{r3, pc}
   b5f54:	00030268 	.word	0x00030268

000b5f58 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5f58:	b508      	push	{r3, lr}
   b5f5a:	4b02      	ldr	r3, [pc, #8]	; (b5f64 <sock_setsockopt+0xc>)
   b5f5c:	681b      	ldr	r3, [r3, #0]
   b5f5e:	699b      	ldr	r3, [r3, #24]
   b5f60:	9301      	str	r3, [sp, #4]
   b5f62:	bd08      	pop	{r3, pc}
   b5f64:	00030238 	.word	0x00030238

000b5f68 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5f68:	b508      	push	{r3, lr}
   b5f6a:	4b02      	ldr	r3, [pc, #8]	; (b5f74 <sock_close+0xc>)
   b5f6c:	681b      	ldr	r3, [r3, #0]
   b5f6e:	69db      	ldr	r3, [r3, #28]
   b5f70:	9301      	str	r3, [sp, #4]
   b5f72:	bd08      	pop	{r3, pc}
   b5f74:	00030238 	.word	0x00030238

000b5f78 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5f78:	b508      	push	{r3, lr}
   b5f7a:	4b02      	ldr	r3, [pc, #8]	; (b5f84 <sock_connect+0xc>)
   b5f7c:	681b      	ldr	r3, [r3, #0]
   b5f7e:	6a1b      	ldr	r3, [r3, #32]
   b5f80:	9301      	str	r3, [sp, #4]
   b5f82:	bd08      	pop	{r3, pc}
   b5f84:	00030238 	.word	0x00030238

000b5f88 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5f88:	b508      	push	{r3, lr}
   b5f8a:	4b02      	ldr	r3, [pc, #8]	; (b5f94 <sock_recv+0xc>)
   b5f8c:	681b      	ldr	r3, [r3, #0]
   b5f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f90:	9301      	str	r3, [sp, #4]
   b5f92:	bd08      	pop	{r3, pc}
   b5f94:	00030238 	.word	0x00030238

000b5f98 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5f98:	b508      	push	{r3, lr}
   b5f9a:	4b02      	ldr	r3, [pc, #8]	; (b5fa4 <sock_send+0xc>)
   b5f9c:	681b      	ldr	r3, [r3, #0]
   b5f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5fa0:	9301      	str	r3, [sp, #4]
   b5fa2:	bd08      	pop	{r3, pc}
   b5fa4:	00030238 	.word	0x00030238

000b5fa8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5fa8:	b508      	push	{r3, lr}
   b5faa:	4b02      	ldr	r3, [pc, #8]	; (b5fb4 <sock_socket+0xc>)
   b5fac:	681b      	ldr	r3, [r3, #0]
   b5fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5fb0:	9301      	str	r3, [sp, #4]
   b5fb2:	bd08      	pop	{r3, pc}
   b5fb4:	00030238 	.word	0x00030238

000b5fb8 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5fb8:	b508      	push	{r3, lr}
   b5fba:	4b02      	ldr	r3, [pc, #8]	; (b5fc4 <hal_spi_begin+0xc>)
   b5fbc:	681b      	ldr	r3, [r3, #0]
   b5fbe:	681b      	ldr	r3, [r3, #0]
   b5fc0:	9301      	str	r3, [sp, #4]
   b5fc2:	bd08      	pop	{r3, pc}
   b5fc4:	00030230 	.word	0x00030230

000b5fc8 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5fc8:	b508      	push	{r3, lr}
   b5fca:	4b02      	ldr	r3, [pc, #8]	; (b5fd4 <hal_spi_transfer+0xc>)
   b5fcc:	681b      	ldr	r3, [r3, #0]
   b5fce:	695b      	ldr	r3, [r3, #20]
   b5fd0:	9301      	str	r3, [sp, #4]
   b5fd2:	bd08      	pop	{r3, pc}
   b5fd4:	00030230 	.word	0x00030230

000b5fd8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5fd8:	b508      	push	{r3, lr}
   b5fda:	4b02      	ldr	r3, [pc, #8]	; (b5fe4 <hal_spi_init+0xc>)
   b5fdc:	681b      	ldr	r3, [r3, #0]
   b5fde:	69db      	ldr	r3, [r3, #28]
   b5fe0:	9301      	str	r3, [sp, #4]
   b5fe2:	bd08      	pop	{r3, pc}
   b5fe4:	00030230 	.word	0x00030230

000b5fe8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5fe8:	b508      	push	{r3, lr}
   b5fea:	4b02      	ldr	r3, [pc, #8]	; (b5ff4 <hal_spi_is_enabled+0xc>)
   b5fec:	681b      	ldr	r3, [r3, #0]
   b5fee:	6a1b      	ldr	r3, [r3, #32]
   b5ff0:	9301      	str	r3, [sp, #4]
   b5ff2:	bd08      	pop	{r3, pc}
   b5ff4:	00030230 	.word	0x00030230

000b5ff8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5ff8:	b508      	push	{r3, lr}
   b5ffa:	4b02      	ldr	r3, [pc, #8]	; (b6004 <hal_spi_info+0xc>)
   b5ffc:	681b      	ldr	r3, [r3, #0]
   b5ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6000:	9301      	str	r3, [sp, #4]
   b6002:	bd08      	pop	{r3, pc}
   b6004:	00030230 	.word	0x00030230

000b6008 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6008:	b508      	push	{r3, lr}
   b600a:	4b02      	ldr	r3, [pc, #8]	; (b6014 <hal_spi_set_settings+0xc>)
   b600c:	681b      	ldr	r3, [r3, #0]
   b600e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6010:	9301      	str	r3, [sp, #4]
   b6012:	bd08      	pop	{r3, pc}
   b6014:	00030230 	.word	0x00030230

000b6018 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6018:	b508      	push	{r3, lr}
   b601a:	4b02      	ldr	r3, [pc, #8]	; (b6024 <hal_spi_acquire+0xc>)
   b601c:	681b      	ldr	r3, [r3, #0]
   b601e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6020:	9301      	str	r3, [sp, #4]
   b6022:	bd08      	pop	{r3, pc}
   b6024:	00030230 	.word	0x00030230

000b6028 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6028:	b508      	push	{r3, lr}
   b602a:	4b02      	ldr	r3, [pc, #8]	; (b6034 <hal_spi_release+0xc>)
   b602c:	681b      	ldr	r3, [r3, #0]
   b602e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6030:	9301      	str	r3, [sp, #4]
   b6032:	bd08      	pop	{r3, pc}
   b6034:	00030230 	.word	0x00030230

000b6038 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6038:	b508      	push	{r3, lr}
   b603a:	4b02      	ldr	r3, [pc, #8]	; (b6044 <hal_usart_write+0xc>)
   b603c:	681b      	ldr	r3, [r3, #0]
   b603e:	68db      	ldr	r3, [r3, #12]
   b6040:	9301      	str	r3, [sp, #4]
   b6042:	bd08      	pop	{r3, pc}
   b6044:	0003023c 	.word	0x0003023c

000b6048 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6048:	b508      	push	{r3, lr}
   b604a:	4b02      	ldr	r3, [pc, #8]	; (b6054 <hal_usart_available+0xc>)
   b604c:	681b      	ldr	r3, [r3, #0]
   b604e:	691b      	ldr	r3, [r3, #16]
   b6050:	9301      	str	r3, [sp, #4]
   b6052:	bd08      	pop	{r3, pc}
   b6054:	0003023c 	.word	0x0003023c

000b6058 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6058:	b508      	push	{r3, lr}
   b605a:	4b02      	ldr	r3, [pc, #8]	; (b6064 <hal_usart_read+0xc>)
   b605c:	681b      	ldr	r3, [r3, #0]
   b605e:	695b      	ldr	r3, [r3, #20]
   b6060:	9301      	str	r3, [sp, #4]
   b6062:	bd08      	pop	{r3, pc}
   b6064:	0003023c 	.word	0x0003023c

000b6068 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6068:	b508      	push	{r3, lr}
   b606a:	4b02      	ldr	r3, [pc, #8]	; (b6074 <hal_usart_peek+0xc>)
   b606c:	681b      	ldr	r3, [r3, #0]
   b606e:	699b      	ldr	r3, [r3, #24]
   b6070:	9301      	str	r3, [sp, #4]
   b6072:	bd08      	pop	{r3, pc}
   b6074:	0003023c 	.word	0x0003023c

000b6078 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6078:	b508      	push	{r3, lr}
   b607a:	4b02      	ldr	r3, [pc, #8]	; (b6084 <hal_usart_flush+0xc>)
   b607c:	681b      	ldr	r3, [r3, #0]
   b607e:	69db      	ldr	r3, [r3, #28]
   b6080:	9301      	str	r3, [sp, #4]
   b6082:	bd08      	pop	{r3, pc}
   b6084:	0003023c 	.word	0x0003023c

000b6088 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6088:	b508      	push	{r3, lr}
   b608a:	4b02      	ldr	r3, [pc, #8]	; (b6094 <hal_usart_is_enabled+0xc>)
   b608c:	681b      	ldr	r3, [r3, #0]
   b608e:	6a1b      	ldr	r3, [r3, #32]
   b6090:	9301      	str	r3, [sp, #4]
   b6092:	bd08      	pop	{r3, pc}
   b6094:	0003023c 	.word	0x0003023c

000b6098 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6098:	b508      	push	{r3, lr}
   b609a:	4b02      	ldr	r3, [pc, #8]	; (b60a4 <hal_usart_available_data_for_write+0xc>)
   b609c:	681b      	ldr	r3, [r3, #0]
   b609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b60a0:	9301      	str	r3, [sp, #4]
   b60a2:	bd08      	pop	{r3, pc}
   b60a4:	0003023c 	.word	0x0003023c

000b60a8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b60a8:	b508      	push	{r3, lr}
   b60aa:	4b02      	ldr	r3, [pc, #8]	; (b60b4 <hal_usart_init_ex+0xc>)
   b60ac:	681b      	ldr	r3, [r3, #0]
   b60ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b60b0:	9301      	str	r3, [sp, #4]
   b60b2:	bd08      	pop	{r3, pc}
   b60b4:	0003023c 	.word	0x0003023c

000b60b8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b60b8:	b508      	push	{r3, lr}
   b60ba:	4b02      	ldr	r3, [pc, #8]	; (b60c4 <HAL_USB_USART_Init+0xc>)
   b60bc:	681b      	ldr	r3, [r3, #0]
   b60be:	681b      	ldr	r3, [r3, #0]
   b60c0:	9301      	str	r3, [sp, #4]
   b60c2:	bd08      	pop	{r3, pc}
   b60c4:	0003024c 	.word	0x0003024c

000b60c8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b60c8:	b508      	push	{r3, lr}
   b60ca:	4b02      	ldr	r3, [pc, #8]	; (b60d4 <HAL_USB_USART_Available_Data+0xc>)
   b60cc:	681b      	ldr	r3, [r3, #0]
   b60ce:	691b      	ldr	r3, [r3, #16]
   b60d0:	9301      	str	r3, [sp, #4]
   b60d2:	bd08      	pop	{r3, pc}
   b60d4:	0003024c 	.word	0x0003024c

000b60d8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b60d8:	b508      	push	{r3, lr}
   b60da:	4b02      	ldr	r3, [pc, #8]	; (b60e4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b60dc:	681b      	ldr	r3, [r3, #0]
   b60de:	695b      	ldr	r3, [r3, #20]
   b60e0:	9301      	str	r3, [sp, #4]
   b60e2:	bd08      	pop	{r3, pc}
   b60e4:	0003024c 	.word	0x0003024c

000b60e8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b60e8:	b508      	push	{r3, lr}
   b60ea:	4b02      	ldr	r3, [pc, #8]	; (b60f4 <HAL_USB_USART_Receive_Data+0xc>)
   b60ec:	681b      	ldr	r3, [r3, #0]
   b60ee:	699b      	ldr	r3, [r3, #24]
   b60f0:	9301      	str	r3, [sp, #4]
   b60f2:	bd08      	pop	{r3, pc}
   b60f4:	0003024c 	.word	0x0003024c

000b60f8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b60f8:	b508      	push	{r3, lr}
   b60fa:	4b02      	ldr	r3, [pc, #8]	; (b6104 <HAL_USB_USART_Send_Data+0xc>)
   b60fc:	681b      	ldr	r3, [r3, #0]
   b60fe:	69db      	ldr	r3, [r3, #28]
   b6100:	9301      	str	r3, [sp, #4]
   b6102:	bd08      	pop	{r3, pc}
   b6104:	0003024c 	.word	0x0003024c

000b6108 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6108:	b508      	push	{r3, lr}
   b610a:	4b02      	ldr	r3, [pc, #8]	; (b6114 <HAL_USB_USART_Flush_Data+0xc>)
   b610c:	681b      	ldr	r3, [r3, #0]
   b610e:	6a1b      	ldr	r3, [r3, #32]
   b6110:	9301      	str	r3, [sp, #4]
   b6112:	bd08      	pop	{r3, pc}
   b6114:	0003024c 	.word	0x0003024c

000b6118 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6118:	b508      	push	{r3, lr}
   b611a:	4b02      	ldr	r3, [pc, #8]	; (b6124 <panic_+0xc>)
   b611c:	681b      	ldr	r3, [r3, #0]
   b611e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6120:	9301      	str	r3, [sp, #4]
   b6122:	bd08      	pop	{r3, pc}
   b6124:	00030260 	.word	0x00030260

000b6128 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6128:	b508      	push	{r3, lr}
   b612a:	4b02      	ldr	r3, [pc, #8]	; (b6134 <log_message+0xc>)
   b612c:	681b      	ldr	r3, [r3, #0]
   b612e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6130:	9301      	str	r3, [sp, #4]
   b6132:	bd08      	pop	{r3, pc}
   b6134:	00030260 	.word	0x00030260

000b6138 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6138:	b508      	push	{r3, lr}
   b613a:	4b02      	ldr	r3, [pc, #8]	; (b6144 <set_system_mode+0xc>)
   b613c:	681b      	ldr	r3, [r3, #0]
   b613e:	685b      	ldr	r3, [r3, #4]
   b6140:	9301      	str	r3, [sp, #4]
   b6142:	bd08      	pop	{r3, pc}
   b6144:	00030220 	.word	0x00030220

000b6148 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6148:	b508      	push	{r3, lr}
   b614a:	4b02      	ldr	r3, [pc, #8]	; (b6154 <system_delay_ms+0xc>)
   b614c:	681b      	ldr	r3, [r3, #0]
   b614e:	695b      	ldr	r3, [r3, #20]
   b6150:	9301      	str	r3, [sp, #4]
   b6152:	bd08      	pop	{r3, pc}
   b6154:	00030220 	.word	0x00030220

000b6158 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6158:	b508      	push	{r3, lr}
   b615a:	4b02      	ldr	r3, [pc, #8]	; (b6164 <system_thread_set_state+0xc>)
   b615c:	681b      	ldr	r3, [r3, #0]
   b615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6160:	9301      	str	r3, [sp, #4]
   b6162:	bd08      	pop	{r3, pc}
   b6164:	00030220 	.word	0x00030220

000b6168 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6168:	b508      	push	{r3, lr}
   b616a:	4b03      	ldr	r3, [pc, #12]	; (b6178 <system_ctrl_set_app_request_handler+0x10>)
   b616c:	681b      	ldr	r3, [r3, #0]
   b616e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6172:	9301      	str	r3, [sp, #4]
   b6174:	bd08      	pop	{r3, pc}
   b6176:	0000      	.short	0x0000
   b6178:	00030220 	.word	0x00030220

000b617c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b617c:	b508      	push	{r3, lr}
   b617e:	4b03      	ldr	r3, [pc, #12]	; (b618c <system_ctrl_set_result+0x10>)
   b6180:	681b      	ldr	r3, [r3, #0]
   b6182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6186:	9301      	str	r3, [sp, #4]
   b6188:	bd08      	pop	{r3, pc}
   b618a:	0000      	.short	0x0000
   b618c:	00030220 	.word	0x00030220

000b6190 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b6190:	b508      	push	{r3, lr}
   b6192:	4b02      	ldr	r3, [pc, #8]	; (b619c <spark_deviceID+0xc>)
   b6194:	681b      	ldr	r3, [r3, #0]
   b6196:	69db      	ldr	r3, [r3, #28]
   b6198:	9301      	str	r3, [sp, #4]
   b619a:	bd08      	pop	{r3, pc}
   b619c:	00030244 	.word	0x00030244

000b61a0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b61a0:	b508      	push	{r3, lr}
   b61a2:	4b02      	ldr	r3, [pc, #8]	; (b61ac <spark_set_random_seed_from_cloud_handler+0xc>)
   b61a4:	681b      	ldr	r3, [r3, #0]
   b61a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b61a8:	9301      	str	r3, [sp, #4]
   b61aa:	bd08      	pop	{r3, pc}
   b61ac:	00030244 	.word	0x00030244

000b61b0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b61b0:	b508      	push	{r3, lr}
   b61b2:	4b02      	ldr	r3, [pc, #8]	; (b61bc <network_connect+0xc>)
   b61b4:	681b      	ldr	r3, [r3, #0]
   b61b6:	685b      	ldr	r3, [r3, #4]
   b61b8:	9301      	str	r3, [sp, #4]
   b61ba:	bd08      	pop	{r3, pc}
   b61bc:	00030240 	.word	0x00030240

000b61c0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b61c0:	b508      	push	{r3, lr}
   b61c2:	4b02      	ldr	r3, [pc, #8]	; (b61cc <network_connecting+0xc>)
   b61c4:	681b      	ldr	r3, [r3, #0]
   b61c6:	689b      	ldr	r3, [r3, #8]
   b61c8:	9301      	str	r3, [sp, #4]
   b61ca:	bd08      	pop	{r3, pc}
   b61cc:	00030240 	.word	0x00030240

000b61d0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b61d0:	b508      	push	{r3, lr}
   b61d2:	4b02      	ldr	r3, [pc, #8]	; (b61dc <network_disconnect+0xc>)
   b61d4:	681b      	ldr	r3, [r3, #0]
   b61d6:	68db      	ldr	r3, [r3, #12]
   b61d8:	9301      	str	r3, [sp, #4]
   b61da:	bd08      	pop	{r3, pc}
   b61dc:	00030240 	.word	0x00030240

000b61e0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b61e0:	b508      	push	{r3, lr}
   b61e2:	4b02      	ldr	r3, [pc, #8]	; (b61ec <network_ready+0xc>)
   b61e4:	681b      	ldr	r3, [r3, #0]
   b61e6:	691b      	ldr	r3, [r3, #16]
   b61e8:	9301      	str	r3, [sp, #4]
   b61ea:	bd08      	pop	{r3, pc}
   b61ec:	00030240 	.word	0x00030240

000b61f0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b61f0:	b508      	push	{r3, lr}
   b61f2:	4b02      	ldr	r3, [pc, #8]	; (b61fc <network_on+0xc>)
   b61f4:	681b      	ldr	r3, [r3, #0]
   b61f6:	695b      	ldr	r3, [r3, #20]
   b61f8:	9301      	str	r3, [sp, #4]
   b61fa:	bd08      	pop	{r3, pc}
   b61fc:	00030240 	.word	0x00030240

000b6200 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6200:	b508      	push	{r3, lr}
   b6202:	4b02      	ldr	r3, [pc, #8]	; (b620c <network_off+0xc>)
   b6204:	681b      	ldr	r3, [r3, #0]
   b6206:	699b      	ldr	r3, [r3, #24]
   b6208:	9301      	str	r3, [sp, #4]
   b620a:	bd08      	pop	{r3, pc}
   b620c:	00030240 	.word	0x00030240

000b6210 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6210:	b508      	push	{r3, lr}
   b6212:	4b02      	ldr	r3, [pc, #8]	; (b621c <network_listen+0xc>)
   b6214:	681b      	ldr	r3, [r3, #0]
   b6216:	69db      	ldr	r3, [r3, #28]
   b6218:	9301      	str	r3, [sp, #4]
   b621a:	bd08      	pop	{r3, pc}
   b621c:	00030240 	.word	0x00030240

000b6220 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6220:	b508      	push	{r3, lr}
   b6222:	4b02      	ldr	r3, [pc, #8]	; (b622c <network_listening+0xc>)
   b6224:	681b      	ldr	r3, [r3, #0]
   b6226:	6a1b      	ldr	r3, [r3, #32]
   b6228:	9301      	str	r3, [sp, #4]
   b622a:	bd08      	pop	{r3, pc}
   b622c:	00030240 	.word	0x00030240

000b6230 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6230:	b508      	push	{r3, lr}
   b6232:	4b02      	ldr	r3, [pc, #8]	; (b623c <network_set_listen_timeout+0xc>)
   b6234:	681b      	ldr	r3, [r3, #0]
   b6236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6238:	9301      	str	r3, [sp, #4]
   b623a:	bd08      	pop	{r3, pc}
   b623c:	00030240 	.word	0x00030240

000b6240 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6240:	b508      	push	{r3, lr}
   b6242:	4b02      	ldr	r3, [pc, #8]	; (b624c <network_get_listen_timeout+0xc>)
   b6244:	681b      	ldr	r3, [r3, #0]
   b6246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6248:	9301      	str	r3, [sp, #4]
   b624a:	bd08      	pop	{r3, pc}
   b624c:	00030240 	.word	0x00030240

000b6250 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6250:	b508      	push	{r3, lr}
   b6252:	4b02      	ldr	r3, [pc, #8]	; (b625c <network_is_on+0xc>)
   b6254:	681b      	ldr	r3, [r3, #0]
   b6256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6258:	9301      	str	r3, [sp, #4]
   b625a:	bd08      	pop	{r3, pc}
   b625c:	00030240 	.word	0x00030240

000b6260 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6260:	b508      	push	{r3, lr}
   b6262:	4b02      	ldr	r3, [pc, #8]	; (b626c <network_is_off+0xc>)
   b6264:	681b      	ldr	r3, [r3, #0]
   b6266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6268:	9301      	str	r3, [sp, #4]
   b626a:	bd08      	pop	{r3, pc}
   b626c:	00030240 	.word	0x00030240

000b6270 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6270:	b508      	push	{r3, lr}
   b6272:	4b02      	ldr	r3, [pc, #8]	; (b627c <malloc+0xc>)
   b6274:	681b      	ldr	r3, [r3, #0]
   b6276:	681b      	ldr	r3, [r3, #0]
   b6278:	9301      	str	r3, [sp, #4]
   b627a:	bd08      	pop	{r3, pc}
   b627c:	0003021c 	.word	0x0003021c

000b6280 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6280:	b508      	push	{r3, lr}
   b6282:	4b02      	ldr	r3, [pc, #8]	; (b628c <free+0xc>)
   b6284:	681b      	ldr	r3, [r3, #0]
   b6286:	685b      	ldr	r3, [r3, #4]
   b6288:	9301      	str	r3, [sp, #4]
   b628a:	bd08      	pop	{r3, pc}
   b628c:	0003021c 	.word	0x0003021c

000b6290 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6290:	b508      	push	{r3, lr}
   b6292:	4b02      	ldr	r3, [pc, #8]	; (b629c <realloc+0xc>)
   b6294:	681b      	ldr	r3, [r3, #0]
   b6296:	689b      	ldr	r3, [r3, #8]
   b6298:	9301      	str	r3, [sp, #4]
   b629a:	bd08      	pop	{r3, pc}
   b629c:	0003021c 	.word	0x0003021c

000b62a0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b62a0:	b508      	push	{r3, lr}
   b62a2:	4b02      	ldr	r3, [pc, #8]	; (b62ac <vsnprintf+0xc>)
   b62a4:	681b      	ldr	r3, [r3, #0]
   b62a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b62a8:	9301      	str	r3, [sp, #4]
   b62aa:	bd08      	pop	{r3, pc}
   b62ac:	0003021c 	.word	0x0003021c

000b62b0 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b62b0:	b508      	push	{r3, lr}
   b62b2:	4b02      	ldr	r3, [pc, #8]	; (b62bc <__errno+0xc>)
   b62b4:	681b      	ldr	r3, [r3, #0]
   b62b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b62b8:	9301      	str	r3, [sp, #4]
   b62ba:	bd08      	pop	{r3, pc}
   b62bc:	0003021c 	.word	0x0003021c

000b62c0 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b62c0:	b508      	push	{r3, lr}
   b62c2:	4b02      	ldr	r3, [pc, #8]	; (b62cc <__assert_func+0xc>)
   b62c4:	681b      	ldr	r3, [r3, #0]
   b62c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b62c8:	9301      	str	r3, [sp, #4]
   b62ca:	bd08      	pop	{r3, pc}
   b62cc:	0003021c 	.word	0x0003021c

000b62d0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b62d0:	b508      	push	{r3, lr}
   b62d2:	4b02      	ldr	r3, [pc, #8]	; (b62dc <newlib_impure_ptr_callback+0xc>)
   b62d4:	681b      	ldr	r3, [r3, #0]
   b62d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b62d8:	9301      	str	r3, [sp, #4]
   b62da:	bd08      	pop	{r3, pc}
   b62dc:	0003021c 	.word	0x0003021c

000b62e0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b62e0:	2100      	movs	r1, #0
   b62e2:	f7ff bf31 	b.w	b6148 <system_delay_ms>
	...

000b62e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b62e8:	4802      	ldr	r0, [pc, #8]	; (b62f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b62ea:	2300      	movs	r3, #0
   b62ec:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b62ee:	f7ff bd6b 	b.w	b5dc8 <os_mutex_recursive_create>
   b62f2:	bf00      	nop
   b62f4:	2003e6c4 	.word	0x2003e6c4

000b62f8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b62f8:	2200      	movs	r2, #0
   b62fa:	6840      	ldr	r0, [r0, #4]
   b62fc:	4611      	mov	r1, r2
   b62fe:	f7ff bf8f 	b.w	b6220 <network_listening>

000b6302 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6302:	2200      	movs	r2, #0
   b6304:	6840      	ldr	r0, [r0, #4]
   b6306:	4611      	mov	r1, r2
   b6308:	f7ff bf9a 	b.w	b6240 <network_get_listen_timeout>

000b630c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b630c:	6840      	ldr	r0, [r0, #4]
   b630e:	2200      	movs	r2, #0
   b6310:	f7ff bf8e 	b.w	b6230 <network_set_listen_timeout>

000b6314 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6314:	6840      	ldr	r0, [r0, #4]
   b6316:	2200      	movs	r2, #0
   b6318:	f081 0101 	eor.w	r1, r1, #1
   b631c:	f7ff bf78 	b.w	b6210 <network_listen>

000b6320 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6320:	2300      	movs	r3, #0
   b6322:	6840      	ldr	r0, [r0, #4]
   b6324:	461a      	mov	r2, r3
   b6326:	4619      	mov	r1, r3
   b6328:	f7ff bf6a 	b.w	b6200 <network_off>

000b632c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b632c:	2300      	movs	r3, #0
   b632e:	6840      	ldr	r0, [r0, #4]
   b6330:	461a      	mov	r2, r3
   b6332:	4619      	mov	r1, r3
   b6334:	f7ff bf5c 	b.w	b61f0 <network_on>

000b6338 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6338:	2200      	movs	r2, #0
   b633a:	6840      	ldr	r0, [r0, #4]
   b633c:	4611      	mov	r1, r2
   b633e:	f7ff bf4f 	b.w	b61e0 <network_ready>

000b6342 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6342:	2200      	movs	r2, #0
   b6344:	6840      	ldr	r0, [r0, #4]
   b6346:	4611      	mov	r1, r2
   b6348:	f7ff bf3a 	b.w	b61c0 <network_connecting>

000b634c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b634c:	6840      	ldr	r0, [r0, #4]
   b634e:	2200      	movs	r2, #0
   b6350:	2102      	movs	r1, #2
   b6352:	f7ff bf3d 	b.w	b61d0 <network_disconnect>

000b6356 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6356:	2300      	movs	r3, #0
   b6358:	6840      	ldr	r0, [r0, #4]
   b635a:	461a      	mov	r2, r3
   b635c:	f7ff bf28 	b.w	b61b0 <network_connect>

000b6360 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6360:	4b02      	ldr	r3, [pc, #8]	; (b636c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6362:	2203      	movs	r2, #3
   b6364:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6366:	4a02      	ldr	r2, [pc, #8]	; (b6370 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6368:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b636a:	4770      	bx	lr
   b636c:	2003e6c8 	.word	0x2003e6c8
   b6370:	000b84f0 	.word	0x000b84f0

000b6374 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6374:	4770      	bx	lr

000b6376 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6378:	4606      	mov	r6, r0
   b637a:	4615      	mov	r5, r2
   b637c:	460c      	mov	r4, r1
   b637e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6380:	42bc      	cmp	r4, r7
   b6382:	d006      	beq.n	b6392 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6384:	6833      	ldr	r3, [r6, #0]
   b6386:	f814 1b01 	ldrb.w	r1, [r4], #1
   b638a:	689b      	ldr	r3, [r3, #8]
   b638c:	4630      	mov	r0, r6
   b638e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6390:	e7f6      	b.n	b6380 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6392:	4628      	mov	r0, r5
   b6394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6396 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6396:	7c00      	ldrb	r0, [r0, #16]
   b6398:	2200      	movs	r2, #0
   b639a:	f7ff bd75 	b.w	b5e88 <hal_i2c_write>

000b639e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b639e:	7c00      	ldrb	r0, [r0, #16]
   b63a0:	2100      	movs	r1, #0
   b63a2:	f7ff bd79 	b.w	b5e98 <hal_i2c_available>

000b63a6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b63a6:	7c00      	ldrb	r0, [r0, #16]
   b63a8:	2100      	movs	r1, #0
   b63aa:	f7ff bd7d 	b.w	b5ea8 <hal_i2c_read>

000b63ae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b63ae:	7c00      	ldrb	r0, [r0, #16]
   b63b0:	2100      	movs	r1, #0
   b63b2:	f7ff bd81 	b.w	b5eb8 <hal_i2c_peek>

000b63b6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b63b6:	7c00      	ldrb	r0, [r0, #16]
   b63b8:	2100      	movs	r1, #0
   b63ba:	f7ff bd85 	b.w	b5ec8 <hal_i2c_flush>

000b63be <_ZN7TwoWireD0Ev>:
   b63be:	b510      	push	{r4, lr}
   b63c0:	2114      	movs	r1, #20
   b63c2:	4604      	mov	r4, r0
   b63c4:	f7fd fe6b 	bl	b409e <_ZdlPvj>
   b63c8:	4620      	mov	r0, r4
   b63ca:	bd10      	pop	{r4, pc}

000b63cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b63cc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b63ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b63d2:	4604      	mov	r4, r0
   b63d4:	4608      	mov	r0, r1
   b63d6:	2100      	movs	r1, #0
   b63d8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b63dc:	4b03      	ldr	r3, [pc, #12]	; (b63ec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b63de:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b63e0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b63e2:	4611      	mov	r1, r2
   b63e4:	f7ff fd80 	bl	b5ee8 <hal_i2c_init>
}
   b63e8:	4620      	mov	r0, r4
   b63ea:	bd10      	pop	{r4, pc}
   b63ec:	000b852c 	.word	0x000b852c

000b63f0 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b63f0:	7c00      	ldrb	r0, [r0, #16]
   b63f2:	2200      	movs	r2, #0
   b63f4:	f7ff bd28 	b.w	b5e48 <hal_i2c_set_speed>

000b63f8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b63f8:	2300      	movs	r3, #0
   b63fa:	7c00      	ldrb	r0, [r0, #16]
   b63fc:	461a      	mov	r2, r3
   b63fe:	4619      	mov	r1, r3
   b6400:	f7ff bd2a 	b.w	b5e58 <hal_i2c_begin>

000b6404 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6404:	7c00      	ldrb	r0, [r0, #16]
   b6406:	2200      	movs	r2, #0
   b6408:	f7ff bd2e 	b.w	b5e68 <hal_i2c_begin_transmission>

000b640c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b640c:	b2c9      	uxtb	r1, r1
   b640e:	f7ff bff9 	b.w	b6404 <_ZN7TwoWire17beginTransmissionEh>

000b6412 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6412:	7c00      	ldrb	r0, [r0, #16]
   b6414:	2200      	movs	r2, #0
   b6416:	f7ff bd2f 	b.w	b5e78 <hal_i2c_end_transmission>

000b641a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b641a:	2101      	movs	r1, #1
   b641c:	f7ff bff9 	b.w	b6412 <_ZN7TwoWire15endTransmissionEh>

000b6420 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6420:	4770      	bx	lr

000b6422 <_ZN9IPAddressD0Ev>:
   b6422:	b510      	push	{r4, lr}
   b6424:	2118      	movs	r1, #24
   b6426:	4604      	mov	r4, r0
   b6428:	f7fd fe39 	bl	b409e <_ZdlPvj>
   b642c:	4620      	mov	r0, r4
   b642e:	bd10      	pop	{r4, pc}

000b6430 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6430:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6432:	7d03      	ldrb	r3, [r0, #20]
   b6434:	2b06      	cmp	r3, #6
{
   b6436:	b08d      	sub	sp, #52	; 0x34
   b6438:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b643a:	f100 0704 	add.w	r7, r0, #4
   b643e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6442:	d012      	beq.n	b646a <_ZNK9IPAddress7printToER5Print+0x3a>
   b6444:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6448:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b644c:	220a      	movs	r2, #10
   b644e:	4630      	mov	r0, r6
   b6450:	f000 f973 	bl	b673a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6454:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6456:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6458:	d019      	beq.n	b648e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b645a:	2c00      	cmp	r4, #0
   b645c:	d0f4      	beq.n	b6448 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b645e:	212e      	movs	r1, #46	; 0x2e
   b6460:	4630      	mov	r0, r6
   b6462:	f000 f951 	bl	b6708 <_ZN5Print5printEc>
   b6466:	4404      	add	r4, r0
   b6468:	e7ee      	b.n	b6448 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b646a:	232f      	movs	r3, #47	; 0x2f
   b646c:	466a      	mov	r2, sp
   b646e:	4639      	mov	r1, r7
   b6470:	200a      	movs	r0, #10
		buf[0] = 0;
   b6472:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6476:	f7ff fd47 	bl	b5f08 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b647a:	4668      	mov	r0, sp
   b647c:	f001 f9ec 	bl	b7858 <strlen>
   b6480:	6833      	ldr	r3, [r6, #0]
   b6482:	4602      	mov	r2, r0
   b6484:	68db      	ldr	r3, [r3, #12]
   b6486:	4669      	mov	r1, sp
   b6488:	4630      	mov	r0, r6
   b648a:	4798      	blx	r3
   b648c:	4604      	mov	r4, r0
    }
    return n;
}
   b648e:	4620      	mov	r0, r4
   b6490:	b00d      	add	sp, #52	; 0x34
   b6492:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6494 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6494:	b510      	push	{r4, lr}
   b6496:	4b05      	ldr	r3, [pc, #20]	; (b64ac <_ZN9IPAddressC1Ev+0x18>)
   b6498:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b649a:	2211      	movs	r2, #17
   b649c:	f840 3b04 	str.w	r3, [r0], #4
   b64a0:	2100      	movs	r1, #0
   b64a2:	f001 f999 	bl	b77d8 <memset>
}
   b64a6:	4620      	mov	r0, r4
   b64a8:	bd10      	pop	{r4, pc}
   b64aa:	bf00      	nop
   b64ac:	000b8554 	.word	0x000b8554

000b64b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b64b0:	4603      	mov	r3, r0
   b64b2:	4a07      	ldr	r2, [pc, #28]	; (b64d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b64b4:	b510      	push	{r4, lr}
   b64b6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b64ba:	f101 0210 	add.w	r2, r1, #16
   b64be:	f851 4b04 	ldr.w	r4, [r1], #4
   b64c2:	f843 4b04 	str.w	r4, [r3], #4
   b64c6:	4291      	cmp	r1, r2
   b64c8:	d1f9      	bne.n	b64be <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b64ca:	780a      	ldrb	r2, [r1, #0]
   b64cc:	701a      	strb	r2, [r3, #0]
}
   b64ce:	bd10      	pop	{r4, pc}
   b64d0:	000b8554 	.word	0x000b8554

000b64d4 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b64d4:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b64d6:	2b04      	cmp	r3, #4
   b64d8:	d104      	bne.n	b64e4 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b64da:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b64dc:	3800      	subs	r0, #0
   b64de:	bf18      	it	ne
   b64e0:	2001      	movne	r0, #1
   b64e2:	4770      	bx	lr
    } else if (version() == 6) {
   b64e4:	2b06      	cmp	r3, #6
   b64e6:	d107      	bne.n	b64f8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b64e8:	6843      	ldr	r3, [r0, #4]
   b64ea:	b93b      	cbnz	r3, b64fc <_ZNK9IPAddresscvbEv+0x28>
   b64ec:	6883      	ldr	r3, [r0, #8]
   b64ee:	b92b      	cbnz	r3, b64fc <_ZNK9IPAddresscvbEv+0x28>
   b64f0:	68c3      	ldr	r3, [r0, #12]
   b64f2:	b91b      	cbnz	r3, b64fc <_ZNK9IPAddresscvbEv+0x28>
   b64f4:	6900      	ldr	r0, [r0, #16]
   b64f6:	e7f1      	b.n	b64dc <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b64f8:	2000      	movs	r0, #0
   b64fa:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b64fc:	2001      	movs	r0, #1
}
   b64fe:	4770      	bx	lr

000b6500 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6500:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6502:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6506:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b650a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b650e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6512:	2304      	movs	r3, #4
   b6514:	6041      	str	r1, [r0, #4]
   b6516:	7503      	strb	r3, [r0, #20]
}
   b6518:	bd10      	pop	{r4, pc}
	...

000b651c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b651c:	b507      	push	{r0, r1, r2, lr}
   b651e:	4b06      	ldr	r3, [pc, #24]	; (b6538 <_ZN9IPAddressC1EPKh+0x1c>)
   b6520:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6522:	78cb      	ldrb	r3, [r1, #3]
   b6524:	9300      	str	r3, [sp, #0]
   b6526:	788b      	ldrb	r3, [r1, #2]
   b6528:	784a      	ldrb	r2, [r1, #1]
   b652a:	7809      	ldrb	r1, [r1, #0]
   b652c:	f7ff ffe8 	bl	b6500 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6530:	b003      	add	sp, #12
   b6532:	f85d fb04 	ldr.w	pc, [sp], #4
   b6536:	bf00      	nop
   b6538:	000b8554 	.word	0x000b8554

000b653c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b653c:	4b01      	ldr	r3, [pc, #4]	; (b6544 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b653e:	4a02      	ldr	r2, [pc, #8]	; (b6548 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6540:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6542:	4770      	bx	lr
   b6544:	2003e6d0 	.word	0x2003e6d0
   b6548:	000b8560 	.word	0x000b8560

000b654c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b654c:	2300      	movs	r3, #0
   b654e:	6840      	ldr	r0, [r0, #4]
   b6550:	461a      	mov	r2, r3
   b6552:	f7ff be2d 	b.w	b61b0 <network_connect>

000b6556 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6556:	6840      	ldr	r0, [r0, #4]
   b6558:	2200      	movs	r2, #0
   b655a:	2102      	movs	r1, #2
   b655c:	f7ff be38 	b.w	b61d0 <network_disconnect>

000b6560 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6560:	2200      	movs	r2, #0
   b6562:	6840      	ldr	r0, [r0, #4]
   b6564:	4611      	mov	r1, r2
   b6566:	f7ff be2b 	b.w	b61c0 <network_connecting>

000b656a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b656a:	2200      	movs	r2, #0
   b656c:	6840      	ldr	r0, [r0, #4]
   b656e:	4611      	mov	r1, r2
   b6570:	f7ff be36 	b.w	b61e0 <network_ready>

000b6574 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6574:	2300      	movs	r3, #0
   b6576:	6840      	ldr	r0, [r0, #4]
   b6578:	461a      	mov	r2, r3
   b657a:	4619      	mov	r1, r3
   b657c:	f7ff be38 	b.w	b61f0 <network_on>

000b6580 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6580:	2300      	movs	r3, #0
   b6582:	6840      	ldr	r0, [r0, #4]
   b6584:	461a      	mov	r2, r3
   b6586:	4619      	mov	r1, r3
   b6588:	f7ff be3a 	b.w	b6200 <network_off>

000b658c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b658c:	6840      	ldr	r0, [r0, #4]
   b658e:	2100      	movs	r1, #0
   b6590:	f7ff be5e 	b.w	b6250 <network_is_on>

000b6594 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6594:	6840      	ldr	r0, [r0, #4]
   b6596:	2100      	movs	r1, #0
   b6598:	f7ff be62 	b.w	b6260 <network_is_off>

000b659c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b659c:	6840      	ldr	r0, [r0, #4]
   b659e:	2200      	movs	r2, #0
   b65a0:	f081 0101 	eor.w	r1, r1, #1
   b65a4:	f7ff be34 	b.w	b6210 <network_listen>

000b65a8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b65a8:	6840      	ldr	r0, [r0, #4]
   b65aa:	2200      	movs	r2, #0
   b65ac:	f7ff be40 	b.w	b6230 <network_set_listen_timeout>

000b65b0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b65b0:	2200      	movs	r2, #0
   b65b2:	6840      	ldr	r0, [r0, #4]
   b65b4:	4611      	mov	r1, r2
   b65b6:	f7ff be43 	b.w	b6240 <network_get_listen_timeout>

000b65ba <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b65ba:	2200      	movs	r2, #0
   b65bc:	6840      	ldr	r0, [r0, #4]
   b65be:	4611      	mov	r1, r2
   b65c0:	f7ff be2e 	b.w	b6220 <network_listening>

000b65c4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b65c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b65c8:	b095      	sub	sp, #84	; 0x54
   b65ca:	4614      	mov	r4, r2
   b65cc:	460d      	mov	r5, r1
   b65ce:	4607      	mov	r7, r0
    IPAddress addr;
   b65d0:	f7ff ff60 	bl	b6494 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b65d4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b65d6:	221c      	movs	r2, #28
   b65d8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b65da:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b65dc:	f001 f8fc 	bl	b77d8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b65e0:	2340      	movs	r3, #64	; 0x40
   b65e2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b65e4:	4620      	mov	r0, r4
   b65e6:	466b      	mov	r3, sp
   b65e8:	aa0c      	add	r2, sp, #48	; 0x30
   b65ea:	2100      	movs	r1, #0
   b65ec:	f7ff fcac 	bl	b5f48 <netdb_getaddrinfo>
    if (!r) {
   b65f0:	4604      	mov	r4, r0
   b65f2:	2800      	cmp	r0, #0
   b65f4:	d14b      	bne.n	b668e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b65f6:	4602      	mov	r2, r0
   b65f8:	2101      	movs	r1, #1
   b65fa:	6868      	ldr	r0, [r5, #4]
   b65fc:	f7ff fdf0 	bl	b61e0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6600:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6602:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6604:	4622      	mov	r2, r4
   b6606:	6868      	ldr	r0, [r5, #4]
   b6608:	f7ff fdea 	bl	b61e0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b660c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b660e:	4681      	mov	r9, r0
        bool ok = false;
   b6610:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6612:	2e00      	cmp	r6, #0
   b6614:	d03b      	beq.n	b668e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6616:	2900      	cmp	r1, #0
   b6618:	d139      	bne.n	b668e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b661a:	6873      	ldr	r3, [r6, #4]
   b661c:	2b02      	cmp	r3, #2
   b661e:	d003      	beq.n	b6628 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6620:	2b0a      	cmp	r3, #10
   b6622:	d011      	beq.n	b6648 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6624:	69f6      	ldr	r6, [r6, #28]
   b6626:	e7f4      	b.n	b6612 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6628:	f1b8 0f00 	cmp.w	r8, #0
   b662c:	d0fa      	beq.n	b6624 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b662e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6630:	a806      	add	r0, sp, #24
   b6632:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6634:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6636:	f7ff ff71 	bl	b651c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b663a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b663c:	1d3c      	adds	r4, r7, #4
   b663e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6640:	682b      	ldr	r3, [r5, #0]
   b6642:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6644:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6646:	e7ed      	b.n	b6624 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6648:	f1b9 0f00 	cmp.w	r9, #0
   b664c:	d0ea      	beq.n	b6624 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b664e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6650:	2210      	movs	r2, #16
   b6652:	a801      	add	r0, sp, #4
   b6654:	f001 f8c0 	bl	b77d8 <memset>
                    a.v = 6;
   b6658:	2306      	movs	r3, #6
   b665a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b665e:	ad01      	add	r5, sp, #4
   b6660:	f104 0308 	add.w	r3, r4, #8
   b6664:	3418      	adds	r4, #24
   b6666:	6818      	ldr	r0, [r3, #0]
   b6668:	6859      	ldr	r1, [r3, #4]
   b666a:	462a      	mov	r2, r5
   b666c:	c203      	stmia	r2!, {r0, r1}
   b666e:	3308      	adds	r3, #8
   b6670:	42a3      	cmp	r3, r4
   b6672:	4615      	mov	r5, r2
   b6674:	d1f7      	bne.n	b6666 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6676:	a901      	add	r1, sp, #4
   b6678:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b667a:	ad07      	add	r5, sp, #28
   b667c:	f7ff ff18 	bl	b64b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6682:	1d3c      	adds	r4, r7, #4
   b6684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6686:	682b      	ldr	r3, [r5, #0]
   b6688:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b668a:	4649      	mov	r1, r9
   b668c:	e7ca      	b.n	b6624 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b668e:	9800      	ldr	r0, [sp, #0]
   b6690:	f7ff fc52 	bl	b5f38 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6694:	4638      	mov	r0, r7
   b6696:	b015      	add	sp, #84	; 0x54
   b6698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b669c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b669c:	4b02      	ldr	r3, [pc, #8]	; (b66a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b669e:	4a03      	ldr	r2, [pc, #12]	; (b66ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b66a0:	601a      	str	r2, [r3, #0]
   b66a2:	2200      	movs	r2, #0
   b66a4:	605a      	str	r2, [r3, #4]

} // spark
   b66a6:	4770      	bx	lr
   b66a8:	2003e6d4 	.word	0x2003e6d4
   b66ac:	000b856c 	.word	0x000b856c

000b66b0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b66b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b66b2:	4606      	mov	r6, r0
   b66b4:	460d      	mov	r5, r1
  size_t n = 0;
   b66b6:	188f      	adds	r7, r1, r2
   b66b8:	2400      	movs	r4, #0
  while (size--) {
   b66ba:	42bd      	cmp	r5, r7
   b66bc:	d00c      	beq.n	b66d8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b66be:	6833      	ldr	r3, [r6, #0]
   b66c0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b66c4:	689b      	ldr	r3, [r3, #8]
   b66c6:	4630      	mov	r0, r6
   b66c8:	4798      	blx	r3
     if (chunk>=0)
   b66ca:	1e03      	subs	r3, r0, #0
   b66cc:	db01      	blt.n	b66d2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b66ce:	441c      	add	r4, r3
  while (size--) {
   b66d0:	e7f3      	b.n	b66ba <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b66d2:	2c00      	cmp	r4, #0
   b66d4:	bf08      	it	eq
   b66d6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b66d8:	4620      	mov	r0, r4
   b66da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b66dc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b66dc:	b513      	push	{r0, r1, r4, lr}
   b66de:	4604      	mov	r4, r0
    }
   b66e0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b66e2:	b159      	cbz	r1, b66fc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b66e4:	9101      	str	r1, [sp, #4]
   b66e6:	f001 f8b7 	bl	b7858 <strlen>
   b66ea:	6823      	ldr	r3, [r4, #0]
   b66ec:	9901      	ldr	r1, [sp, #4]
   b66ee:	68db      	ldr	r3, [r3, #12]
   b66f0:	4602      	mov	r2, r0
   b66f2:	4620      	mov	r0, r4
    }
   b66f4:	b002      	add	sp, #8
   b66f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b66fa:	4718      	bx	r3
    }
   b66fc:	b002      	add	sp, #8
   b66fe:	bd10      	pop	{r4, pc}

000b6700 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6700:	b508      	push	{r3, lr}
  return write(str);
   b6702:	f7ff ffeb 	bl	b66dc <_ZN5Print5writeEPKc>
}
   b6706:	bd08      	pop	{r3, pc}

000b6708 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6708:	6803      	ldr	r3, [r0, #0]
   b670a:	689b      	ldr	r3, [r3, #8]
   b670c:	4718      	bx	r3

000b670e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b670e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6710:	210d      	movs	r1, #13
{
   b6712:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6714:	f7ff fff8 	bl	b6708 <_ZN5Print5printEc>
  n += print('\n');
   b6718:	210a      	movs	r1, #10
  size_t n = print('\r');
   b671a:	4604      	mov	r4, r0
  n += print('\n');
   b671c:	4628      	mov	r0, r5
   b671e:	f7ff fff3 	bl	b6708 <_ZN5Print5printEc>
  return n;
}
   b6722:	4420      	add	r0, r4
   b6724:	bd38      	pop	{r3, r4, r5, pc}

000b6726 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b6726:	b538      	push	{r3, r4, r5, lr}
   b6728:	4605      	mov	r5, r0
  return write(str);
   b672a:	f7ff ffd7 	bl	b66dc <_ZN5Print5writeEPKc>
   b672e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6730:	4628      	mov	r0, r5
   b6732:	f7ff ffec 	bl	b670e <_ZN5Print7printlnEv>
  return n;
}
   b6736:	4420      	add	r0, r4
   b6738:	bd38      	pop	{r3, r4, r5, pc}

000b673a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b673a:	b530      	push	{r4, r5, lr}
   b673c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b673e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6740:	2a01      	cmp	r2, #1
  *str = '\0';
   b6742:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6746:	bf98      	it	ls
   b6748:	220a      	movls	r2, #10
   b674a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b674c:	460d      	mov	r5, r1
   b674e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6752:	fb01 5312 	mls	r3, r1, r2, r5
   b6756:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b675a:	2b09      	cmp	r3, #9
   b675c:	bf94      	ite	ls
   b675e:	3330      	addls	r3, #48	; 0x30
   b6760:	3337      	addhi	r3, #55	; 0x37
   b6762:	b2db      	uxtb	r3, r3
  } while(n);
   b6764:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6766:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b676a:	d9ef      	bls.n	b674c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b676c:	4621      	mov	r1, r4
   b676e:	f7ff ffb5 	bl	b66dc <_ZN5Print5writeEPKc>
}
   b6772:	b00b      	add	sp, #44	; 0x2c
   b6774:	bd30      	pop	{r4, r5, pc}

000b6776 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b677a:	b086      	sub	sp, #24
   b677c:	af00      	add	r7, sp, #0
   b677e:	4605      	mov	r5, r0
   b6780:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6782:	1d38      	adds	r0, r7, #4
   b6784:	2114      	movs	r1, #20
{
   b6786:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6788:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b678a:	f7ff fd89 	bl	b62a0 <vsnprintf>

    if (n<bufsize)
   b678e:	2813      	cmp	r0, #19
   b6790:	d80e      	bhi.n	b67b0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6792:	1d39      	adds	r1, r7, #4
   b6794:	4628      	mov	r0, r5
   b6796:	f7ff ffa1 	bl	b66dc <_ZN5Print5writeEPKc>
   b679a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b679c:	b11e      	cbz	r6, b67a6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b679e:	4628      	mov	r0, r5
   b67a0:	f7ff ffb5 	bl	b670e <_ZN5Print7printlnEv>
   b67a4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b67a6:	4620      	mov	r0, r4
   b67a8:	3718      	adds	r7, #24
   b67aa:	46bd      	mov	sp, r7
   b67ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b67b0:	f100 0308 	add.w	r3, r0, #8
   b67b4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b67b8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b67ba:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b67be:	4622      	mov	r2, r4
   b67c0:	1c41      	adds	r1, r0, #1
   b67c2:	683b      	ldr	r3, [r7, #0]
   b67c4:	4668      	mov	r0, sp
   b67c6:	f7ff fd6b 	bl	b62a0 <vsnprintf>
  return write(str);
   b67ca:	4669      	mov	r1, sp
   b67cc:	4628      	mov	r0, r5
   b67ce:	f7ff ff85 	bl	b66dc <_ZN5Print5writeEPKc>
   b67d2:	4604      	mov	r4, r0
   b67d4:	46c5      	mov	sp, r8
   b67d6:	e7e1      	b.n	b679c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b67d8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b67d8:	4b01      	ldr	r3, [pc, #4]	; (b67e0 <_GLOBAL__sub_I_RGB+0x8>)
   b67da:	2200      	movs	r2, #0
   b67dc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b67de:	4770      	bx	lr
   b67e0:	2003e6dc 	.word	0x2003e6dc

000b67e4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b67e4:	2100      	movs	r1, #0
   b67e6:	f7ff bc1f 	b.w	b6028 <hal_spi_release>

000b67ea <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b67ea:	2100      	movs	r1, #0
   b67ec:	f7ff bc14 	b.w	b6018 <hal_spi_acquire>

000b67f0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b67f0:	b510      	push	{r4, lr}
   b67f2:	4604      	mov	r4, r0
   b67f4:	4608      	mov	r0, r1
{
    _spi = spi;
   b67f6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b67f8:	f7ff fbee 	bl	b5fd8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b67fc:	2300      	movs	r3, #0
   b67fe:	6063      	str	r3, [r4, #4]
}
   b6800:	4620      	mov	r0, r4
   b6802:	bd10      	pop	{r4, pc}

000b6804 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6804:	b513      	push	{r0, r1, r4, lr}
   b6806:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6808:	7800      	ldrb	r0, [r0, #0]
   b680a:	f7ff ffee 	bl	b67ea <_ZN8SPIClass4lockEv.isra.0>
   b680e:	b958      	cbnz	r0, b6828 <_ZN8SPIClass5beginEv+0x24>
   b6810:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6812:	9001      	str	r0, [sp, #4]
   b6814:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6818:	f7ff fbce 	bl	b5fb8 <hal_spi_begin>
        unlock();
   b681c:	9801      	ldr	r0, [sp, #4]
    }
}
   b681e:	b002      	add	sp, #8
   b6820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6824:	f7ff bfde 	b.w	b67e4 <_ZN8SPIClass6unlockEv.isra.0>
   b6828:	b002      	add	sp, #8
   b682a:	bd10      	pop	{r4, pc}

000b682c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b682c:	7800      	ldrb	r0, [r0, #0]
   b682e:	f7ff bfd9 	b.w	b67e4 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b6834 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6834:	0840      	lsrs	r0, r0, #1
{
   b6836:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6838:	6018      	str	r0, [r3, #0]
   b683a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b683c:	6818      	ldr	r0, [r3, #0]
   b683e:	4288      	cmp	r0, r1
   b6840:	b2e5      	uxtb	r5, r4
   b6842:	d906      	bls.n	b6852 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6844:	3401      	adds	r4, #1
   b6846:	2c08      	cmp	r4, #8
   b6848:	d002      	beq.n	b6850 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b684a:	0840      	lsrs	r0, r0, #1
   b684c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b684e:	e7f5      	b.n	b683c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6850:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6852:	4b02      	ldr	r3, [pc, #8]	; (b685c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6854:	5d5b      	ldrb	r3, [r3, r5]
   b6856:	7013      	strb	r3, [r2, #0]
}
   b6858:	bd30      	pop	{r4, r5, pc}
   b685a:	bf00      	nop
   b685c:	000b85a0 	.word	0x000b85a0

000b6860 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6864:	4606      	mov	r6, r0
   b6866:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6868:	7800      	ldrb	r0, [r0, #0]
{
   b686a:	460c      	mov	r4, r1
    CHECK(lock());
   b686c:	f7ff ffbd 	bl	b67ea <_ZN8SPIClass4lockEv.isra.0>
   b6870:	2800      	cmp	r0, #0
   b6872:	db1b      	blt.n	b68ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6874:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6876:	2214      	movs	r2, #20
   b6878:	2100      	movs	r1, #0
   b687a:	a809      	add	r0, sp, #36	; 0x24
   b687c:	f000 ffac 	bl	b77d8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6880:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6882:	2200      	movs	r2, #0
   b6884:	a909      	add	r1, sp, #36	; 0x24
   b6886:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b6888:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b688c:	f7ff fbb4 	bl	b5ff8 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6890:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6894:	b113      	cbz	r3, b689c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b6896:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b689a:	b155      	cbz	r5, b68b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b689c:	2700      	movs	r7, #0
   b689e:	46b9      	mov	r9, r7
   b68a0:	46b8      	mov	r8, r7
   b68a2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b68a4:	7923      	ldrb	r3, [r4, #4]
   b68a6:	b15d      	cbz	r5, b68c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b68a8:	b1c3      	cbz	r3, b68dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b68aa:	2000      	movs	r0, #0
}
   b68ac:	b00f      	add	sp, #60	; 0x3c
   b68ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b68b2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b68b6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b68ba:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b68be:	e7f1      	b.n	b68a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b68c0:	2b00      	cmp	r3, #0
   b68c2:	d135      	bne.n	b6930 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b68c4:	68a3      	ldr	r3, [r4, #8]
   b68c6:	4543      	cmp	r3, r8
   b68c8:	d108      	bne.n	b68dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b68ca:	f88d 9020 	strb.w	r9, [sp, #32]
   b68ce:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b68d2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b68d6:	89a3      	ldrh	r3, [r4, #12]
   b68d8:	429a      	cmp	r2, r3
   b68da:	d0e6      	beq.n	b68aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b68dc:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b68de:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b68e0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b68e4:	980a      	ldr	r0, [sp, #40]	; 0x28
   b68e6:	ab04      	add	r3, sp, #16
   b68e8:	f10d 020f 	add.w	r2, sp, #15
   b68ec:	f7ff ffa2 	bl	b6834 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b68f0:	7921      	ldrb	r1, [r4, #4]
   b68f2:	b985      	cbnz	r5, b6916 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b68f4:	b989      	cbnz	r1, b691a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b68f6:	68a3      	ldr	r3, [r4, #8]
   b68f8:	4543      	cmp	r3, r8
   b68fa:	d30e      	bcc.n	b691a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b68fc:	f88d 9020 	strb.w	r9, [sp, #32]
   b6900:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6904:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6908:	89a3      	ldrh	r3, [r4, #12]
   b690a:	429a      	cmp	r2, r3
   b690c:	d105      	bne.n	b691a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b690e:	9b04      	ldr	r3, [sp, #16]
   b6910:	4543      	cmp	r3, r8
   b6912:	d102      	bne.n	b691a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6914:	e7c9      	b.n	b68aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b6916:	2900      	cmp	r1, #0
   b6918:	d1f9      	bne.n	b690e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b691a:	2300      	movs	r3, #0
   b691c:	9301      	str	r3, [sp, #4]
   b691e:	7b63      	ldrb	r3, [r4, #13]
   b6920:	9300      	str	r3, [sp, #0]
   b6922:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b6926:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b6928:	7830      	ldrb	r0, [r6, #0]
   b692a:	f7ff fb6d 	bl	b6008 <hal_spi_set_settings>
   b692e:	e7bc      	b.n	b68aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b6930:	e9cd 5500 	strd	r5, r5, [sp]
   b6934:	462b      	mov	r3, r5
   b6936:	462a      	mov	r2, r5
   b6938:	2101      	movs	r1, #1
   b693a:	e7f5      	b.n	b6928 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b693c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b693c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b693e:	7800      	ldrb	r0, [r0, #0]
   b6940:	f7ff fb42 	bl	b5fc8 <hal_spi_transfer>
}
   b6944:	b2c0      	uxtb	r0, r0
   b6946:	bd08      	pop	{r3, pc}

000b6948 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6948:	b510      	push	{r4, lr}
   b694a:	4604      	mov	r4, r0
{
	free(buffer);
   b694c:	6800      	ldr	r0, [r0, #0]
   b694e:	f7ff fc97 	bl	b6280 <free>
}
   b6952:	4620      	mov	r0, r4
   b6954:	bd10      	pop	{r4, pc}

000b6956 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6956:	b510      	push	{r4, lr}
   b6958:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b695a:	6800      	ldr	r0, [r0, #0]
   b695c:	b108      	cbz	r0, b6962 <_ZN6String10invalidateEv+0xc>
   b695e:	f7ff fc8f 	bl	b6280 <free>
	buffer = NULL;
   b6962:	2300      	movs	r3, #0
	capacity = len = 0;
   b6964:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6968:	6023      	str	r3, [r4, #0]
}
   b696a:	bd10      	pop	{r4, pc}

000b696c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b696c:	b538      	push	{r3, r4, r5, lr}
   b696e:	4604      	mov	r4, r0
   b6970:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6972:	6800      	ldr	r0, [r0, #0]
   b6974:	3101      	adds	r1, #1
   b6976:	f7ff fc8b 	bl	b6290 <realloc>
	if (newbuffer) {
   b697a:	b110      	cbz	r0, b6982 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b697c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6980:	2001      	movs	r0, #1
	}
	return 0;
}
   b6982:	bd38      	pop	{r3, r4, r5, pc}

000b6984 <_ZN6String7reserveEj>:
{
   b6984:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6986:	6803      	ldr	r3, [r0, #0]
{
   b6988:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b698a:	b123      	cbz	r3, b6996 <_ZN6String7reserveEj+0x12>
   b698c:	6843      	ldr	r3, [r0, #4]
   b698e:	428b      	cmp	r3, r1
   b6990:	d301      	bcc.n	b6996 <_ZN6String7reserveEj+0x12>
   b6992:	2001      	movs	r0, #1
}
   b6994:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6996:	4620      	mov	r0, r4
   b6998:	f7ff ffe8 	bl	b696c <_ZN6String12changeBufferEj>
   b699c:	2800      	cmp	r0, #0
   b699e:	d0f9      	beq.n	b6994 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b69a0:	68a3      	ldr	r3, [r4, #8]
   b69a2:	2b00      	cmp	r3, #0
   b69a4:	d1f5      	bne.n	b6992 <_ZN6String7reserveEj+0xe>
   b69a6:	6822      	ldr	r2, [r4, #0]
   b69a8:	7013      	strb	r3, [r2, #0]
   b69aa:	e7f2      	b.n	b6992 <_ZN6String7reserveEj+0xe>

000b69ac <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b69ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b69ae:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b69b0:	4611      	mov	r1, r2
   b69b2:	9201      	str	r2, [sp, #4]
{
   b69b4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b69b6:	f7ff ffe5 	bl	b6984 <_ZN6String7reserveEj>
   b69ba:	9a01      	ldr	r2, [sp, #4]
   b69bc:	b928      	cbnz	r0, b69ca <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b69be:	4620      	mov	r0, r4
   b69c0:	f7ff ffc9 	bl	b6956 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b69c4:	4620      	mov	r0, r4
   b69c6:	b003      	add	sp, #12
   b69c8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b69ca:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b69cc:	4629      	mov	r1, r5
   b69ce:	6820      	ldr	r0, [r4, #0]
   b69d0:	f000 fef4 	bl	b77bc <memcpy>
	buffer[len] = 0;
   b69d4:	6822      	ldr	r2, [r4, #0]
   b69d6:	68a3      	ldr	r3, [r4, #8]
   b69d8:	2100      	movs	r1, #0
   b69da:	54d1      	strb	r1, [r2, r3]
	return *this;
   b69dc:	e7f2      	b.n	b69c4 <_ZN6String4copyEPKcj+0x18>

000b69de <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b69de:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b69e0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b69e2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b69e6:	4604      	mov	r4, r0
	len = 0;
   b69e8:	6083      	str	r3, [r0, #8]
	flags = 0;
   b69ea:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b69ec:	b141      	cbz	r1, b6a00 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b69ee:	4608      	mov	r0, r1
   b69f0:	9101      	str	r1, [sp, #4]
   b69f2:	f000 ff31 	bl	b7858 <strlen>
   b69f6:	9901      	ldr	r1, [sp, #4]
   b69f8:	4602      	mov	r2, r0
   b69fa:	4620      	mov	r0, r4
   b69fc:	f7ff ffd6 	bl	b69ac <_ZN6String4copyEPKcj>
}
   b6a00:	4620      	mov	r0, r4
   b6a02:	b002      	add	sp, #8
   b6a04:	bd10      	pop	{r4, pc}

000b6a06 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6a06:	b513      	push	{r0, r1, r4, lr}
   b6a08:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6a0a:	b159      	cbz	r1, b6a24 <_ZN6StringaSEPKc+0x1e>
   b6a0c:	4608      	mov	r0, r1
   b6a0e:	9101      	str	r1, [sp, #4]
   b6a10:	f000 ff22 	bl	b7858 <strlen>
   b6a14:	9901      	ldr	r1, [sp, #4]
   b6a16:	4602      	mov	r2, r0
   b6a18:	4620      	mov	r0, r4
   b6a1a:	f7ff ffc7 	bl	b69ac <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6a1e:	4620      	mov	r0, r4
   b6a20:	b002      	add	sp, #8
   b6a22:	bd10      	pop	{r4, pc}
	else invalidate();
   b6a24:	f7ff ff97 	bl	b6956 <_ZN6String10invalidateEv>
   b6a28:	e7f9      	b.n	b6a1e <_ZN6StringaSEPKc+0x18>
	...

000b6a2c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6a2c:	4b05      	ldr	r3, [pc, #20]	; (b6a44 <_GLOBAL__sub_I_System+0x18>)
   b6a2e:	2202      	movs	r2, #2
   b6a30:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6a32:	4b05      	ldr	r3, [pc, #20]	; (b6a48 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6a34:	4a05      	ldr	r2, [pc, #20]	; (b6a4c <_GLOBAL__sub_I_System+0x20>)
   b6a36:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6a38:	2000      	movs	r0, #0
   b6a3a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6a3e:	f7ff bb7b 	b.w	b6138 <set_system_mode>
   b6a42:	bf00      	nop
   b6a44:	2003e6f8 	.word	0x2003e6f8
   b6a48:	2003e6ec 	.word	0x2003e6ec
   b6a4c:	ffff0000 	.word	0xffff0000

000b6a50 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b6a50:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6a52:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b6a54:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6a58:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6a5a:	2201      	movs	r2, #1
   b6a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6a60:	f10d 0107 	add.w	r1, sp, #7
   b6a64:	47a0      	blx	r4
}
   b6a66:	b002      	add	sp, #8
   b6a68:	bd10      	pop	{r4, pc}

000b6a6a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b6a6a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6a6c:	6803      	ldr	r3, [r0, #0]
   b6a6e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6a70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6a74:	46a4      	mov	ip, r4
}
   b6a76:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6a7a:	4760      	bx	ip

000b6a7c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6a7c:	b513      	push	{r0, r1, r4, lr}
   b6a7e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6a80:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6a82:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b6a86:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6a88:	f10d 0107 	add.w	r1, sp, #7
   b6a8c:	2201      	movs	r2, #1
   b6a8e:	47a0      	blx	r4
}
   b6a90:	b002      	add	sp, #8
   b6a92:	bd10      	pop	{r4, pc}

000b6a94 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b6a94:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6a96:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6a98:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6a9c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6aa0:	429a      	cmp	r2, r3
int TCPClient::read() {
   b6aa2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6aa4:	d008      	beq.n	b6ab8 <_ZN9TCPClient4readEv+0x24>
   b6aa6:	6963      	ldr	r3, [r4, #20]
   b6aa8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6aac:	1c51      	adds	r1, r2, #1
   b6aae:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b6ab2:	4413      	add	r3, r2
   b6ab4:	7918      	ldrb	r0, [r3, #4]
}
   b6ab6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6ab8:	6803      	ldr	r3, [r0, #0]
   b6aba:	691b      	ldr	r3, [r3, #16]
   b6abc:	4798      	blx	r3
   b6abe:	2800      	cmp	r0, #0
   b6ac0:	d1f1      	bne.n	b6aa6 <_ZN9TCPClient4readEv+0x12>
   b6ac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6ac6:	e7f6      	b.n	b6ab6 <_ZN9TCPClient4readEv+0x22>

000b6ac8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6ac8:	4770      	bx	lr

000b6aca <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b6aca:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b6acc:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b6ace:	43c0      	mvns	r0, r0
   b6ad0:	0fc0      	lsrs	r0, r0, #31
   b6ad2:	4770      	bx	lr

000b6ad4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6ad4:	4770      	bx	lr
	...

000b6ad8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6ad8:	4b06      	ldr	r3, [pc, #24]	; (b6af4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6ada:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6adc:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6ade:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6ae2:	d005      	beq.n	b6af0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6ae4:	4608      	mov	r0, r1
   b6ae6:	f000 fd51 	bl	b758c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6aea:	2800      	cmp	r0, #0
   b6aec:	bf08      	it	eq
   b6aee:	2400      	moveq	r4, #0
      }
   b6af0:	4620      	mov	r0, r4
   b6af2:	bd10      	pop	{r4, pc}
   b6af4:	000b84e0 	.word	0x000b84e0

000b6af8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6af8:	b510      	push	{r4, lr}
   b6afa:	21ac      	movs	r1, #172	; 0xac
   b6afc:	4604      	mov	r4, r0
   b6afe:	f7fd face 	bl	b409e <_ZdlPvj>
   b6b02:	4620      	mov	r0, r4
   b6b04:	bd10      	pop	{r4, pc}

000b6b06 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6b06:	21ac      	movs	r1, #172	; 0xac
   b6b08:	f7fd bac9 	b.w	b409e <_ZdlPvj>

000b6b0c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6b10:	f04f 0800 	mov.w	r8, #0
   b6b14:	b086      	sub	sp, #24
   b6b16:	461c      	mov	r4, r3
   b6b18:	f8c0 8004 	str.w	r8, [r0, #4]
   b6b1c:	4605      	mov	r5, r0
   b6b1e:	460e      	mov	r6, r1
   b6b20:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6b22:	4641      	mov	r1, r8
   b6b24:	2210      	movs	r2, #16
   b6b26:	a802      	add	r0, sp, #8
   b6b28:	f000 fe56 	bl	b77d8 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6b2c:	1c63      	adds	r3, r4, #1
   b6b2e:	d009      	beq.n	b6b44 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6b30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6b34:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6b38:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6b3c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6b40:	435c      	muls	r4, r3
   b6b42:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6b44:	6968      	ldr	r0, [r5, #20]
   b6b46:	2310      	movs	r3, #16
   b6b48:	9300      	str	r3, [sp, #0]
   b6b4a:	6800      	ldr	r0, [r0, #0]
   b6b4c:	ab02      	add	r3, sp, #8
   b6b4e:	f241 0205 	movw	r2, #4101	; 0x1005
   b6b52:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6b56:	f7ff f9ff 	bl	b5f58 <sock_setsockopt>
    if (ret < 0) {
   b6b5a:	2800      	cmp	r0, #0
   b6b5c:	da07      	bge.n	b6b6e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b6b5e:	f7ff fba7 	bl	b62b0 <__errno>
   b6b62:	6803      	ldr	r3, [r0, #0]
   b6b64:	606b      	str	r3, [r5, #4]
        return 0;
   b6b66:	2000      	movs	r0, #0
}
   b6b68:	b006      	add	sp, #24
   b6b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b6b6e:	6968      	ldr	r0, [r5, #20]
   b6b70:	2300      	movs	r3, #0
   b6b72:	6800      	ldr	r0, [r0, #0]
   b6b74:	463a      	mov	r2, r7
   b6b76:	4631      	mov	r1, r6
   b6b78:	f7ff fa0e 	bl	b5f98 <sock_send>
    if (ret < 0) {
   b6b7c:	1e03      	subs	r3, r0, #0
   b6b7e:	dbee      	blt.n	b6b5e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b6b80:	4618      	mov	r0, r3
   b6b82:	e7f1      	b.n	b6b68 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b6b84 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b6b84:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b6b86:	6984      	ldr	r4, [r0, #24]
   b6b88:	4b0a      	ldr	r3, [pc, #40]	; (b6bb4 <_ZN9TCPClientD1Ev+0x30>)
   b6b8a:	6003      	str	r3, [r0, #0]
   b6b8c:	4605      	mov	r5, r0
   b6b8e:	b17c      	cbz	r4, b6bb0 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b6b90:	6863      	ldr	r3, [r4, #4]
   b6b92:	3b01      	subs	r3, #1
   b6b94:	6063      	str	r3, [r4, #4]
   b6b96:	b95b      	cbnz	r3, b6bb0 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b6b98:	6823      	ldr	r3, [r4, #0]
   b6b9a:	4620      	mov	r0, r4
   b6b9c:	689b      	ldr	r3, [r3, #8]
   b6b9e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6ba0:	68a3      	ldr	r3, [r4, #8]
   b6ba2:	3b01      	subs	r3, #1
   b6ba4:	60a3      	str	r3, [r4, #8]
   b6ba6:	b91b      	cbnz	r3, b6bb0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b6ba8:	6823      	ldr	r3, [r4, #0]
   b6baa:	4620      	mov	r0, r4
   b6bac:	68db      	ldr	r3, [r3, #12]
   b6bae:	4798      	blx	r3
   b6bb0:	4628      	mov	r0, r5
   b6bb2:	bd38      	pop	{r3, r4, r5, pc}
   b6bb4:	000b85e4 	.word	0x000b85e4

000b6bb8 <_ZN9TCPClientD0Ev>:
   b6bb8:	b510      	push	{r4, lr}
   b6bba:	4604      	mov	r4, r0
   b6bbc:	f7ff ffe2 	bl	b6b84 <_ZN9TCPClientD1Ev>
   b6bc0:	4620      	mov	r0, r4
   b6bc2:	211c      	movs	r1, #28
   b6bc4:	f7fd fa6b 	bl	b409e <_ZdlPvj>
   b6bc8:	4620      	mov	r0, r4
   b6bca:	bd10      	pop	{r4, pc}

000b6bcc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b6bcc:	b530      	push	{r4, r5, lr}
   b6bce:	b087      	sub	sp, #28
   b6bd0:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b6bd2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b6bd4:	4668      	mov	r0, sp
   b6bd6:	f7ff fca1 	bl	b651c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6bdc:	3404      	adds	r4, #4
   b6bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6be0:	682b      	ldr	r3, [r5, #0]
   b6be2:	7023      	strb	r3, [r4, #0]
    }
   b6be4:	b007      	add	sp, #28
   b6be6:	bd30      	pop	{r4, r5, pc}

000b6be8 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b6be8:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b6bea:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b6bec:	4b05      	ldr	r3, [pc, #20]	; (b6c04 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b6bee:	4604      	mov	r4, r0
   b6bf0:	358c      	adds	r5, #140	; 0x8c
   b6bf2:	f844 3b04 	str.w	r3, [r4], #4
   b6bf6:	4606      	mov	r6, r0
   b6bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6bfc:	682b      	ldr	r3, [r5, #0]
   b6bfe:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b6c00:	4630      	mov	r0, r6
   b6c02:	bd70      	pop	{r4, r5, r6, pc}
   b6c04:	000b8554 	.word	0x000b8554

000b6c08 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6c0c:	4698      	mov	r8, r3
    stop();
   b6c0e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6c10:	b093      	sub	sp, #76	; 0x4c
   b6c12:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b6c14:	2400      	movs	r4, #0
    stop();
   b6c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6c18:	4606      	mov	r6, r0
   b6c1a:	4617      	mov	r7, r2
    stop();
   b6c1c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6c1e:	4628      	mov	r0, r5
   b6c20:	466b      	mov	r3, sp
   b6c22:	4622      	mov	r2, r4
   b6c24:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b6c26:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6c28:	f7ff f98e 	bl	b5f48 <netdb_getaddrinfo>
   b6c2c:	4605      	mov	r5, r0
   b6c2e:	2800      	cmp	r0, #0
   b6c30:	d163      	bne.n	b6cfa <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b6c32:	9b00      	ldr	r3, [sp, #0]
   b6c34:	2b00      	cmp	r3, #0
   b6c36:	d04b      	beq.n	b6cd0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6c38:	695b      	ldr	r3, [r3, #20]
   b6c3a:	2b00      	cmp	r3, #0
   b6c3c:	d048      	beq.n	b6cd0 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b6c3e:	a806      	add	r0, sp, #24
   b6c40:	f7ff fc28 	bl	b6494 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b6c44:	9b00      	ldr	r3, [sp, #0]
   b6c46:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6c48:	7863      	ldrb	r3, [r4, #1]
   b6c4a:	2b02      	cmp	r3, #2
   b6c4c:	d104      	bne.n	b6c58 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b6c4e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6c50:	a806      	add	r0, sp, #24
   b6c52:	f7ff ffbb 	bl	b6bcc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b6c56:	e026      	b.n	b6ca6 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6c58:	2b0a      	cmp	r3, #10
   b6c5a:	d124      	bne.n	b6ca6 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b6c5c:	2211      	movs	r2, #17
   b6c5e:	4629      	mov	r1, r5
   b6c60:	a801      	add	r0, sp, #4
   b6c62:	f000 fdb9 	bl	b77d8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6c66:	68a3      	ldr	r3, [r4, #8]
   b6c68:	2b00      	cmp	r3, #0
   b6c6a:	d038      	beq.n	b6cde <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6c6c:	f104 0308 	add.w	r3, r4, #8
   b6c70:	f10d 0c04 	add.w	ip, sp, #4
   b6c74:	3418      	adds	r4, #24
   b6c76:	6818      	ldr	r0, [r3, #0]
   b6c78:	6859      	ldr	r1, [r3, #4]
   b6c7a:	4662      	mov	r2, ip
   b6c7c:	c203      	stmia	r2!, {r0, r1}
   b6c7e:	3308      	adds	r3, #8
   b6c80:	42a3      	cmp	r3, r4
   b6c82:	4694      	mov	ip, r2
   b6c84:	d1f7      	bne.n	b6c76 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b6c86:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6c88:	a901      	add	r1, sp, #4
   b6c8a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b6c8c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6c90:	f7ff fc0e 	bl	b64b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6c94:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6c98:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6c9c:	ac07      	add	r4, sp, #28
   b6c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ca0:	f8dc 3000 	ldr.w	r3, [ip]
   b6ca4:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b6ca6:	a806      	add	r0, sp, #24
   b6ca8:	f7ff fc14 	bl	b64d4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b6cac:	b180      	cbz	r0, b6cd0 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b6cae:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b6cb0:	ad07      	add	r5, sp, #28
   b6cb2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b6cb6:	4b12      	ldr	r3, [pc, #72]	; (b6d00 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b6cb8:	930c      	str	r3, [sp, #48]	; 0x30
   b6cba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6cbc:	ac0d      	add	r4, sp, #52	; 0x34
   b6cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6cc0:	682b      	ldr	r3, [r5, #0]
   b6cc2:	7023      	strb	r3, [r4, #0]
   b6cc4:	463a      	mov	r2, r7
   b6cc6:	4643      	mov	r3, r8
   b6cc8:	a90c      	add	r1, sp, #48	; 0x30
   b6cca:	4630      	mov	r0, r6
   b6ccc:	47c8      	blx	r9
   b6cce:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b6cd0:	9800      	ldr	r0, [sp, #0]
   b6cd2:	f7ff f931 	bl	b5f38 <netdb_freeaddrinfo>
}
   b6cd6:	4628      	mov	r0, r5
   b6cd8:	b013      	add	sp, #76	; 0x4c
   b6cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6cde:	68e3      	ldr	r3, [r4, #12]
   b6ce0:	2b00      	cmp	r3, #0
   b6ce2:	d1c3      	bne.n	b6c6c <_ZN9TCPClient7connectEPKctm+0x64>
   b6ce4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b6ce8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b6cec:	f7ff f914 	bl	b5f18 <inet_htonl>
   b6cf0:	4581      	cmp	r9, r0
   b6cf2:	d1bb      	bne.n	b6c6c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b6cf4:	f104 0114 	add.w	r1, r4, #20
   b6cf8:	e7aa      	b.n	b6c50 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6cfa:	4625      	mov	r5, r4
   b6cfc:	e7e8      	b.n	b6cd0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6cfe:	bf00      	nop
   b6d00:	000b8554 	.word	0x000b8554

000b6d04 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b6d04:	b538      	push	{r3, r4, r5, lr}
   b6d06:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b6d08:	681a      	ldr	r2, [r3, #0]
   b6d0a:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b6d0c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b6d0e:	da10      	bge.n	b6d32 <_ZN9TCPClient9connectedEv+0x2e>
   b6d10:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6d14:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6d18:	429a      	cmp	r2, r3
   b6d1a:	d10a      	bne.n	b6d32 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b6d1c:	6803      	ldr	r3, [r0, #0]
   b6d1e:	691b      	ldr	r3, [r3, #16]
   b6d20:	4798      	blx	r3
        if (!rv) {
   b6d22:	4604      	mov	r4, r0
   b6d24:	b928      	cbnz	r0, b6d32 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b6d26:	682b      	ldr	r3, [r5, #0]
   b6d28:	4628      	mov	r0, r5
   b6d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6d2c:	4798      	blx	r3
        rv = available();
   b6d2e:	4620      	mov	r0, r4
}
   b6d30:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b6d32:	2001      	movs	r0, #1
   b6d34:	e7fc      	b.n	b6d30 <_ZN9TCPClient9connectedEv+0x2c>

000b6d36 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b6d36:	b510      	push	{r4, lr}
   b6d38:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6d3a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6d3e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6d42:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b6d44:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6d46:	d005      	beq.n	b6d54 <_ZN9TCPClient4peekEv+0x1e>
   b6d48:	6963      	ldr	r3, [r4, #20]
   b6d4a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6d4e:	4413      	add	r3, r2
   b6d50:	7918      	ldrb	r0, [r3, #4]
}
   b6d52:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6d54:	6803      	ldr	r3, [r0, #0]
   b6d56:	691b      	ldr	r3, [r3, #16]
   b6d58:	4798      	blx	r3
   b6d5a:	2800      	cmp	r0, #0
   b6d5c:	d1f4      	bne.n	b6d48 <_ZN9TCPClient4peekEv+0x12>
   b6d5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6d62:	e7f6      	b.n	b6d52 <_ZN9TCPClient4peekEv+0x1c>

000b6d64 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6d66:	6943      	ldr	r3, [r0, #20]
   b6d68:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b6d6a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6d6e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6d72:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6d74:	4605      	mov	r5, r0
   b6d76:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b6d78:	d016      	beq.n	b6da8 <_ZN9TCPClient4readEPhj+0x44>
   b6d7a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b6d7c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b6d80:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b6d84:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b6d86:	42bc      	cmp	r4, r7
   b6d88:	bf28      	it	cs
   b6d8a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b6d8c:	3304      	adds	r3, #4
   b6d8e:	4622      	mov	r2, r4
   b6d90:	4419      	add	r1, r3
   b6d92:	4630      	mov	r0, r6
   b6d94:	f000 fd12 	bl	b77bc <memcpy>
   b6d98:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b6d9a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b6d9e:	4423      	add	r3, r4
   b6da0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b6da4:	4620      	mov	r0, r4
   b6da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b6da8:	6803      	ldr	r3, [r0, #0]
   b6daa:	691b      	ldr	r3, [r3, #16]
   b6dac:	4798      	blx	r3
   b6dae:	2800      	cmp	r0, #0
   b6db0:	d1e3      	bne.n	b6d7a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b6db2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b6db6:	e7f5      	b.n	b6da4 <_ZN9TCPClient4readEPhj+0x40>

000b6db8 <_ZN9TCPClient12flush_bufferEv>:
   b6db8:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b6dba:	2300      	movs	r3, #0
   b6dbc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b6dc0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b6dc2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b6dc6:	4770      	bx	lr

000b6dc8 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6dcc:	461f      	mov	r7, r3
    stop();
   b6dce:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6dd0:	460c      	mov	r4, r1
    stop();
   b6dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6dd4:	b08a      	sub	sp, #40	; 0x28
   b6dd6:	4605      	mov	r5, r0
   b6dd8:	4616      	mov	r6, r2
    stop();
   b6dda:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b6ddc:	7d23      	ldrb	r3, [r4, #20]
   b6dde:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b6de2:	2b04      	cmp	r3, #4
   b6de4:	bf0c      	ite	eq
   b6de6:	2002      	moveq	r0, #2
   b6de8:	200a      	movne	r0, #10
   b6dea:	2206      	movs	r2, #6
   b6dec:	2101      	movs	r1, #1
   b6dee:	f7ff f8db 	bl	b5fa8 <sock_socket>
   b6df2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b6df6:	696b      	ldr	r3, [r5, #20]
   b6df8:	681b      	ldr	r3, [r3, #0]
   b6dfa:	2b00      	cmp	r3, #0
   b6dfc:	da08      	bge.n	b6e10 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b6dfe:	682b      	ldr	r3, [r5, #0]
   b6e00:	4628      	mov	r0, r5
   b6e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6e04:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b6e06:	4798      	blx	r3
}
   b6e08:	4620      	mov	r0, r4
   b6e0a:	b00a      	add	sp, #40	; 0x28
   b6e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b6e10:	4628      	mov	r0, r5
   b6e12:	f7ff ffd1 	bl	b6db8 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b6e16:	b1b7      	cbz	r7, b6e46 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b6e18:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6e1a:	a903      	add	r1, sp, #12
   b6e1c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b6e1e:	9303      	str	r3, [sp, #12]
   b6e20:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6e24:	f7ff f868 	bl	b5ef8 <if_index_to_name>
   b6e28:	2800      	cmp	r0, #0
   b6e2a:	d1e8      	bne.n	b6dfe <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b6e2c:	6968      	ldr	r0, [r5, #20]
   b6e2e:	2306      	movs	r3, #6
   b6e30:	9300      	str	r3, [sp, #0]
   b6e32:	6800      	ldr	r0, [r0, #0]
   b6e34:	ab03      	add	r3, sp, #12
   b6e36:	f241 020b 	movw	r2, #4107	; 0x100b
   b6e3a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6e3e:	f7ff f88b 	bl	b5f58 <sock_setsockopt>
   b6e42:	2800      	cmp	r0, #0
   b6e44:	d1db      	bne.n	b6dfe <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b6e46:	221c      	movs	r2, #28
   b6e48:	2100      	movs	r1, #0
   b6e4a:	a803      	add	r0, sp, #12
   b6e4c:	f000 fcc4 	bl	b77d8 <memset>
    if (ip.version() == 4) {
   b6e50:	7d23      	ldrb	r3, [r4, #20]
   b6e52:	2b04      	cmp	r3, #4
   b6e54:	d11d      	bne.n	b6e92 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b6e56:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b6e5a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b6e5c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b6e60:	f7ff f862 	bl	b5f28 <inet_htons>
   b6e64:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b6e68:	6860      	ldr	r0, [r4, #4]
   b6e6a:	f7ff f855 	bl	b5f18 <inet_htonl>
   b6e6e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b6e70:	696b      	ldr	r3, [r5, #20]
   b6e72:	221c      	movs	r2, #28
   b6e74:	6818      	ldr	r0, [r3, #0]
   b6e76:	a903      	add	r1, sp, #12
   b6e78:	f7ff f87e 	bl	b5f78 <sock_connect>
   b6e7c:	2800      	cmp	r0, #0
   b6e7e:	d1be      	bne.n	b6dfe <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b6e80:	3404      	adds	r4, #4
   b6e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6e84:	696d      	ldr	r5, [r5, #20]
   b6e86:	358c      	adds	r5, #140	; 0x8c
   b6e88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6e8a:	6823      	ldr	r3, [r4, #0]
   b6e8c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b6e8e:	2401      	movs	r4, #1
   b6e90:	e7ba      	b.n	b6e08 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b6e92:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b6e96:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b6e98:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b6e9c:	f7ff f844 	bl	b5f28 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6ea0:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b6ea2:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6ea6:	1d23      	adds	r3, r4, #4
   b6ea8:	f104 0714 	add.w	r7, r4, #20
   b6eac:	6818      	ldr	r0, [r3, #0]
   b6eae:	6859      	ldr	r1, [r3, #4]
   b6eb0:	4632      	mov	r2, r6
   b6eb2:	c203      	stmia	r2!, {r0, r1}
   b6eb4:	3308      	adds	r3, #8
   b6eb6:	42bb      	cmp	r3, r7
   b6eb8:	4616      	mov	r6, r2
   b6eba:	d1f7      	bne.n	b6eac <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b6ebc:	e7d8      	b.n	b6e70 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b6ec0 <_ZN9TCPClient9availableEv>:
{
   b6ec0:	b530      	push	{r4, r5, lr}
   b6ec2:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b6ec4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b6ec8:	b08b      	sub	sp, #44	; 0x2c
   b6eca:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b6ecc:	b12b      	cbz	r3, b6eda <_ZN9TCPClient9availableEv+0x1a>
   b6ece:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b6ed2:	429a      	cmp	r2, r3
   b6ed4:	d101      	bne.n	b6eda <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b6ed6:	f7ff ff6f 	bl	b6db8 <_ZN9TCPClient12flush_bufferEv>
   b6eda:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b6edc:	6808      	ldr	r0, [r1, #0]
   b6ede:	2800      	cmp	r0, #0
   b6ee0:	db18      	blt.n	b6f14 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b6ee2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b6ee6:	2d7f      	cmp	r5, #127	; 0x7f
   b6ee8:	d814      	bhi.n	b6f14 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b6eea:	3104      	adds	r1, #4
   b6eec:	2308      	movs	r3, #8
   b6eee:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b6ef2:	4429      	add	r1, r5
   b6ef4:	f7ff f848 	bl	b5f88 <sock_recv>
            if (ret > 0) {
   b6ef8:	2800      	cmp	r0, #0
   b6efa:	dd13      	ble.n	b6f24 <_ZN9TCPClient9availableEv+0x64>
   b6efc:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b6efe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6f02:	b90a      	cbnz	r2, b6f08 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b6f04:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b6f08:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b6f0a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6f0e:	4410      	add	r0, r2
   b6f10:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b6f14:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b6f16:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b6f1a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b6f1e:	1ac0      	subs	r0, r0, r3
   b6f20:	b00b      	add	sp, #44	; 0x2c
   b6f22:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b6f24:	f7ff f9c4 	bl	b62b0 <__errno>
   b6f28:	6803      	ldr	r3, [r0, #0]
   b6f2a:	2b0b      	cmp	r3, #11
   b6f2c:	d0f2      	beq.n	b6f14 <_ZN9TCPClient9availableEv+0x54>
   b6f2e:	f7ff f9bf 	bl	b62b0 <__errno>
   b6f32:	6803      	ldr	r3, [r0, #0]
   b6f34:	2b0b      	cmp	r3, #11
   b6f36:	d0ed      	beq.n	b6f14 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b6f38:	2320      	movs	r3, #32
   b6f3a:	2500      	movs	r5, #0
   b6f3c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b6f40:	f7ff f9b6 	bl	b62b0 <__errno>
   b6f44:	6803      	ldr	r3, [r0, #0]
   b6f46:	9301      	str	r3, [sp, #4]
   b6f48:	4b08      	ldr	r3, [pc, #32]	; (b6f6c <_ZN9TCPClient9availableEv+0xac>)
   b6f4a:	4909      	ldr	r1, [pc, #36]	; (b6f70 <_ZN9TCPClient9availableEv+0xb0>)
   b6f4c:	9300      	str	r3, [sp, #0]
   b6f4e:	aa02      	add	r2, sp, #8
   b6f50:	462b      	mov	r3, r5
   b6f52:	2032      	movs	r0, #50	; 0x32
   b6f54:	f7ff f8e8 	bl	b6128 <log_message>
                    sock_close(d_->sock);
   b6f58:	6963      	ldr	r3, [r4, #20]
   b6f5a:	6818      	ldr	r0, [r3, #0]
   b6f5c:	f7ff f804 	bl	b5f68 <sock_close>
   b6f60:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b6f62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6f66:	601a      	str	r2, [r3, #0]
   b6f68:	e7d4      	b.n	b6f14 <_ZN9TCPClient9availableEv+0x54>
   b6f6a:	bf00      	nop
   b6f6c:	000b85af 	.word	0x000b85af
   b6f70:	000b85a8 	.word	0x000b85a8

000b6f74 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b6f74:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b6f76:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b6f78:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b6f7a:	6818      	ldr	r0, [r3, #0]
   b6f7c:	2800      	cmp	r0, #0
   b6f7e:	db01      	blt.n	b6f84 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b6f80:	f7fe fff2 	bl	b5f68 <sock_close>
   b6f84:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b6f86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6f8a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b6f8c:	6960      	ldr	r0, [r4, #20]
   b6f8e:	2211      	movs	r2, #17
   b6f90:	2100      	movs	r1, #0
   b6f92:	308c      	adds	r0, #140	; 0x8c
   b6f94:	f000 fc20 	bl	b77d8 <memset>
    flush_buffer();
   b6f98:	4620      	mov	r0, r4
}
   b6f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b6f9e:	f7ff bf0b 	b.w	b6db8 <_ZN9TCPClient12flush_bufferEv>

000b6fa2 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b6fa2:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b6fa4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b6fa6:	4604      	mov	r4, r0
          total(0) {
   b6fa8:	6001      	str	r1, [r0, #0]
   b6faa:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b6fae:	3088      	adds	r0, #136	; 0x88
   b6fb0:	f7ff fa70 	bl	b6494 <_ZN9IPAddressC1Ev>
}
   b6fb4:	4620      	mov	r0, r4
   b6fb6:	bd10      	pop	{r4, pc}

000b6fb8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b6fb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6fba:	2300      	movs	r3, #0
   b6fbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6fc0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b6fc4:	4a0e      	ldr	r2, [pc, #56]	; (b7000 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b6fc6:	6103      	str	r3, [r0, #16]
   b6fc8:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6fca:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b6fcc:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6fce:	20ac      	movs	r0, #172	; 0xac
   b6fd0:	9101      	str	r1, [sp, #4]
   b6fd2:	f7fd f85e 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b6fd6:	1e05      	subs	r5, r0, #0
   b6fd8:	f105 060c 	add.w	r6, r5, #12
   b6fdc:	d008      	beq.n	b6ff0 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b6fde:	2301      	movs	r3, #1
   b6fe0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6fe4:	4b07      	ldr	r3, [pc, #28]	; (b7004 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6fe6:	9901      	ldr	r1, [sp, #4]
   b6fe8:	602b      	str	r3, [r5, #0]
   b6fea:	4630      	mov	r0, r6
   b6fec:	f7ff ffd9 	bl	b6fa2 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b6ff0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b6ff2:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b6ff6:	f7ff fedf 	bl	b6db8 <_ZN9TCPClient12flush_bufferEv>
}
   b6ffa:	b002      	add	sp, #8
   b6ffc:	bd70      	pop	{r4, r5, r6, pc}
   b6ffe:	bf00      	nop
   b7000:	000b85e4 	.word	0x000b85e4
   b7004:	000b85c8 	.word	0x000b85c8

000b7008 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7008:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b700a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b700e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7010:	f7ff ffd2 	bl	b6fb8 <_ZN9TCPClientC1Ei>
}
   b7014:	4620      	mov	r0, r4
   b7016:	bd10      	pop	{r4, pc}

000b7018 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7018:	b510      	push	{r4, lr}
   b701a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b701c:	6800      	ldr	r0, [r0, #0]
   b701e:	2800      	cmp	r0, #0
   b7020:	db01      	blt.n	b7026 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b7022:	f7fe ffa1 	bl	b5f68 <sock_close>
    }
}
   b7026:	4620      	mov	r0, r4
   b7028:	bd10      	pop	{r4, pc}

000b702a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b702a:	300c      	adds	r0, #12
   b702c:	f7ff bff4 	b.w	b7018 <_ZN9TCPClient4DataD1Ev>

000b7030 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7030:	4b02      	ldr	r3, [pc, #8]	; (b703c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7032:	681a      	ldr	r2, [r3, #0]
   b7034:	4b02      	ldr	r3, [pc, #8]	; (b7040 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7036:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7038:	4770      	bx	lr
   b703a:	bf00      	nop
   b703c:	2003e57c 	.word	0x2003e57c
   b7040:	2003e6fc 	.word	0x2003e6fc

000b7044 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7044:	4770      	bx	lr

000b7046 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7046:	7441      	strb	r1, [r0, #17]
}
   b7048:	4770      	bx	lr

000b704a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b704a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b704c:	7c00      	ldrb	r0, [r0, #16]
   b704e:	f7ff f823 	bl	b6098 <hal_usart_available_data_for_write>
}
   b7052:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7056:	bd08      	pop	{r3, pc}

000b7058 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7058:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b705a:	7c00      	ldrb	r0, [r0, #16]
   b705c:	f7fe fff4 	bl	b6048 <hal_usart_available>
}
   b7060:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7064:	bd08      	pop	{r3, pc}

000b7066 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7066:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7068:	7c00      	ldrb	r0, [r0, #16]
   b706a:	f7fe fffd 	bl	b6068 <hal_usart_peek>
}
   b706e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7072:	bd08      	pop	{r3, pc}

000b7074 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7074:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7076:	7c00      	ldrb	r0, [r0, #16]
   b7078:	f7fe ffee 	bl	b6058 <hal_usart_read>
}
   b707c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7080:	bd08      	pop	{r3, pc}

000b7082 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7082:	7c00      	ldrb	r0, [r0, #16]
   b7084:	f7fe bff8 	b.w	b6078 <hal_usart_flush>

000b7088 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7088:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b708a:	7c45      	ldrb	r5, [r0, #17]
{
   b708c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b708e:	b12d      	cbz	r5, b709c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7090:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7092:	b003      	add	sp, #12
   b7094:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7098:	f7fe bfce 	b.w	b6038 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b709c:	7c00      	ldrb	r0, [r0, #16]
   b709e:	9101      	str	r1, [sp, #4]
   b70a0:	f7fe fffa 	bl	b6098 <hal_usart_available_data_for_write>
   b70a4:	2800      	cmp	r0, #0
   b70a6:	9901      	ldr	r1, [sp, #4]
   b70a8:	dcf2      	bgt.n	b7090 <_ZN11USARTSerial5writeEh+0x8>
}
   b70aa:	4628      	mov	r0, r5
   b70ac:	b003      	add	sp, #12
   b70ae:	bd30      	pop	{r4, r5, pc}

000b70b0 <_ZN11USARTSerialD0Ev>:
   b70b0:	b510      	push	{r4, lr}
   b70b2:	2114      	movs	r1, #20
   b70b4:	4604      	mov	r4, r0
   b70b6:	f7fc fff2 	bl	b409e <_ZdlPvj>
   b70ba:	4620      	mov	r0, r4
   b70bc:	bd10      	pop	{r4, pc}
	...

000b70c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b70c0:	b510      	push	{r4, lr}
   b70c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b70c6:	4604      	mov	r4, r0
   b70c8:	4608      	mov	r0, r1
   b70ca:	4611      	mov	r1, r2
   b70cc:	2200      	movs	r2, #0
   b70ce:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b70d2:	4b04      	ldr	r3, [pc, #16]	; (b70e4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b70d4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b70d6:	2301      	movs	r3, #1
  _serial = serial;
   b70d8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b70da:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b70dc:	f7fe ffe4 	bl	b60a8 <hal_usart_init_ex>
}
   b70e0:	4620      	mov	r0, r4
   b70e2:	bd10      	pop	{r4, pc}
   b70e4:	000b864c 	.word	0x000b864c

000b70e8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b70e8:	7441      	strb	r1, [r0, #17]
}
   b70ea:	4770      	bx	lr

000b70ec <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b70ec:	4770      	bx	lr

000b70ee <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b70ee:	4770      	bx	lr

000b70f0 <_ZN9USBSerial4readEv>:
{
   b70f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b70f2:	2100      	movs	r1, #0
   b70f4:	7c00      	ldrb	r0, [r0, #16]
   b70f6:	f7fe fff7 	bl	b60e8 <HAL_USB_USART_Receive_Data>
}
   b70fa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b70fe:	bd08      	pop	{r3, pc}

000b7100 <_ZN9USBSerial4peekEv>:
{
   b7100:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7102:	2101      	movs	r1, #1
   b7104:	7c00      	ldrb	r0, [r0, #16]
   b7106:	f7fe ffef 	bl	b60e8 <HAL_USB_USART_Receive_Data>
}
   b710a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b710e:	bd08      	pop	{r3, pc}

000b7110 <_ZN9USBSerial17availableForWriteEv>:
{
   b7110:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7112:	7c00      	ldrb	r0, [r0, #16]
   b7114:	f7fe ffe0 	bl	b60d8 <HAL_USB_USART_Available_Data_For_Write>
}
   b7118:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b711c:	bd08      	pop	{r3, pc}

000b711e <_ZN9USBSerial9availableEv>:
{
   b711e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7120:	7c00      	ldrb	r0, [r0, #16]
   b7122:	f7fe ffd1 	bl	b60c8 <HAL_USB_USART_Available_Data>
}
   b7126:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b712a:	bd08      	pop	{r3, pc}

000b712c <_ZN9USBSerial5writeEh>:
{
   b712c:	b513      	push	{r0, r1, r4, lr}
   b712e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7130:	7c00      	ldrb	r0, [r0, #16]
{
   b7132:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7134:	f7fe ffd0 	bl	b60d8 <HAL_USB_USART_Available_Data_For_Write>
   b7138:	2800      	cmp	r0, #0
   b713a:	9901      	ldr	r1, [sp, #4]
   b713c:	dc01      	bgt.n	b7142 <_ZN9USBSerial5writeEh+0x16>
   b713e:	7c60      	ldrb	r0, [r4, #17]
   b7140:	b120      	cbz	r0, b714c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7142:	7c20      	ldrb	r0, [r4, #16]
   b7144:	f7fe ffd8 	bl	b60f8 <HAL_USB_USART_Send_Data>
   b7148:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b714c:	b002      	add	sp, #8
   b714e:	bd10      	pop	{r4, pc}

000b7150 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7150:	7c00      	ldrb	r0, [r0, #16]
   b7152:	f7fe bfd9 	b.w	b6108 <HAL_USB_USART_Flush_Data>

000b7156 <_ZN9USBSerialD0Ev>:
   b7156:	b510      	push	{r4, lr}
   b7158:	2114      	movs	r1, #20
   b715a:	4604      	mov	r4, r0
   b715c:	f7fc ff9f 	bl	b409e <_ZdlPvj>
   b7160:	4620      	mov	r0, r4
   b7162:	bd10      	pop	{r4, pc}

000b7164 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7164:	b510      	push	{r4, lr}
   b7166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b716a:	4604      	mov	r4, r0
   b716c:	4608      	mov	r0, r1
   b716e:	2100      	movs	r1, #0
   b7170:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7174:	4b04      	ldr	r3, [pc, #16]	; (b7188 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7176:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7178:	2301      	movs	r3, #1
  _serial = serial;
   b717a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b717c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b717e:	4611      	mov	r1, r2
   b7180:	f7fe ff9a 	bl	b60b8 <HAL_USB_USART_Init>
}
   b7184:	4620      	mov	r0, r4
   b7186:	bd10      	pop	{r4, pc}
   b7188:	000b867c 	.word	0x000b867c

000b718c <_Z19acquireSerialBufferv>:
{
   b718c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b718e:	2214      	movs	r2, #20
{
   b7190:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7192:	2100      	movs	r1, #0
   b7194:	f000 fb20 	bl	b77d8 <memset>
}
   b7198:	4620      	mov	r0, r4
   b719a:	bd10      	pop	{r4, pc}

000b719c <_Z16_fetch_usbserialv>:
{
   b719c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b719e:	4c0f      	ldr	r4, [pc, #60]	; (b71dc <_Z16_fetch_usbserialv+0x40>)
{
   b71a0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b71a2:	a803      	add	r0, sp, #12
   b71a4:	f7ff fff2 	bl	b718c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b71a8:	7821      	ldrb	r1, [r4, #0]
   b71aa:	f3bf 8f5b 	dmb	ish
   b71ae:	f011 0101 	ands.w	r1, r1, #1
   b71b2:	d10f      	bne.n	b71d4 <_Z16_fetch_usbserialv+0x38>
   b71b4:	4620      	mov	r0, r4
   b71b6:	9101      	str	r1, [sp, #4]
   b71b8:	f7fc ff80 	bl	b40bc <__cxa_guard_acquire>
   b71bc:	9901      	ldr	r1, [sp, #4]
   b71be:	b148      	cbz	r0, b71d4 <_Z16_fetch_usbserialv+0x38>
   b71c0:	aa03      	add	r2, sp, #12
   b71c2:	4807      	ldr	r0, [pc, #28]	; (b71e0 <_Z16_fetch_usbserialv+0x44>)
   b71c4:	f7ff ffce 	bl	b7164 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b71c8:	4620      	mov	r0, r4
   b71ca:	f7fc ff7c 	bl	b40c6 <__cxa_guard_release>
   b71ce:	4805      	ldr	r0, [pc, #20]	; (b71e4 <_Z16_fetch_usbserialv+0x48>)
   b71d0:	f000 faee 	bl	b77b0 <atexit>
	return _usbserial;
}
   b71d4:	4802      	ldr	r0, [pc, #8]	; (b71e0 <_Z16_fetch_usbserialv+0x44>)
   b71d6:	b008      	add	sp, #32
   b71d8:	bd10      	pop	{r4, pc}
   b71da:	bf00      	nop
   b71dc:	2003e700 	.word	0x2003e700
   b71e0:	2003e704 	.word	0x2003e704
   b71e4:	000b70ed 	.word	0x000b70ed

000b71e8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b71e8:	2200      	movs	r2, #0
   b71ea:	6840      	ldr	r0, [r0, #4]
   b71ec:	4611      	mov	r1, r2
   b71ee:	f7fe bff7 	b.w	b61e0 <network_ready>

000b71f2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b71f2:	2200      	movs	r2, #0
   b71f4:	6840      	ldr	r0, [r0, #4]
   b71f6:	4611      	mov	r1, r2
   b71f8:	f7ff b812 	b.w	b6220 <network_listening>

000b71fc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b71fc:	2200      	movs	r2, #0
   b71fe:	6840      	ldr	r0, [r0, #4]
   b7200:	4611      	mov	r1, r2
   b7202:	f7ff b81d 	b.w	b6240 <network_get_listen_timeout>

000b7206 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7206:	6840      	ldr	r0, [r0, #4]
   b7208:	2200      	movs	r2, #0
   b720a:	f7ff b811 	b.w	b6230 <network_set_listen_timeout>

000b720e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b720e:	6840      	ldr	r0, [r0, #4]
   b7210:	2200      	movs	r2, #0
   b7212:	f081 0101 	eor.w	r1, r1, #1
   b7216:	f7fe bffb 	b.w	b6210 <network_listen>

000b721a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b721a:	2300      	movs	r3, #0
   b721c:	6840      	ldr	r0, [r0, #4]
   b721e:	461a      	mov	r2, r3
   b7220:	4619      	mov	r1, r3
   b7222:	f7fe bfed 	b.w	b6200 <network_off>

000b7226 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7226:	2300      	movs	r3, #0
   b7228:	6840      	ldr	r0, [r0, #4]
   b722a:	461a      	mov	r2, r3
   b722c:	4619      	mov	r1, r3
   b722e:	f7fe bfdf 	b.w	b61f0 <network_on>

000b7232 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7232:	2200      	movs	r2, #0
   b7234:	6840      	ldr	r0, [r0, #4]
   b7236:	4611      	mov	r1, r2
   b7238:	f7fe bfc2 	b.w	b61c0 <network_connecting>

000b723c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b723c:	6840      	ldr	r0, [r0, #4]
   b723e:	2200      	movs	r2, #0
   b7240:	2102      	movs	r1, #2
   b7242:	f7fe bfc5 	b.w	b61d0 <network_disconnect>

000b7246 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7246:	2300      	movs	r3, #0
   b7248:	6840      	ldr	r0, [r0, #4]
   b724a:	461a      	mov	r2, r3
   b724c:	f7fe bfb0 	b.w	b61b0 <network_connect>

000b7250 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7250:	4b02      	ldr	r3, [pc, #8]	; (b725c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7252:	2204      	movs	r2, #4
   b7254:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7256:	4a02      	ldr	r2, [pc, #8]	; (b7260 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7258:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b725a:	4770      	bx	lr
   b725c:	2003e718 	.word	0x2003e718
   b7260:	000b86ac 	.word	0x000b86ac

000b7264 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7264:	4b01      	ldr	r3, [pc, #4]	; (b726c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7266:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7268:	4770      	bx	lr
   b726a:	bf00      	nop
   b726c:	2003e580 	.word	0x2003e580

000b7270 <serialEventRun>:
{
   b7270:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7272:	4b0b      	ldr	r3, [pc, #44]	; (b72a0 <serialEventRun+0x30>)
   b7274:	b143      	cbz	r3, b7288 <serialEventRun+0x18>
   b7276:	f7ff ff91 	bl	b719c <_Z16_fetch_usbserialv>
   b727a:	6803      	ldr	r3, [r0, #0]
   b727c:	691b      	ldr	r3, [r3, #16]
   b727e:	4798      	blx	r3
   b7280:	2800      	cmp	r0, #0
   b7282:	dd01      	ble.n	b7288 <serialEventRun+0x18>
        serialEvent();
   b7284:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7288:	4b06      	ldr	r3, [pc, #24]	; (b72a4 <serialEventRun+0x34>)
   b728a:	b143      	cbz	r3, b729e <serialEventRun+0x2e>
   b728c:	f000 f958 	bl	b7540 <_Z22__fetch_global_Serial1v>
   b7290:	6803      	ldr	r3, [r0, #0]
   b7292:	691b      	ldr	r3, [r3, #16]
   b7294:	4798      	blx	r3
   b7296:	2800      	cmp	r0, #0
   b7298:	dd01      	ble.n	b729e <serialEventRun+0x2e>
        serialEvent1();
   b729a:	f3af 8000 	nop.w
}
   b729e:	bd08      	pop	{r3, pc}
	...

000b72a8 <_post_loop>:
{
   b72a8:	b508      	push	{r3, lr}
	serialEventRun();
   b72aa:	f7ff ffe1 	bl	b7270 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b72ae:	f7fe fda3 	bl	b5df8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b72b2:	4b01      	ldr	r3, [pc, #4]	; (b72b8 <_post_loop+0x10>)
   b72b4:	6018      	str	r0, [r3, #0]
}
   b72b6:	bd08      	pop	{r3, pc}
   b72b8:	2003e728 	.word	0x2003e728

000b72bc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b72bc:	4805      	ldr	r0, [pc, #20]	; (b72d4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b72be:	4a06      	ldr	r2, [pc, #24]	; (b72d8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b72c0:	4906      	ldr	r1, [pc, #24]	; (b72dc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b72c2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b72c4:	1a12      	subs	r2, r2, r0
   b72c6:	f000 fa79 	bl	b77bc <memcpy>
    __backup_sram_signature = signature;
   b72ca:	4b05      	ldr	r3, [pc, #20]	; (b72e0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b72cc:	4a05      	ldr	r2, [pc, #20]	; (b72e4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b72ce:	601a      	str	r2, [r3, #0]
}
   b72d0:	bd08      	pop	{r3, pc}
   b72d2:	bf00      	nop
   b72d4:	2003f400 	.word	0x2003f400
   b72d8:	2003f404 	.word	0x2003f404
   b72dc:	000b8894 	.word	0x000b8894
   b72e0:	2003f400 	.word	0x2003f400
   b72e4:	9a271c1e 	.word	0x9a271c1e

000b72e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b72e8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b72ea:	2300      	movs	r3, #0
   b72ec:	9300      	str	r3, [sp, #0]
   b72ee:	461a      	mov	r2, r3
   b72f0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b72f4:	f7fe ff42 	bl	b617c <system_ctrl_set_result>
}
   b72f8:	b003      	add	sp, #12
   b72fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7300 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7300:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7302:	8843      	ldrh	r3, [r0, #2]
   b7304:	2b0a      	cmp	r3, #10
   b7306:	d008      	beq.n	b731a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7308:	2b50      	cmp	r3, #80	; 0x50
   b730a:	d10b      	bne.n	b7324 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b730c:	4b09      	ldr	r3, [pc, #36]	; (b7334 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b730e:	681b      	ldr	r3, [r3, #0]
   b7310:	b14b      	cbz	r3, b7326 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7312:	b003      	add	sp, #12
   b7314:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7318:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b731a:	f7ff ffe5 	bl	b72e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b731e:	b003      	add	sp, #12
   b7320:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7324:	2300      	movs	r3, #0
   b7326:	9300      	str	r3, [sp, #0]
   b7328:	461a      	mov	r2, r3
   b732a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b732e:	f7fe ff25 	bl	b617c <system_ctrl_set_result>
}
   b7332:	e7f4      	b.n	b731e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7334:	2003e724 	.word	0x2003e724

000b7338 <module_user_init_hook>:
{
   b7338:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b733a:	4812      	ldr	r0, [pc, #72]	; (b7384 <module_user_init_hook+0x4c>)
   b733c:	2100      	movs	r1, #0
   b733e:	f7fe ffc7 	bl	b62d0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7342:	4b11      	ldr	r3, [pc, #68]	; (b7388 <module_user_init_hook+0x50>)
   b7344:	681a      	ldr	r2, [r3, #0]
   b7346:	4b11      	ldr	r3, [pc, #68]	; (b738c <module_user_init_hook+0x54>)
   b7348:	429a      	cmp	r2, r3
   b734a:	4b11      	ldr	r3, [pc, #68]	; (b7390 <module_user_init_hook+0x58>)
   b734c:	bf0c      	ite	eq
   b734e:	2201      	moveq	r2, #1
   b7350:	2200      	movne	r2, #0
   b7352:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7354:	d001      	beq.n	b735a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7356:	f7ff ffb1 	bl	b72bc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b735a:	f7fe fd3d 	bl	b5dd8 <HAL_RNG_GetRandomNumber>
   b735e:	4604      	mov	r4, r0
    srand(seed);
   b7360:	f000 fa42 	bl	b77e8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7364:	4b0b      	ldr	r3, [pc, #44]	; (b7394 <module_user_init_hook+0x5c>)
   b7366:	b113      	cbz	r3, b736e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7368:	4620      	mov	r0, r4
   b736a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b736e:	2100      	movs	r1, #0
   b7370:	4808      	ldr	r0, [pc, #32]	; (b7394 <module_user_init_hook+0x5c>)
   b7372:	f7fe ff15 	bl	b61a0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b737a:	4807      	ldr	r0, [pc, #28]	; (b7398 <module_user_init_hook+0x60>)
   b737c:	2100      	movs	r1, #0
   b737e:	f7fe bef3 	b.w	b6168 <system_ctrl_set_app_request_handler>
   b7382:	bf00      	nop
   b7384:	000b7265 	.word	0x000b7265
   b7388:	2003f400 	.word	0x2003f400
   b738c:	9a271c1e 	.word	0x9a271c1e
   b7390:	2003e720 	.word	0x2003e720
   b7394:	00000000 	.word	0x00000000
   b7398:	000b7301 	.word	0x000b7301

000b739c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b739c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b739e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b73a0:	d902      	bls.n	b73a8 <pinAvailable+0xc>
    return false;
   b73a2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b73a4:	b002      	add	sp, #8
   b73a6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b73a8:	f1a0 030b 	sub.w	r3, r0, #11
   b73ac:	2b02      	cmp	r3, #2
   b73ae:	d81a      	bhi.n	b73e6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b73b0:	4c17      	ldr	r4, [pc, #92]	; (b7410 <pinAvailable+0x74>)
   b73b2:	7821      	ldrb	r1, [r4, #0]
   b73b4:	f3bf 8f5b 	dmb	ish
   b73b8:	f011 0101 	ands.w	r1, r1, #1
   b73bc:	d10b      	bne.n	b73d6 <pinAvailable+0x3a>
   b73be:	4620      	mov	r0, r4
   b73c0:	9101      	str	r1, [sp, #4]
   b73c2:	f7fc fe7b 	bl	b40bc <__cxa_guard_acquire>
   b73c6:	9901      	ldr	r1, [sp, #4]
   b73c8:	b128      	cbz	r0, b73d6 <pinAvailable+0x3a>
   b73ca:	4812      	ldr	r0, [pc, #72]	; (b7414 <pinAvailable+0x78>)
   b73cc:	f7ff fa10 	bl	b67f0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b73d0:	4620      	mov	r0, r4
   b73d2:	f7fc fe78 	bl	b40c6 <__cxa_guard_release>
   b73d6:	4b0f      	ldr	r3, [pc, #60]	; (b7414 <pinAvailable+0x78>)
   b73d8:	7818      	ldrb	r0, [r3, #0]
   b73da:	f7fe fe05 	bl	b5fe8 <hal_spi_is_enabled>
   b73de:	2800      	cmp	r0, #0
   b73e0:	d1df      	bne.n	b73a2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b73e2:	2001      	movs	r0, #1
   b73e4:	e7de      	b.n	b73a4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b73e6:	2801      	cmp	r0, #1
   b73e8:	d809      	bhi.n	b73fe <pinAvailable+0x62>
   b73ea:	f000 f869 	bl	b74c0 <_Z19__fetch_global_Wirev>
   b73ee:	2100      	movs	r1, #0
   b73f0:	7c00      	ldrb	r0, [r0, #16]
   b73f2:	f7fe fd71 	bl	b5ed8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b73f6:	f080 0001 	eor.w	r0, r0, #1
   b73fa:	b2c0      	uxtb	r0, r0
   b73fc:	e7d2      	b.n	b73a4 <pinAvailable+0x8>
   b73fe:	3809      	subs	r0, #9
   b7400:	2801      	cmp	r0, #1
   b7402:	d8ee      	bhi.n	b73e2 <pinAvailable+0x46>
   b7404:	f000 f89c 	bl	b7540 <_Z22__fetch_global_Serial1v>
   b7408:	7c00      	ldrb	r0, [r0, #16]
   b740a:	f7fe fe3d 	bl	b6088 <hal_usart_is_enabled>
   b740e:	e7f2      	b.n	b73f6 <pinAvailable+0x5a>
   b7410:	2003e6b8 	.word	0x2003e6b8
   b7414:	2003e6bc 	.word	0x2003e6bc

000b7418 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7418:	2823      	cmp	r0, #35	; 0x23
{
   b741a:	b538      	push	{r3, r4, r5, lr}
   b741c:	4604      	mov	r4, r0
   b741e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7420:	d80a      	bhi.n	b7438 <pinMode+0x20>
   b7422:	29ff      	cmp	r1, #255	; 0xff
   b7424:	d008      	beq.n	b7438 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7426:	f7ff ffb9 	bl	b739c <pinAvailable>
   b742a:	b128      	cbz	r0, b7438 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b742c:	4629      	mov	r1, r5
   b742e:	4620      	mov	r0, r4
}
   b7430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7434:	f7fe bce8 	b.w	b5e08 <HAL_Pin_Mode>
}
   b7438:	bd38      	pop	{r3, r4, r5, pc}

000b743a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b743a:	b538      	push	{r3, r4, r5, lr}
   b743c:	4604      	mov	r4, r0
   b743e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7440:	f7fe fcea 	bl	b5e18 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7444:	28ff      	cmp	r0, #255	; 0xff
   b7446:	d010      	beq.n	b746a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7448:	2806      	cmp	r0, #6
   b744a:	d804      	bhi.n	b7456 <digitalWrite+0x1c>
   b744c:	234d      	movs	r3, #77	; 0x4d
   b744e:	fa23 f000 	lsr.w	r0, r3, r0
   b7452:	07c3      	lsls	r3, r0, #31
   b7454:	d409      	bmi.n	b746a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7456:	4620      	mov	r0, r4
   b7458:	f7ff ffa0 	bl	b739c <pinAvailable>
   b745c:	b128      	cbz	r0, b746a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b745e:	4629      	mov	r1, r5
   b7460:	4620      	mov	r0, r4
}
   b7462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b7466:	f7fe bcdf 	b.w	b5e28 <HAL_GPIO_Write>
}
   b746a:	bd38      	pop	{r3, r4, r5, pc}

000b746c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b746c:	b510      	push	{r4, lr}
   b746e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7470:	f7fe fcd2 	bl	b5e18 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7474:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7476:	b2db      	uxtb	r3, r3
   b7478:	2b01      	cmp	r3, #1
   b747a:	d908      	bls.n	b748e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b747c:	4620      	mov	r0, r4
   b747e:	f7ff ff8d 	bl	b739c <pinAvailable>
   b7482:	b120      	cbz	r0, b748e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b7484:	4620      	mov	r0, r4
}
   b7486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b748a:	f7fe bcd5 	b.w	b5e38 <HAL_GPIO_Read>
}
   b748e:	2000      	movs	r0, #0
   b7490:	bd10      	pop	{r4, pc}

000b7492 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7492:	4770      	bx	lr

000b7494 <_Z17acquireWireBufferv>:
{
   b7494:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7496:	2520      	movs	r5, #32
   b7498:	2314      	movs	r3, #20
{
   b749a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b749c:	6003      	str	r3, [r0, #0]
   b749e:	6085      	str	r5, [r0, #8]
   b74a0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b74a2:	4906      	ldr	r1, [pc, #24]	; (b74bc <_Z17acquireWireBufferv+0x28>)
   b74a4:	4628      	mov	r0, r5
   b74a6:	f000 f86f 	bl	b7588 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b74aa:	4904      	ldr	r1, [pc, #16]	; (b74bc <_Z17acquireWireBufferv+0x28>)
	};
   b74ac:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b74ae:	4628      	mov	r0, r5
   b74b0:	f000 f86a 	bl	b7588 <_ZnajRKSt9nothrow_t>
	};
   b74b4:	60e0      	str	r0, [r4, #12]
}
   b74b6:	4620      	mov	r0, r4
   b74b8:	bd38      	pop	{r3, r4, r5, pc}
   b74ba:	bf00      	nop
   b74bc:	000b86e0 	.word	0x000b86e0

000b74c0 <_Z19__fetch_global_Wirev>:
{
   b74c0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b74c2:	4d0e      	ldr	r5, [pc, #56]	; (b74fc <_Z19__fetch_global_Wirev+0x3c>)
   b74c4:	7829      	ldrb	r1, [r5, #0]
   b74c6:	f3bf 8f5b 	dmb	ish
   b74ca:	f011 0401 	ands.w	r4, r1, #1
{
   b74ce:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b74d0:	d111      	bne.n	b74f6 <_Z19__fetch_global_Wirev+0x36>
   b74d2:	4628      	mov	r0, r5
   b74d4:	f7fc fdf2 	bl	b40bc <__cxa_guard_acquire>
   b74d8:	b168      	cbz	r0, b74f6 <_Z19__fetch_global_Wirev+0x36>
   b74da:	a801      	add	r0, sp, #4
   b74dc:	f7ff ffda 	bl	b7494 <_Z17acquireWireBufferv>
   b74e0:	aa01      	add	r2, sp, #4
   b74e2:	4621      	mov	r1, r4
   b74e4:	4806      	ldr	r0, [pc, #24]	; (b7500 <_Z19__fetch_global_Wirev+0x40>)
   b74e6:	f7fe ff71 	bl	b63cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b74ea:	4628      	mov	r0, r5
   b74ec:	f7fc fdeb 	bl	b40c6 <__cxa_guard_release>
   b74f0:	4804      	ldr	r0, [pc, #16]	; (b7504 <_Z19__fetch_global_Wirev+0x44>)
   b74f2:	f000 f95d 	bl	b77b0 <atexit>
	return wire;
}
   b74f6:	4802      	ldr	r0, [pc, #8]	; (b7500 <_Z19__fetch_global_Wirev+0x40>)
   b74f8:	b007      	add	sp, #28
   b74fa:	bd30      	pop	{r4, r5, pc}
   b74fc:	2003e72c 	.word	0x2003e72c
   b7500:	2003e730 	.word	0x2003e730
   b7504:	000b7493 	.word	0x000b7493

000b7508 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7508:	4770      	bx	lr
	...

000b750c <_Z20acquireSerial1Bufferv>:
{
   b750c:	b538      	push	{r3, r4, r5, lr}
   b750e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7510:	2514      	movs	r5, #20
   b7512:	462a      	mov	r2, r5
   b7514:	2100      	movs	r1, #0
   b7516:	f000 f95f 	bl	b77d8 <memset>
   b751a:	8025      	strh	r5, [r4, #0]
   b751c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b751e:	4907      	ldr	r1, [pc, #28]	; (b753c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7520:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7522:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7524:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7526:	f000 f82f 	bl	b7588 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b752a:	4904      	ldr	r1, [pc, #16]	; (b753c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b752c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b752e:	4628      	mov	r0, r5
   b7530:	f000 f82a 	bl	b7588 <_ZnajRKSt9nothrow_t>
    };
   b7534:	60e0      	str	r0, [r4, #12]
}
   b7536:	4620      	mov	r0, r4
   b7538:	bd38      	pop	{r3, r4, r5, pc}
   b753a:	bf00      	nop
   b753c:	000b86e0 	.word	0x000b86e0

000b7540 <_Z22__fetch_global_Serial1v>:
{
   b7540:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7542:	4d0e      	ldr	r5, [pc, #56]	; (b757c <_Z22__fetch_global_Serial1v+0x3c>)
   b7544:	7829      	ldrb	r1, [r5, #0]
   b7546:	f3bf 8f5b 	dmb	ish
   b754a:	f011 0401 	ands.w	r4, r1, #1
{
   b754e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7550:	d111      	bne.n	b7576 <_Z22__fetch_global_Serial1v+0x36>
   b7552:	4628      	mov	r0, r5
   b7554:	f7fc fdb2 	bl	b40bc <__cxa_guard_acquire>
   b7558:	b168      	cbz	r0, b7576 <_Z22__fetch_global_Serial1v+0x36>
   b755a:	a801      	add	r0, sp, #4
   b755c:	f7ff ffd6 	bl	b750c <_Z20acquireSerial1Bufferv>
   b7560:	aa01      	add	r2, sp, #4
   b7562:	4621      	mov	r1, r4
   b7564:	4806      	ldr	r0, [pc, #24]	; (b7580 <_Z22__fetch_global_Serial1v+0x40>)
   b7566:	f7ff fdab 	bl	b70c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b756a:	4628      	mov	r0, r5
   b756c:	f7fc fdab 	bl	b40c6 <__cxa_guard_release>
   b7570:	4804      	ldr	r0, [pc, #16]	; (b7584 <_Z22__fetch_global_Serial1v+0x44>)
   b7572:	f000 f91d 	bl	b77b0 <atexit>
    return serial1;
}
   b7576:	4802      	ldr	r0, [pc, #8]	; (b7580 <_Z22__fetch_global_Serial1v+0x40>)
   b7578:	b007      	add	sp, #28
   b757a:	bd30      	pop	{r4, r5, pc}
   b757c:	2003e744 	.word	0x2003e744
   b7580:	2003e748 	.word	0x2003e748
   b7584:	000b7509 	.word	0x000b7509

000b7588 <_ZnajRKSt9nothrow_t>:
   b7588:	f7fc bd85 	b.w	b4096 <_Znaj>

000b758c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b758c:	4901      	ldr	r1, [pc, #4]	; (b7594 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b758e:	f000 b8f9 	b.w	b7784 <_ZNKSt9type_infoeqERKS_>
   b7592:	bf00      	nop
   b7594:	000b86fc 	.word	0x000b86fc

000b7598 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7598:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b759a:	2400      	movs	r4, #0
   b759c:	2310      	movs	r3, #16
   b759e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b75a2:	6803      	ldr	r3, [r0, #0]
   b75a4:	4615      	mov	r5, r2
   b75a6:	699e      	ldr	r6, [r3, #24]
   b75a8:	6812      	ldr	r2, [r2, #0]
   b75aa:	466b      	mov	r3, sp
   b75ac:	e9cd 4400 	strd	r4, r4, [sp]
   b75b0:	47b0      	blx	r6
   b75b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b75b6:	f003 0306 	and.w	r3, r3, #6
   b75ba:	2b06      	cmp	r3, #6
   b75bc:	bf03      	ittte	eq
   b75be:	9b00      	ldreq	r3, [sp, #0]
   b75c0:	602b      	streq	r3, [r5, #0]
   b75c2:	2001      	moveq	r0, #1
   b75c4:	4620      	movne	r0, r4
   b75c6:	b004      	add	sp, #16
   b75c8:	bd70      	pop	{r4, r5, r6, pc}

000b75ca <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b75ca:	9800      	ldr	r0, [sp, #0]
   b75cc:	4290      	cmp	r0, r2
   b75ce:	bf14      	ite	ne
   b75d0:	2001      	movne	r0, #1
   b75d2:	2006      	moveq	r0, #6
   b75d4:	4770      	bx	lr
	...

000b75d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b75d8:	b510      	push	{r4, lr}
   b75da:	4b03      	ldr	r3, [pc, #12]	; (b75e8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b75dc:	6003      	str	r3, [r0, #0]
   b75de:	4604      	mov	r4, r0
   b75e0:	f000 f8cd 	bl	b777e <_ZNSt9type_infoD1Ev>
   b75e4:	4620      	mov	r0, r4
   b75e6:	bd10      	pop	{r4, pc}
   b75e8:	000b873c 	.word	0x000b873c

000b75ec <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b75ec:	b510      	push	{r4, lr}
   b75ee:	4604      	mov	r4, r0
   b75f0:	f7ff fff2 	bl	b75d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b75f4:	4620      	mov	r0, r4
   b75f6:	2108      	movs	r1, #8
   b75f8:	f7fc fd51 	bl	b409e <_ZdlPvj>
   b75fc:	4620      	mov	r0, r4
   b75fe:	bd10      	pop	{r4, pc}

000b7600 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7604:	461f      	mov	r7, r3
   b7606:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b760a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b760e:	4598      	cmp	r8, r3
   b7610:	4606      	mov	r6, r0
   b7612:	4615      	mov	r5, r2
   b7614:	d107      	bne.n	b7626 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7616:	9907      	ldr	r1, [sp, #28]
   b7618:	f000 f8b4 	bl	b7784 <_ZNKSt9type_infoeqERKS_>
   b761c:	b118      	cbz	r0, b7626 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b761e:	7165      	strb	r5, [r4, #5]
   b7620:	2000      	movs	r0, #0
   b7622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7626:	4639      	mov	r1, r7
   b7628:	4630      	mov	r0, r6
   b762a:	f000 f8ab 	bl	b7784 <_ZNKSt9type_infoeqERKS_>
   b762e:	2800      	cmp	r0, #0
   b7630:	d0f6      	beq.n	b7620 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b7632:	2301      	movs	r3, #1
   b7634:	f8c4 8000 	str.w	r8, [r4]
   b7638:	7125      	strb	r5, [r4, #4]
   b763a:	71a3      	strb	r3, [r4, #6]
   b763c:	e7f0      	b.n	b7620 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b763e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b763e:	b538      	push	{r3, r4, r5, lr}
   b7640:	4615      	mov	r5, r2
   b7642:	461c      	mov	r4, r3
   b7644:	f000 f89e 	bl	b7784 <_ZNKSt9type_infoeqERKS_>
   b7648:	b120      	cbz	r0, b7654 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b764a:	2308      	movs	r3, #8
   b764c:	60e3      	str	r3, [r4, #12]
   b764e:	2306      	movs	r3, #6
   b7650:	6025      	str	r5, [r4, #0]
   b7652:	7123      	strb	r3, [r4, #4]
   b7654:	bd38      	pop	{r3, r4, r5, pc}

000b7656 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b7656:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7658:	4605      	mov	r5, r0
   b765a:	460c      	mov	r4, r1
   b765c:	9201      	str	r2, [sp, #4]
   b765e:	461e      	mov	r6, r3
   b7660:	f000 f890 	bl	b7784 <_ZNKSt9type_infoeqERKS_>
   b7664:	b950      	cbnz	r0, b767c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7666:	2e03      	cmp	r6, #3
   b7668:	d808      	bhi.n	b767c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b766a:	6823      	ldr	r3, [r4, #0]
   b766c:	9a01      	ldr	r2, [sp, #4]
   b766e:	695b      	ldr	r3, [r3, #20]
   b7670:	4629      	mov	r1, r5
   b7672:	4620      	mov	r0, r4
   b7674:	b002      	add	sp, #8
   b7676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b767a:	4718      	bx	r3
   b767c:	b002      	add	sp, #8
   b767e:	bd70      	pop	{r4, r5, r6, pc}

000b7680 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7680:	b510      	push	{r4, lr}
   b7682:	4b03      	ldr	r3, [pc, #12]	; (b7690 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7684:	6003      	str	r3, [r0, #0]
   b7686:	4604      	mov	r4, r0
   b7688:	f7ff ffa6 	bl	b75d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b768c:	4620      	mov	r0, r4
   b768e:	bd10      	pop	{r4, pc}
   b7690:	000b879c 	.word	0x000b879c

000b7694 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7694:	b510      	push	{r4, lr}
   b7696:	4604      	mov	r4, r0
   b7698:	f7ff fff2 	bl	b7680 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b769c:	4620      	mov	r0, r4
   b769e:	210c      	movs	r1, #12
   b76a0:	f7fc fcfd 	bl	b409e <_ZdlPvj>
   b76a4:	4620      	mov	r0, r4
   b76a6:	bd10      	pop	{r4, pc}

000b76a8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b76a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b76aa:	9f08      	ldr	r7, [sp, #32]
   b76ac:	4297      	cmp	r7, r2
   b76ae:	4605      	mov	r5, r0
   b76b0:	460e      	mov	r6, r1
   b76b2:	4614      	mov	r4, r2
   b76b4:	d00a      	beq.n	b76cc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b76b6:	68a8      	ldr	r0, [r5, #8]
   b76b8:	6802      	ldr	r2, [r0, #0]
   b76ba:	9708      	str	r7, [sp, #32]
   b76bc:	6a15      	ldr	r5, [r2, #32]
   b76be:	4631      	mov	r1, r6
   b76c0:	4622      	mov	r2, r4
   b76c2:	46ac      	mov	ip, r5
   b76c4:	b003      	add	sp, #12
   b76c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b76ca:	4760      	bx	ip
   b76cc:	4619      	mov	r1, r3
   b76ce:	9301      	str	r3, [sp, #4]
   b76d0:	f000 f858 	bl	b7784 <_ZNKSt9type_infoeqERKS_>
   b76d4:	9b01      	ldr	r3, [sp, #4]
   b76d6:	2800      	cmp	r0, #0
   b76d8:	d0ed      	beq.n	b76b6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b76da:	2006      	movs	r0, #6
   b76dc:	b003      	add	sp, #12
   b76de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b76e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b76e0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b76e4:	460d      	mov	r5, r1
   b76e6:	4619      	mov	r1, r3
   b76e8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b76ec:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b76f0:	4681      	mov	r9, r0
   b76f2:	4617      	mov	r7, r2
   b76f4:	4698      	mov	r8, r3
   b76f6:	f000 f845 	bl	b7784 <_ZNKSt9type_infoeqERKS_>
   b76fa:	b190      	cbz	r0, b7722 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b76fc:	2d00      	cmp	r5, #0
   b76fe:	6034      	str	r4, [r6, #0]
   b7700:	7137      	strb	r7, [r6, #4]
   b7702:	db09      	blt.n	b7718 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7704:	1961      	adds	r1, r4, r5
   b7706:	458a      	cmp	sl, r1
   b7708:	bf0c      	ite	eq
   b770a:	2106      	moveq	r1, #6
   b770c:	2101      	movne	r1, #1
   b770e:	71b1      	strb	r1, [r6, #6]
   b7710:	2000      	movs	r0, #0
   b7712:	b001      	add	sp, #4
   b7714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7718:	3502      	adds	r5, #2
   b771a:	d1f9      	bne.n	b7710 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b771c:	2301      	movs	r3, #1
   b771e:	71b3      	strb	r3, [r6, #6]
   b7720:	e7f6      	b.n	b7710 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7722:	4554      	cmp	r4, sl
   b7724:	d106      	bne.n	b7734 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7726:	4659      	mov	r1, fp
   b7728:	4648      	mov	r0, r9
   b772a:	f000 f82b 	bl	b7784 <_ZNKSt9type_infoeqERKS_>
   b772e:	b108      	cbz	r0, b7734 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7730:	7177      	strb	r7, [r6, #5]
   b7732:	e7ed      	b.n	b7710 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7734:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7738:	6803      	ldr	r3, [r0, #0]
   b773a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b773e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7742:	69dc      	ldr	r4, [r3, #28]
   b7744:	463a      	mov	r2, r7
   b7746:	4643      	mov	r3, r8
   b7748:	4629      	mov	r1, r5
   b774a:	46a4      	mov	ip, r4
   b774c:	b001      	add	sp, #4
   b774e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7752:	4760      	bx	ip

000b7754 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7758:	4607      	mov	r7, r0
   b775a:	460c      	mov	r4, r1
   b775c:	4615      	mov	r5, r2
   b775e:	461e      	mov	r6, r3
   b7760:	f7ff ff6d 	bl	b763e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7764:	b948      	cbnz	r0, b777a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7766:	68b8      	ldr	r0, [r7, #8]
   b7768:	6803      	ldr	r3, [r0, #0]
   b776a:	699f      	ldr	r7, [r3, #24]
   b776c:	462a      	mov	r2, r5
   b776e:	4633      	mov	r3, r6
   b7770:	4621      	mov	r1, r4
   b7772:	46bc      	mov	ip, r7
   b7774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7778:	4760      	bx	ip
   b777a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b777e <_ZNSt9type_infoD1Ev>:
   b777e:	4770      	bx	lr

000b7780 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7780:	2000      	movs	r0, #0
   b7782:	4770      	bx	lr

000b7784 <_ZNKSt9type_infoeqERKS_>:
   b7784:	4281      	cmp	r1, r0
   b7786:	b508      	push	{r3, lr}
   b7788:	d00e      	beq.n	b77a8 <_ZNKSt9type_infoeqERKS_+0x24>
   b778a:	6840      	ldr	r0, [r0, #4]
   b778c:	7803      	ldrb	r3, [r0, #0]
   b778e:	2b2a      	cmp	r3, #42	; 0x2a
   b7790:	d00c      	beq.n	b77ac <_ZNKSt9type_infoeqERKS_+0x28>
   b7792:	6849      	ldr	r1, [r1, #4]
   b7794:	780b      	ldrb	r3, [r1, #0]
   b7796:	2b2a      	cmp	r3, #42	; 0x2a
   b7798:	bf08      	it	eq
   b779a:	3101      	addeq	r1, #1
   b779c:	f000 f852 	bl	b7844 <strcmp>
   b77a0:	fab0 f080 	clz	r0, r0
   b77a4:	0940      	lsrs	r0, r0, #5
   b77a6:	bd08      	pop	{r3, pc}
   b77a8:	2001      	movs	r0, #1
   b77aa:	e7fc      	b.n	b77a6 <_ZNKSt9type_infoeqERKS_+0x22>
   b77ac:	2000      	movs	r0, #0
   b77ae:	e7fa      	b.n	b77a6 <_ZNKSt9type_infoeqERKS_+0x22>

000b77b0 <atexit>:
   b77b0:	2300      	movs	r3, #0
   b77b2:	4601      	mov	r1, r0
   b77b4:	461a      	mov	r2, r3
   b77b6:	4618      	mov	r0, r3
   b77b8:	f000 b856 	b.w	b7868 <__register_exitproc>

000b77bc <memcpy>:
   b77bc:	440a      	add	r2, r1
   b77be:	4291      	cmp	r1, r2
   b77c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b77c4:	d100      	bne.n	b77c8 <memcpy+0xc>
   b77c6:	4770      	bx	lr
   b77c8:	b510      	push	{r4, lr}
   b77ca:	f811 4b01 	ldrb.w	r4, [r1], #1
   b77ce:	f803 4f01 	strb.w	r4, [r3, #1]!
   b77d2:	4291      	cmp	r1, r2
   b77d4:	d1f9      	bne.n	b77ca <memcpy+0xe>
   b77d6:	bd10      	pop	{r4, pc}

000b77d8 <memset>:
   b77d8:	4402      	add	r2, r0
   b77da:	4603      	mov	r3, r0
   b77dc:	4293      	cmp	r3, r2
   b77de:	d100      	bne.n	b77e2 <memset+0xa>
   b77e0:	4770      	bx	lr
   b77e2:	f803 1b01 	strb.w	r1, [r3], #1
   b77e6:	e7f9      	b.n	b77dc <memset+0x4>

000b77e8 <srand>:
   b77e8:	b538      	push	{r3, r4, r5, lr}
   b77ea:	4b10      	ldr	r3, [pc, #64]	; (b782c <srand+0x44>)
   b77ec:	681d      	ldr	r5, [r3, #0]
   b77ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b77f0:	4604      	mov	r4, r0
   b77f2:	b9b3      	cbnz	r3, b7822 <srand+0x3a>
   b77f4:	2018      	movs	r0, #24
   b77f6:	f7fe fd3b 	bl	b6270 <malloc>
   b77fa:	4602      	mov	r2, r0
   b77fc:	63a8      	str	r0, [r5, #56]	; 0x38
   b77fe:	b920      	cbnz	r0, b780a <srand+0x22>
   b7800:	4b0b      	ldr	r3, [pc, #44]	; (b7830 <srand+0x48>)
   b7802:	480c      	ldr	r0, [pc, #48]	; (b7834 <srand+0x4c>)
   b7804:	2142      	movs	r1, #66	; 0x42
   b7806:	f7fe fd5b 	bl	b62c0 <__assert_func>
   b780a:	490b      	ldr	r1, [pc, #44]	; (b7838 <srand+0x50>)
   b780c:	4b0b      	ldr	r3, [pc, #44]	; (b783c <srand+0x54>)
   b780e:	e9c0 1300 	strd	r1, r3, [r0]
   b7812:	4b0b      	ldr	r3, [pc, #44]	; (b7840 <srand+0x58>)
   b7814:	6083      	str	r3, [r0, #8]
   b7816:	230b      	movs	r3, #11
   b7818:	8183      	strh	r3, [r0, #12]
   b781a:	2100      	movs	r1, #0
   b781c:	2001      	movs	r0, #1
   b781e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7822:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7824:	2200      	movs	r2, #0
   b7826:	611c      	str	r4, [r3, #16]
   b7828:	615a      	str	r2, [r3, #20]
   b782a:	bd38      	pop	{r3, r4, r5, pc}
   b782c:	2003e580 	.word	0x2003e580
   b7830:	000b87d5 	.word	0x000b87d5
   b7834:	000b87ec 	.word	0x000b87ec
   b7838:	abcd330e 	.word	0xabcd330e
   b783c:	e66d1234 	.word	0xe66d1234
   b7840:	0005deec 	.word	0x0005deec

000b7844 <strcmp>:
   b7844:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7848:	f811 3b01 	ldrb.w	r3, [r1], #1
   b784c:	2a01      	cmp	r2, #1
   b784e:	bf28      	it	cs
   b7850:	429a      	cmpcs	r2, r3
   b7852:	d0f7      	beq.n	b7844 <strcmp>
   b7854:	1ad0      	subs	r0, r2, r3
   b7856:	4770      	bx	lr

000b7858 <strlen>:
   b7858:	4603      	mov	r3, r0
   b785a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b785e:	2a00      	cmp	r2, #0
   b7860:	d1fb      	bne.n	b785a <strlen+0x2>
   b7862:	1a18      	subs	r0, r3, r0
   b7864:	3801      	subs	r0, #1
   b7866:	4770      	bx	lr

000b7868 <__register_exitproc>:
   b7868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b786c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7928 <__register_exitproc+0xc0>
   b7870:	4606      	mov	r6, r0
   b7872:	f8d8 0000 	ldr.w	r0, [r8]
   b7876:	461f      	mov	r7, r3
   b7878:	460d      	mov	r5, r1
   b787a:	4691      	mov	r9, r2
   b787c:	f000 f856 	bl	b792c <__retarget_lock_acquire_recursive>
   b7880:	4b25      	ldr	r3, [pc, #148]	; (b7918 <__register_exitproc+0xb0>)
   b7882:	681c      	ldr	r4, [r3, #0]
   b7884:	b934      	cbnz	r4, b7894 <__register_exitproc+0x2c>
   b7886:	4c25      	ldr	r4, [pc, #148]	; (b791c <__register_exitproc+0xb4>)
   b7888:	601c      	str	r4, [r3, #0]
   b788a:	4b25      	ldr	r3, [pc, #148]	; (b7920 <__register_exitproc+0xb8>)
   b788c:	b113      	cbz	r3, b7894 <__register_exitproc+0x2c>
   b788e:	681b      	ldr	r3, [r3, #0]
   b7890:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7894:	6863      	ldr	r3, [r4, #4]
   b7896:	2b1f      	cmp	r3, #31
   b7898:	dd07      	ble.n	b78aa <__register_exitproc+0x42>
   b789a:	f8d8 0000 	ldr.w	r0, [r8]
   b789e:	f000 f847 	bl	b7930 <__retarget_lock_release_recursive>
   b78a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b78a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b78aa:	b34e      	cbz	r6, b7900 <__register_exitproc+0x98>
   b78ac:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b78b0:	b988      	cbnz	r0, b78d6 <__register_exitproc+0x6e>
   b78b2:	4b1c      	ldr	r3, [pc, #112]	; (b7924 <__register_exitproc+0xbc>)
   b78b4:	b923      	cbnz	r3, b78c0 <__register_exitproc+0x58>
   b78b6:	f8d8 0000 	ldr.w	r0, [r8]
   b78ba:	f000 f838 	bl	b792e <__retarget_lock_release>
   b78be:	e7f0      	b.n	b78a2 <__register_exitproc+0x3a>
   b78c0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b78c4:	f7fe fcd4 	bl	b6270 <malloc>
   b78c8:	2800      	cmp	r0, #0
   b78ca:	d0f4      	beq.n	b78b6 <__register_exitproc+0x4e>
   b78cc:	2300      	movs	r3, #0
   b78ce:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b78d2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b78d6:	6863      	ldr	r3, [r4, #4]
   b78d8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b78dc:	2201      	movs	r2, #1
   b78de:	409a      	lsls	r2, r3
   b78e0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b78e4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b78e8:	4313      	orrs	r3, r2
   b78ea:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b78ee:	2e02      	cmp	r6, #2
   b78f0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b78f4:	bf02      	ittt	eq
   b78f6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b78fa:	4313      	orreq	r3, r2
   b78fc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7900:	6863      	ldr	r3, [r4, #4]
   b7902:	f8d8 0000 	ldr.w	r0, [r8]
   b7906:	1c5a      	adds	r2, r3, #1
   b7908:	3302      	adds	r3, #2
   b790a:	6062      	str	r2, [r4, #4]
   b790c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7910:	f000 f80e 	bl	b7930 <__retarget_lock_release_recursive>
   b7914:	2000      	movs	r0, #0
   b7916:	e7c6      	b.n	b78a6 <__register_exitproc+0x3e>
   b7918:	2003e7e8 	.word	0x2003e7e8
   b791c:	2003e75c 	.word	0x2003e75c
   b7920:	00000000 	.word	0x00000000
   b7924:	000b6271 	.word	0x000b6271
   b7928:	2003e5e4 	.word	0x2003e5e4

000b792c <__retarget_lock_acquire_recursive>:
   b792c:	4770      	bx	lr

000b792e <__retarget_lock_release>:
   b792e:	4770      	bx	lr

000b7930 <__retarget_lock_release_recursive>:
   b7930:	4770      	bx	lr

000b7932 <link_code_end>:
	...

000b7934 <dynalib_user>:
   b7934:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b7944:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b7954:	7620 7269 7574 6c61 4400 5349 4c50 5941      virtual.DISPLAY
   b7964:	4320 4e4f 454e 5443 4445 6e00 7765 656e      CONNECTED.newne
   b7974:	7477 706f 6369 4100 6772 6e6f 3220 4320     wtopic.Argon 2 C
   b7984:	6e6f 656e 7463 6465 6c00 6261 742e 6568     onnected.lab.the
   b7994:	6377 2e6c 6f63 006d                         wcl.com.

000b799c <_ZL4font>:
   b799c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b79ac:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b79bc:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b79cc:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b79dc:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b79ec:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b79fc:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b7a0c:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b7a1c:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b7a2c:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b7a3c:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b7a4c:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b7a5c:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b7a6c:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b7a7c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b7a8c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b7a9c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b7aac:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b7abc:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b7acc:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b7adc:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b7aec:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b7afc:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b7b0c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b7b1c:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b7b2c:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b7b3c:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b7b4c:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b7b5c:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b7b6c:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b7b7c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b7b8c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b7b9c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b7bac:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b7bbc:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b7bcc:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b7bdc:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b7bec:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b7bfc:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b7c0c:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b7c1c:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b7c2c:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b7c3c:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b7c4c:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b7c5c:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b7c6c:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b7c7c:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b7c8c:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b7c9c:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b7cac:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b7cbc:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b7ccc:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b7cdc:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b7cec:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b7cfc:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b7d0c:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b7d1c:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b7d2c:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b7d3c:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b7d4c:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b7d5c:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b7d6c:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b7d7c:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b7d8c:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b7d9c:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b7dac:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b7dbc:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b7dcc:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b7ddc:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b7dec:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b7dfc:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b7e0c:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b7e1c:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b7e2c:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b7e3c:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b7e4c:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b7e5c:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b7e6c:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b7e7c:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b7e8c:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000b7e9c <_ZTV12Adafruit_GFX>:
	...
   b7eac:	48c9 000b 66b1 000b 40a5 000b 42cf 000b     .H...f...@...B..
   b7ebc:	42d1 000b 4303 000b 42df 000b 42f1 000b     .B...C...B...B..
   b7ecc:	4211 000b 42cf 000b 44fb 000b 44f9 000b     .B...B...D...D..
   b7edc:	431b 000b 4359 000b 4393 000b 43d9 000b     .C..YC...C...C..
   b7eec:	43f5 000b 4479 000b 6564 6166 6c75 2074     .C..yD..default 
   b7efc:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   b7f0c:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   b7f1c:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   b7f2c:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000b7f38 <_ZTVN8particle11SPISettingsE>:
	...
   b7f40:	4a05 000b 49d7 000b 49d9 000b               .J...I...I..

000b7f4c <_ZL12splash1_data>:
   b7f4c:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   b7f5c:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   b7f6c:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   b7f7c:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   b7f8c:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   b7f9c:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   b7fb4:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   b7fc4:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   b7fd4:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   b7fe4:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   b7ff4:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   b8004:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   b8014:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   b8024:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   b8034:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   b8044:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   b8054:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   b8064:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   b8074:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   b8084:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   b8094:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   b80a4:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   b80b4:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   b80c4:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   b80dc:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   b80f4:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   b8104:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   b8114:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   b8124:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   b8134:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   b8144:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   b8154:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   b8164:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   b8174:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   b8184:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   b8194:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   b81a4:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   b81b4:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   b81c4:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   b81d4:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   b81e4:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   b81f4:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   b8204:	fdff 5b6b 6adb c0fd                         ..k[.j..

000b820c <_ZL12splash2_data>:
   b820c:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b821c:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b822c:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b8248:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b8258:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b8268:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b8278:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b8288:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b8298:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b82a8:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b82b8:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b82c8:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b82d8:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b82e8:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b82f8:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b8308:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b8318:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b8328:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b8338:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b8348:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b8358:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b8368:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b8378:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b8388:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b83a0:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b83b0:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b83c0:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b83d0:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b83e0:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b83ec <_ZTV16Adafruit_SSD1306>:
	...
   b83f4:	4a59 000b 4a71 000b 48c9 000b 66b1 000b     YJ..qJ...H...f..
   b8404:	4a85 000b 42cf 000b 42d1 000b 4303 000b     .J...B...B...C..
   b8414:	42df 000b 42f1 000b 4211 000b 42cf 000b     .B...B...B...B..
   b8424:	44fb 000b 4c23 000b 51cb 000b 517d 000b     .D..#L...Q..}Q..
   b8434:	4393 000b 43d9 000b 43f5 000b 4479 000b     .C...C...C..yD..

000b8444 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b8444:	8000 e0c0 f8f0 fefc                         ........

000b844c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b844c:	0100 0703 1f0f 7f3f                         ......?.

000b8454 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b8454:	d5ae a880                                   ....

000b8458 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b8458:	00d3 8d40                                   ..@.

000b845c <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b845c:	0020 c8a1                                    ...

000b8460 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b8460:	40db a6a4 af2e                              .@....

000b8466 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b8466:	02da 8f81                                   ....

000b846a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b846a:	12da                                         ...

000b846d <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b846d:	02da                                         ...

000b8470 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b8470:	0022 21ff 0000 4d04 5451 0454 0600 514d     "..!...MQTT...MQ
   b8480:	7349 7064 0003 0000                         Isdp....

000b8488 <_ZTV16OledWingAdafruit>:
	...
   b8490:	5c75 000b 5c95 000b 48c9 000b 66b1 000b     u\...\...H...f..
   b84a0:	4a85 000b 42cf 000b 42d1 000b 4303 000b     .J...B...B...C..
   b84b0:	42df 000b 42f1 000b 4211 000b 42cf 000b     .B...B...B...B..
   b84c0:	44fb 000b 4c23 000b 51cb 000b 517d 000b     .D..#L...Q..}Q..
   b84d0:	4393 000b 43d9 000b 43f5 000b 4479 000b     .C...C...C..yD..

000b84e0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b84e8 <_ZTVN5spark13EthernetClassE>:
	...
   b84f0:	6357 000b 634d 000b 6343 000b 6339 000b     Wc..Mc..Cc..9c..
   b8500:	632d 000b 6321 000b 658d 000b 6595 000b     -c..!c...e...e..
   b8510:	6315 000b 630d 000b 6303 000b 62f9 000b     .c...c...c...b..
   b8520:	65c5 000b                                   .e..

000b8524 <_ZTV7TwoWire>:
	...
   b852c:	6375 000b 63bf 000b 6397 000b 6377 000b     uc...c...c..wc..
   b853c:	639f 000b 63a7 000b 63af 000b 63b7 000b     .c...c...c...c..

000b854c <_ZTV9IPAddress>:
	...
   b8554:	6431 000b 6421 000b 6423 000b 7061 0070     1d..!d..#d..app.

000b8564 <_ZTVN5spark12NetworkClassE>:
	...
   b856c:	654d 000b 6557 000b 6561 000b 656b 000b     Me..We..ae..ke..
   b857c:	6575 000b 6581 000b 658d 000b 6595 000b     ue...e...e...e..
   b858c:	659d 000b 65a9 000b 65b1 000b 65bb 000b     .e...e...e...e..
   b859c:	65c5 000b                                   .e..

000b85a0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b85a0:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   b85b0:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000b85c0 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b85c8:	6ad5 000b 6af9 000b 702b 000b 6b07 000b     .j...j..+p...k..
   b85d8:	6ad9 000b                                   .j..

000b85dc <_ZTV9TCPClient>:
	...
   b85e4:	6b85 000b 6bb9 000b 6a51 000b 6a6b 000b     .k...k..Qj..kj..
   b85f4:	6ec1 000b 6a95 000b 6d37 000b 6ac9 000b     .n...j..7m...j..
   b8604:	6dc9 000b 6c09 000b 6d65 000b 6f75 000b     .m...l..em..uo..
   b8614:	6d05 000b 6acb 000b 6a7d 000b 6b0d 000b     .m...j..}j...k..
   b8624:	6be9 000b 5925 252d 2d6d 6425 2554 3a48     .k..%Y-%m-%dT%H:
   b8634:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b8644 <_ZTV11USARTSerial>:
	...
   b864c:	7045 000b 70b1 000b 7089 000b 66b1 000b     Ep...p...p...f..
   b865c:	7059 000b 7075 000b 7067 000b 7083 000b     Yp..up..gp...p..
   b866c:	7047 000b 704b 000b                         Gp..Kp..

000b8674 <_ZTV9USBSerial>:
	...
   b867c:	70ef 000b 7157 000b 712d 000b 66b1 000b     .p..Wq..-q...f..
   b868c:	711f 000b 70f1 000b 7101 000b 7151 000b     .q...p...q..Qq..
   b869c:	7111 000b 70e9 000b                         .q...p..

000b86a4 <_ZTVN5spark9WiFiClassE>:
	...
   b86ac:	7247 000b 723d 000b 7233 000b 71e9 000b     Gr..=r..3r...q..
   b86bc:	7227 000b 721b 000b 658d 000b 6595 000b     'r...r...e...e..
   b86cc:	720f 000b 7207 000b 71fd 000b 71f3 000b     .r...r...q...q..
   b86dc:	65c5 000b                                   .e..

000b86e0 <_ZSt7nothrow>:
	...

000b86e1 <_ZTSSt19_Sp_make_shared_tag>:
   b86e1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b86f1:	6572 5f64 6174 0067 0000                     red_tag....

000b86fc <_ZTISt19_Sp_make_shared_tag>:
   b86fc:	873c 000b 86e1 000b                         <.......

000b8704 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b8704:	879c 000b 8710 000b 87c0 000b               ............

000b8710 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b8710:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b8720:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b8730:	0045 0000                                   E...

000b8734 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b8734:	0000 0000 8704 000b 75d9 000b 75ed 000b     .........u...u..
   b8744:	7781 000b 7781 000b 7657 000b 7599 000b     .w...w..Wv...u..
   b8754:	763f 000b 7601 000b 75cb 000b               ?v...v...u..

000b8760 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b8760:	879c 000b 876c 000b 8704 000b               ....l.......

000b876c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b876c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b877c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b878c:	666e 456f 0000 0000                         nfoE....

000b8794 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b8794:	0000 0000 8760 000b 7681 000b 7695 000b     ....`....v...v..
   b87a4:	7781 000b 7781 000b 7657 000b 7599 000b     .w...w..Wv...u..
   b87b4:	7755 000b 76e1 000b 76a9 000b               Uw...v...v..

000b87c0 <_ZTISt9type_info>:
   b87c0:	873c 000b 87c8 000b                         <.......

000b87c8 <_ZTSSt9type_info>:
   b87c8:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b87d8:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b87e8:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b87f8:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b8808:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b8818:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b8828:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b8838:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b8845 <link_const_variable_data_end>:
   b8845:	00          	.byte	0x00
	...

000b8848 <link_constructors_location>:
   b8848:	000b41d5 	.word	0x000b41d5
   b884c:	000b62e9 	.word	0x000b62e9
   b8850:	000b6361 	.word	0x000b6361
   b8854:	000b653d 	.word	0x000b653d
   b8858:	000b669d 	.word	0x000b669d
   b885c:	000b67d9 	.word	0x000b67d9
   b8860:	000b6a2d 	.word	0x000b6a2d
   b8864:	000b7031 	.word	0x000b7031
   b8868:	000b7251 	.word	0x000b7251

000b886c <link_constructors_end>:
   b886c:	00000000 	.word	0x00000000
